/*! jQuery v1.12.2 | (c) jQuery Foundation | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m="1.12.2",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(n.isPlainObject(c)||(b=n.isArray(c)))?(b?(b=!1,f=a&&n.isArray(a)?a:[]):f=a&&n.isPlainObject(a)?a:{},g[d]=n.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray||function(a){return"array"===n.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;try{if(a.constructor&&!k.call(a,"constructor")&&!k.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(!l.ownFirst)for(b in a)return k.call(a,b);for(b in a);return void 0===b||k.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?i[j.call(a)]||"object":typeof a},globalEval:function(b){b&&n.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(h)return h.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return"string"==typeof b&&(f=a[b],b=a,a=f),n.isFunction(a)?(c=e.call(arguments,2),d=function(){return a.apply(b||this,c.concat(e.call(arguments)))},d.guid=a.guid=a.guid||n.guid++,d):void 0},now:function(){return+new Date},support:l}),"function"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){i["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=!!a&&"length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+L+"*\\]",O=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",P=new RegExp(L+"+","g"),Q=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),R=new RegExp("^"+L+"*,"+L+"*"),S=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),T=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),U=new RegExp(O),V=new RegExp("^"+M+"$"),W={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,_=/[+~]/,aa=/'|\\/g,ba=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ca=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(aa,"\\$&"):b.setAttribute("id",k=u),r=g(a),h=r.length,l=V.test(k)?"#"+k:"[id='"+k+"']";while(h--)r[h]=l+" "+qa(r[h]);s=r.join(","),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(Q,"$1"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ia(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return"undefined"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ia(function(a){var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",O)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||"").replace(ba,ca),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(P," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,"$1"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||"")||fa.error("unsupported lang: "+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=R.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q," ")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(Q,"$1"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ia(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ja("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ja("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute("disabled")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,y=/^.[^:#\[\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return n.inArray(a,b)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;e>b;b++)if(n.contains(d[b],this))return!0}));for(b=0;e>b;b++)n.find(a,d[b],c);return c=this.pushStack(e>1?n.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,"string"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,"string"==typeof a){if(e="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}if(f=d.getElementById(e[2]),f&&f.parentNode){if(f.id!==e[2])return A.find(a);this.length=1,this[0]=f}return this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b,c=n(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(n.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?n.inArray(this[0],n(a)):n.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,"parentNode")},parentsUntil:function(a,b,c){return u(a,"parentNode",c)},next:function(a){return F(a,"nextSibling")},prev:function(a){return F(a,"previousSibling")},nextAll:function(a){return u(a,"nextSibling")},prevAll:function(a){return u(a,"previousSibling")},nextUntil:function(a,b,c){return u(a,"nextSibling",c)},prevUntil:function(a,b,c){return u(a,"previousSibling",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return n.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||(e=n.uniqueSort(e)),D.test(a)&&(e=e.reverse())),this.pushStack(e)}});var G=/\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=!0,c||j.disable(),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler("ready"),n(d).off("ready"))))}});function J(){d.addEventListener?(d.removeEventListener("DOMContentLoaded",K),a.removeEventListener("load",K)):(d.detachEvent("onreadystatechange",K),a.detachEvent("onload",K))}function K(){(d.addEventListener||"load"===a.event.type||"complete"===d.readyState)&&(J(),n.ready())}n.ready.promise=function(b){if(!I)if(I=n.Deferred(),"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll)a.setTimeout(n.ready);else if(d.addEventListener)d.addEventListener("DOMContentLoaded",K),a.addEventListener("load",K);else{d.attachEvent("onreadystatechange",K),a.attachEvent("onload",K);var c=!1;try{c=null==a.frameElement&&d.documentElement}catch(e){}c&&c.doScroll&&!function f(){if(!n.isReady){try{c.doScroll("left")}catch(b){return a.setTimeout(f,50)}J(),n.ready()}}()}return I.promise(b)},n.ready.promise();var L;for(L in n(l))break;l.ownFirst="0"===L,l.inlineBlockNeedsLayout=!1,n(function(){var a,b,c,e;c=d.getElementsByTagName("body")[0],c&&c.style&&(b=d.createElement("div"),e=d.createElement("div"),e.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(e).appendChild(b),"undefined"!=typeof b.style.zoom&&(b.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",l.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(e))}),function(){var a=d.createElement("div");l.deleteExpando=!0;try{delete a.test}catch(b){l.deleteExpando=!1}a=null}();var M=function(a){var b=n.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b},N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(O,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}n.data(a,b,c)}else c=void 0;
}return c}function Q(a){var b;for(b in a)if(("data"!==b||!n.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;return!0}function R(a,b,d,e){if(M(a)){var f,g,h=n.expando,i=a.nodeType,j=i?n.cache:a,k=i?a[h]:a[h]&&h;if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||n.guid++:h),j[k]||(j[k]=i?{}:{toJSON:n.noop}),"object"!=typeof b&&"function"!=typeof b||(e?j[k]=n.extend(j[k],b):j[k].data=n.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[n.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[n.camelCase(b)])):f=g,f}}function S(a,b,c){if(M(a)){var d,e,f=a.nodeType,g=f?n.cache:a,h=f?a[n.expando]:n.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){n.isArray(b)?b=b.concat(n.map(b,n.camelCase)):b in d?b=[b]:(b=n.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!Q(d):!n.isEmptyObject(d))return}(c||(delete g[h].data,Q(g[h])))&&(f?n.cleanData([a],!0):l.deleteExpando||g!=g.window?delete g[h]:g[h]=void 0)}}}n.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?n.cache[a[n.expando]]:a[n.expando],!!a&&!Q(a)},data:function(a,b,c){return R(a,b,c)},removeData:function(a,b){return S(a,b)},_data:function(a,b,c){return R(a,b,c,!0)},_removeData:function(a,b){return S(a,b,!0)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=n.data(f),1===f.nodeType&&!n._data(f,"parsedAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));n._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){n.data(this,a)}):arguments.length>1?this.each(function(){n.data(this,a,b)}):f?P(f,a,n.data(f,a)):void 0},removeData:function(a){return this.each(function(){n.removeData(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=n._data(a,b),c&&(!d||n.isArray(c)?d=n._data(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return n._data(a,c)||n._data(a,c,{empty:n.Callbacks("once memory").add(function(){n._removeData(a,b+"queue"),n._removeData(a,c)})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=n._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}}),function(){var a;l.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,e;return c=d.getElementsByTagName("body")[0],c&&c.style?(b=d.createElement("div"),e=d.createElement("div"),e.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(e).appendChild(b),"undefined"!=typeof b.style.zoom&&(b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",b.appendChild(d.createElement("div")).style.width="5px",a=3!==b.offsetWidth),c.removeChild(e),a):void 0}}();var T=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,U=new RegExp("^(?:([+-])=|)("+T+")([a-z%]*)$","i"),V=["Top","Right","Bottom","Left"],W=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)};function X(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,"")},i=h(),j=c&&c[3]||(n.cssNumber[b]?"":"px"),k=(n.cssNumber[b]||"px"!==j&&+i)&&U.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var Y=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)Y(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},Z=/^(?:checkbox|radio)$/i,$=/<([\w:-]+)/,_=/^$|\/(?:java|ecma)script/i,aa=/^\s+/,ba="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";function ca(a){var b=ba.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}!function(){var a=d.createElement("div"),b=d.createDocumentFragment(),c=d.createElement("input");a.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",l.leadingWhitespace=3===a.firstChild.nodeType,l.tbody=!a.getElementsByTagName("tbody").length,l.htmlSerialize=!!a.getElementsByTagName("link").length,l.html5Clone="<:nav></:nav>"!==d.createElement("nav").cloneNode(!0).outerHTML,c.type="checkbox",c.checked=!0,b.appendChild(c),l.appendChecked=c.checked,a.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!a.cloneNode(!0).lastChild.defaultValue,b.appendChild(a),c=d.createElement("input"),c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),a.appendChild(c),l.checkClone=a.cloneNode(!0).cloneNode(!0).lastChild.checked,l.noCloneEvent=!!a.addEventListener,a[n.expando]=1,l.attributes=!a.getAttribute(n.expando)}();var da={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:l.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};da.optgroup=da.option,da.tbody=da.tfoot=da.colgroup=da.caption=da.thead,da.th=da.td;function ea(a,b){var c,d,e=0,f="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||n.nodeName(d,b)?f.push(d):n.merge(f,ea(d,b));return void 0===b||b&&n.nodeName(a,b)?n.merge([a],f):f}function fa(a,b){for(var c,d=0;null!=(c=a[d]);d++)n._data(c,"globalEval",!b||n._data(b[d],"globalEval"))}var ga=/<|&#?\w+;/,ha=/<tbody/i;function ia(a){Z.test(a.type)&&(a.defaultChecked=a.checked)}function ja(a,b,c,d,e){for(var f,g,h,i,j,k,m,o=a.length,p=ca(b),q=[],r=0;o>r;r++)if(g=a[r],g||0===g)if("object"===n.type(g))n.merge(q,g.nodeType?[g]:g);else if(ga.test(g)){i=i||p.appendChild(b.createElement("div")),j=($.exec(g)||["",""])[1].toLowerCase(),m=da[j]||da._default,i.innerHTML=m[1]+n.htmlPrefilter(g)+m[2],f=m[0];while(f--)i=i.lastChild;if(!l.leadingWhitespace&&aa.test(g)&&q.push(b.createTextNode(aa.exec(g)[0])),!l.tbody){g="table"!==j||ha.test(g)?"<table>"!==m[1]||ha.test(g)?0:i:i.firstChild,f=g&&g.childNodes.length;while(f--)n.nodeName(k=g.childNodes[f],"tbody")&&!k.childNodes.length&&g.removeChild(k)}n.merge(q,i.childNodes),i.textContent="";while(i.firstChild)i.removeChild(i.firstChild);i=p.lastChild}else q.push(b.createTextNode(g));i&&p.removeChild(i),l.appendChecked||n.grep(ea(q,"input"),ia),r=0;while(g=q[r++])if(d&&n.inArray(g,d)>-1)e&&e.push(g);else if(h=n.contains(g.ownerDocument,g),i=ea(p.appendChild(g),"script"),h&&fa(i),c){f=0;while(g=i[f++])_.test(g.type||"")&&c.push(g)}return i=null,p}!function(){var b,c,e=d.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(l[b]=c in a)||(e.setAttribute(c,"t"),l[b]=e.attributes[c].expando===!1);e=null}();var ka=/^(?:input|select|textarea)$/i,la=/^key/,ma=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,na=/^(?:focusinfocus|focusoutblur)$/,oa=/^([^.]*)(?:\.(.+)|)/;function pa(){return!0}function qa(){return!1}function ra(){try{return d.activeElement}catch(a){}}function sa(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)sa(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=qa;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=n.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return"undefined"==typeof n||a&&n.event.triggered===a.type?void 0:n.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(G)||[""],h=b.length;while(h--)f=oa.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=n.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=n.event.special[o]||{},l=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},i),(m=g[o])||(m=g[o]=[],m.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,l):m.push(l),n.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n.hasData(a)&&n._data(a);if(r&&(k=r.events)){b=(b||"").match(G)||[""],j=b.length;while(j--)if(h=oa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=m.length;while(f--)g=m[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(m.splice(f,1),g.selector&&m.delegateCount--,l.remove&&l.remove.call(a,g));i&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(k)&&(delete r.handle,n._removeData(a,"events"))}},trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,"type")?b.type:b,r=k.call(b,"namespace")?b.namespace.split("."):[];if(i=m=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!na.test(q+n.event.triggered)&&(q.indexOf(".")>-1&&(r=q.split("."),q=r.shift(),r.sort()),h=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),l=n.event.special[q]||{},f||!l.trigger||l.trigger.apply(e,c)!==!1)){if(!f&&!l.noBubble&&!n.isWindow(e)){for(j=l.delegateType||q,na.test(j+q)||(i=i.parentNode);i;i=i.parentNode)p.push(i),m=i;m===(e.ownerDocument||d)&&p.push(m.defaultView||m.parentWindow||a)}o=0;while((i=p[o++])&&!b.isPropagationStopped())b.type=o>1?j:l.bindType||q,g=(n._data(i,"events")||{})[b.type]&&n._data(i,"handle"),g&&g.apply(i,c),g=h&&i[h],g&&g.apply&&M(i)&&(b.result=g.apply(i,c),b.result===!1&&b.preventDefault());if(b.type=q,!f&&!b.isDefaultPrevented()&&(!l._default||l._default.apply(p.pop(),c)===!1)&&M(e)&&h&&e[q]&&!n.isWindow(e)){m=e[h],m&&(e[h]=null),n.event.triggered=q;try{e[q]()}catch(s){}n.event.triggered=void 0,m&&(e[h]=m)}return b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(n._data(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())a.rnamespace&&!a.rnamespace.test(g.namespace)||(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ma.test(f)?this.mouseHooks:la.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=g.srcElement||d),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,h.filter?h.filter(a,g):a},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,e,f,g=b.button,h=b.fromElement;return null==a.pageX&&null!=b.clientX&&(e=a.target.ownerDocument||d,f=e.documentElement,c=e.body,a.pageX=b.clientX+(f&&f.scrollLeft||c&&c.scrollLeft||0)-(f&&f.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(f&&f.scrollTop||c&&c.scrollTop||0)-(f&&f.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&h&&(a.relatedTarget=h===a.target?b.toElement:h),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ra()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===ra()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return n.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b),d.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=d.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)}:function(a,b,c){var d="on"+b;a.detachEvent&&("undefined"==typeof a[d]&&(a[d]=null),a.detachEvent(d,c))},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?pa:qa):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:qa,isPropagationStopped:qa,isImmediatePropagationStopped:qa,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=pa,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=pa,a&&!this.isSimulated&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=pa,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||n.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),l.submit||(n.event.special.submit={setup:function(){return n.nodeName(this,"form")?!1:void n.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=n.nodeName(b,"input")||n.nodeName(b,"button")?n.prop(b,"form"):void 0;c&&!n._data(c,"submit")&&(n.event.add(c,"submit._submit",function(a){a._submitBubble=!0}),n._data(c,"submit",!0))})},postDispatch:function(a){a._submitBubble&&(delete a._submitBubble,this.parentNode&&!a.isTrigger&&n.event.simulate("submit",this.parentNode,a))},teardown:function(){return n.nodeName(this,"form")?!1:void n.event.remove(this,"._submit")}}),l.change||(n.event.special.change={setup:function(){return ka.test(this.nodeName)?("checkbox"!==this.type&&"radio"!==this.type||(n.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._justChanged=!0)}),n.event.add(this,"click._change",function(a){this._justChanged&&!a.isTrigger&&(this._justChanged=!1),n.event.simulate("change",this,a)})),!1):void n.event.add(this,"beforeactivate._change",function(a){var b=a.target;ka.test(b.nodeName)&&!n._data(b,"change")&&(n.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||n.event.simulate("change",this.parentNode,a)}),n._data(b,"change",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return n.event.remove(this,"._change"),!ka.test(this.nodeName)}}),l.focusin||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=n._data(d,b);e||d.addEventListener(a,c,!0),n._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=n._data(d,b)-1;e?n._data(d,b,e):(d.removeEventListener(a,c,!0),n._removeData(d,b))}}}),n.fn.extend({on:function(a,b,c,d){return sa(this,a,b,c,d)},one:function(a,b,c,d){return sa(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=qa),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var ta=/ jQuery\d+="(?:null|\d+)"/g,ua=new RegExp("<(?:"+ba+")[\\s/>]","i"),va=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,wa=/<script|<style|<link/i,xa=/checked\s*(?:[^=]|=\s*.checked.)/i,ya=/^true\/(.*)/,za=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Aa=ca(d),Ba=Aa.appendChild(d.createElement("div"));function Ca(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function Da(a){return a.type=(null!==n.find.attr(a,"type"))+"/"+a.type,a}function Ea(a){var b=ya.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Fa(a,b){if(1===b.nodeType&&n.hasData(a)){var c,d,e,f=n._data(a),g=n._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)n.event.add(b,c,h[c][d])}g.data&&(g.data=n.extend({},g.data))}}function Ga(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!l.noCloneEvent&&b[n.expando]){e=n._data(b);for(d in e.events)n.removeEvent(b,d,e.handle);b.removeAttribute(n.expando)}"script"===c&&b.text!==a.text?(Da(b).text=a.text,Ea(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),l.html5Clone&&a.innerHTML&&!n.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&Z.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}}function Ha(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&"string"==typeof q&&!l.checkClone&&xa.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),Ha(f,b,c,d)});if(o&&(k=ja(b,a[0].ownerDocument,!1,a,d),e=k.firstChild,1===k.childNodes.length&&(k=e),e||d)){for(i=n.map(ea(k,"script"),Da),h=i.length;o>m;m++)g=k,m!==p&&(g=n.clone(g,!0,!0),h&&n.merge(i,ea(g,"script"))),c.call(a[m],g,m);if(h)for(j=i[i.length-1].ownerDocument,n.map(i,Ea),m=0;h>m;m++)g=i[m],_.test(g.type||"")&&!n._data(g,"globalEval")&&n.contains(j,g)&&(g.src?n._evalUrl&&n._evalUrl(g.src):n.globalEval((g.text||g.textContent||g.innerHTML||"").replace(za,"")));k=e=null}return a}function Ia(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(ea(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&fa(ea(d,"script")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(va,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h,i=n.contains(a.ownerDocument,a);if(l.html5Clone||n.isXMLDoc(a)||!ua.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(Ba.innerHTML=a.outerHTML,Ba.removeChild(f=Ba.firstChild)),!(l.noCloneEvent&&l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(d=ea(f),h=ea(a),g=0;null!=(e=h[g]);++g)d[g]&&Ga(e,d[g]);if(b)if(c)for(h=h||ea(a),d=d||ea(f),g=0;null!=(e=h[g]);g++)Fa(e,d[g]);else Fa(a,f);return d=ea(f,"script"),d.length>0&&fa(d,!i&&ea(a,"script")),d=h=e=null,f},cleanData:function(a,b){for(var d,e,f,g,h=0,i=n.expando,j=n.cache,k=l.attributes,m=n.event.special;null!=(d=a[h]);h++)if((b||M(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)m[e]?n.event.remove(d,e):n.removeEvent(d,e,g.handle);j[f]&&(delete j[f],k||"undefined"==typeof d.removeAttribute?d[i]=void 0:d.removeAttribute(i),c.push(f))}}}),n.fn.extend({domManip:Ha,detach:function(a){return Ia(this,a,!0)},remove:function(a){return Ia(this,a)},text:function(a){return Y(this,function(a){return void 0===a?n.text(this):this.empty().append((this[0]&&this[0].ownerDocument||d).createTextNode(a))},null,a,arguments.length)},append:function(){return Ha(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ca(this,a);b.appendChild(a)}})},prepend:function(){return Ha(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ca(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return Ha(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return Ha(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&n.cleanData(ea(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&n.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return Y(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(ta,""):void 0;if("string"==typeof a&&!wa.test(a)&&(l.htmlSerialize||!ua.test(a))&&(l.leadingWhitespace||!aa.test(a))&&!da[($.exec(a)||["",""])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(ea(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return Ha(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(ea(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=0,e=[],f=n(a),h=f.length-1;h>=d;d++)c=d===h?this:this.clone(!0),n(f[d])[b](c),g.apply(e,c.get());return this.pushStack(e)}});var Ja,Ka={HTML:"block",BODY:"block"};function La(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],"display");return c.detach(),d}function Ma(a){var b=d,c=Ka[a];return c||(c=La(a,b),"none"!==c&&c||(Ja=(Ja||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Ja[0].contentWindow||Ja[0].contentDocument).document,b.write(),b.close(),c=La(a,b),Ja.detach()),Ka[a]=c),c}var Na=/^margin/,Oa=new RegExp("^("+T+")(?!px)[a-z%]+$","i"),Pa=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Qa=d.documentElement;!function(){var b,c,e,f,g,h,i=d.createElement("div"),j=d.createElement("div");if(j.style){j.style.cssText="float:left;opacity:.5",l.opacity="0.5"===j.style.opacity,l.cssFloat=!!j.style.cssFloat,j.style.backgroundClip="content-box",j.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===j.style.backgroundClip,i=d.createElement("div"),i.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",j.innerHTML="",i.appendChild(j),l.boxSizing=""===j.style.boxSizing||""===j.style.MozBoxSizing||""===j.style.WebkitBoxSizing,n.extend(l,{reliableHiddenOffsets:function(){return null==b&&k(),f},boxSizingReliable:function(){return null==b&&k(),e},pixelMarginRight:function(){return null==b&&k(),c},pixelPosition:function(){return null==b&&k(),b},reliableMarginRight:function(){return null==b&&k(),g},reliableMarginLeft:function(){return null==b&&k(),h}});function k(){var k,l,m=d.documentElement;m.appendChild(i),j.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",b=e=h=!1,c=g=!0,a.getComputedStyle&&(l=a.getComputedStyle(j),b="1%"!==(l||{}).top,h="2px"===(l||{}).marginLeft,e="4px"===(l||{width:"4px"}).width,j.style.marginRight="50%",c="4px"===(l||{marginRight:"4px"}).marginRight,k=j.appendChild(d.createElement("div")),k.style.cssText=j.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",k.style.marginRight=k.style.width="0",j.style.width="1px",g=!parseFloat((a.getComputedStyle(k)||{}).marginRight),j.removeChild(k)),j.style.display="none",f=0===j.getClientRects().length,f&&(j.style.display="",j.innerHTML="<table><tr><td></td><td>t</td></tr></table>",k=j.getElementsByTagName("td"),k[0].style.cssText="margin:0;border:0;padding:0;display:none",f=0===k[0].offsetHeight,f&&(k[0].style.display="",k[1].style.display="none",f=0===k[0].offsetHeight)),m.removeChild(i)}}}();var Ra,Sa,Ta=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ra=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Sa=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ra(a),g=c?c.getPropertyValue(b)||c[b]:void 0,""!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Oa.test(g)&&Na.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0===g?g:g+""}):Qa.currentStyle&&(Ra=function(a){return a.currentStyle},Sa=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ra(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Oa.test(g)&&!Ta.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function Ua(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Va=/alpha\([^)]*\)/i,Wa=/opacity\s*=\s*([^)]*)/i,Xa=/^(none|table(?!-c[ea]).+)/,Ya=new RegExp("^("+T+")(.*)$","i"),Za={position:"absolute",visibility:"hidden",display:"block"},$a={letterSpacing:"0",fontWeight:"400"},_a=["Webkit","O","Moz","ms"],ab=d.createElement("div").style;function bb(a){if(a in ab)return a;var b=a.charAt(0).toUpperCase()+a.slice(1),c=_a.length;while(c--)if(a=_a[c]+b,a in ab)return a}function cb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=n._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&W(d)&&(f[g]=n._data(d,"olddisplay",Ma(d.nodeName)))):(e=W(d),(c&&"none"!==c||!e)&&n._data(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function db(a,b,c){var d=Ya.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function eb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+V[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+V[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+V[f]+"Width",!0,e))):(g+=n.css(a,"padding"+V[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+V[f]+"Width",!0,e)));return g}function fb(b,c,e){var f=!0,g="width"===c?b.offsetWidth:b.offsetHeight,h=Ra(b),i=l.boxSizing&&"border-box"===n.css(b,"boxSizing",!1,h);if(d.msFullscreenElement&&a.top!==a&&b.getClientRects().length&&(g=Math.round(100*b.getBoundingClientRect()[c])),0>=g||null==g){if(g=Sa(b,c,h),(0>g||null==g)&&(g=b.style[c]),Oa.test(g))return g;f=i&&(l.boxSizingReliable()||g===b.style[c]),g=parseFloat(g)||0}return g+eb(b,c,e||(i?"border":"content"),f,h)+"px"}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Sa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":l.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;if(b=n.cssProps[h]||(n.cssProps[h]=bb(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=U.exec(c))&&e[1]&&(c=X(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(n.cssNumber[h]?"":"px")),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=bb(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Sa(a,b,d)),"normal"===f&&b in $a&&(f=$a[b]),""===c||c?(e=parseFloat(f),c===!0||isFinite(e)?e||0:f):f}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Xa.test(n.css(a,"display"))&&0===a.offsetWidth?Pa(a,Za,function(){return fb(a,b,d)}):fb(a,b,d):void 0},set:function(a,c,d){var e=d&&Ra(a);return db(a,c,d?eb(a,b,d,l.boxSizing&&"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),l.opacity||(n.cssHooks.opacity={get:function(a,b){return Wa.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=n.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===n.trim(f.replace(Va,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Va.test(f)?f.replace(Va,e):f+" "+e)}}),n.cssHooks.marginRight=Ua(l.reliableMarginRight,function(a,b){return b?Pa(a,{display:"inline-block"},Sa,[a,"marginRight"]):void 0}),n.cssHooks.marginLeft=Ua(l.reliableMarginLeft,function(a,b){
return b?(parseFloat(Sa(a,"marginLeft"))||(n.contains(a.ownerDocument,a)?a.getBoundingClientRect().left-Pa(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}):0))+"px":void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+V[d]+b]=f[d]||f[d-2]||f[0];return e}},Na.test(a)||(n.cssHooks[a+b].set=db)}),n.fn.extend({css:function(a,b){return Y(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ra(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return cb(this,!0)},hide:function(){return cb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){W(this)?n(this).show():n(this).hide()})}});function gb(a,b,c,d,e){return new gb.prototype.init(a,b,c,d,e)}n.Tween=gb,gb.prototype={constructor:gb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=gb.propHooks[this.prop];return a&&a.get?a.get(this):gb.propHooks._default.get(this)},run:function(a){var b,c=gb.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):gb.propHooks._default.set(this),this}},gb.prototype.init.prototype=gb.prototype,gb.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},gb.propHooks.scrollTop=gb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},n.fx=gb.prototype.init,n.fx.step={};var hb,ib,jb=/^(?:toggle|show|hide)$/,kb=/queueHooks$/;function lb(){return a.setTimeout(function(){hb=void 0}),hb=n.now()}function mb(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=V[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function nb(a,b,c){for(var d,e=(qb.tweeners[b]||[]).concat(qb.tweeners["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ob(a,b,c){var d,e,f,g,h,i,j,k,m=this,o={},p=a.style,q=a.nodeType&&W(a),r=n._data(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,m.always(function(){m.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=n.css(a,"display"),k="none"===j?n._data(a,"olddisplay")||Ma(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(l.inlineBlockNeedsLayout&&"inline"!==Ma(a.nodeName)?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",l.shrinkWrapBlocks()||m.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],jb.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(o))"inline"===("none"===j?Ma(a.nodeName):j)&&(p.display=j);else{r?"hidden"in r&&(q=r.hidden):r=n._data(a,"fxshow",{}),f&&(r.hidden=!q),q?n(a).show():m.done(function(){n(a).hide()}),m.done(function(){var b;n._removeData(a,"fxshow");for(b in o)n.style(a,b,o[b])});for(d in o)g=nb(q?r[d]:0,d,m),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function pb(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function qb(a,b,c){var d,e,f=0,g=qb.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=hb||lb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:hb||lb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for(pb(k,j.opts.specialEasing);g>f;f++)if(d=qb.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,nb,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(qb,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return X(c.elem,a,U.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],qb.tweeners[c]=qb.tweeners[c]||[],qb.tweeners[c].unshift(b)},prefilters:[ob],prefilter:function(a,b){b?qb.prefilters.unshift(a):qb.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,null!=d.queue&&d.queue!==!0||(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(W).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=qb(this,n.extend({},a),f);(e||n._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=n._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&kb.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=n._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(mb(b,!0),a,d,e)}}),n.each({slideDown:mb("show"),slideUp:mb("hide"),slideToggle:mb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=n.timers,c=0;for(hb=n.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||n.fx.stop(),hb=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){ib||(ib=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(ib),ib=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a,b=d.createElement("input"),c=d.createElement("div"),e=d.createElement("select"),f=e.appendChild(d.createElement("option"));c=d.createElement("div"),c.setAttribute("className","t"),c.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=c.getElementsByTagName("a")[0],b.setAttribute("type","checkbox"),c.appendChild(b),a=c.getElementsByTagName("a")[0],a.style.cssText="top:1px",l.getSetAttribute="t"!==c.className,l.style=/top/.test(a.getAttribute("style")),l.hrefNormalized="/a"===a.getAttribute("href"),l.checkOn=!!b.value,l.optSelected=f.selected,l.enctype=!!d.createElement("form").enctype,e.disabled=!0,l.optDisabled=!f.disabled,b=d.createElement("input"),b.setAttribute("value",""),l.input=""===b.getAttribute("value"),b.value="t",b.setAttribute("type","radio"),l.radioValue="t"===b.value}();var rb=/\r/g,sb=/[\x20\t\r\n\f]+/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(rb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a)).replace(sb," ")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute("disabled"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)if(d=e[g],n.inArray(n.valHooks.option.get(d),f)>-1)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var tb,ub,vb=n.expr.attrHandle,wb=/^(?:checked|selected)$/i,xb=l.getSetAttribute,yb=l.input;n.fn.extend({attr:function(a,b){return Y(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ub:tb)),void 0!==c?null===c?void n.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)?yb&&xb||!wb.test(c)?a[d]=!1:a[n.camelCase("default-"+c)]=a[d]=!1:n.attr(a,c,""),a.removeAttribute(xb?c:d)}}),ub={set:function(a,b,c){return b===!1?n.removeAttr(a,c):yb&&xb||!wb.test(c)?a.setAttribute(!xb&&n.propFix[c]||c,c):a[n.camelCase("default-"+c)]=a[c]=!0,c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=vb[b]||n.find.attr;yb&&xb||!wb.test(b)?vb[b]=function(a,b,d){var e,f;return d||(f=vb[b],vb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,vb[b]=f),e}:vb[b]=function(a,b,c){return c?void 0:a[n.camelCase("default-"+b)]?b.toLowerCase():null}}),yb&&xb||(n.attrHooks.value={set:function(a,b,c){return n.nodeName(a,"input")?void(a.defaultValue=b):tb&&tb.set(a,b,c)}}),xb||(tb={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},vb.id=vb.name=vb.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},n.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:tb.set},n.attrHooks.contenteditable={set:function(a,b,c){tb.set(a,""===b?!1:b,c)}},n.each(["width","height"],function(a,b){n.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),l.style||(n.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var zb=/^(?:input|select|textarea|button|object)$/i,Ab=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return Y(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return a=n.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):zb.test(a.nodeName)||Ab.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),l.hrefNormalized||n.each(["href","src"],function(a,b){n.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this}),l.enctype||(n.propFix.enctype="encoding");var Bb=/[\t\r\n\f]/g;function Cb(a){return n.attr(a,"class")||""}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,Cb(this)))});if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=Cb(c),d=1===c.nodeType&&(" "+e+" ").replace(Bb," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=n.trim(d),e!==h&&n.attr(c,"class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,Cb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=Cb(c),d=1===c.nodeType&&(" "+e+" ").replace(Bb," ")){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=n.trim(d),e!==h&&n.attr(c,"class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,Cb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=Cb(this),b&&n._data(this,"__className__",b),n.attr(this,"class",b||a===!1?"":n._data(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+Cb(c)+" ").replace(Bb," ").indexOf(b)>-1)return!0;return!1}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var Db=a.location,Eb=n.now(),Fb=/\?/,Gb=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;n.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=n.trim(b+"");return e&&!n.trim(e.replace(Gb,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():n.error("Invalid JSON: "+b)},n.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new a.DOMParser,c=d.parseFromString(b,"text/xml")):(c=new a.ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var Hb=/#.*$/,Ib=/([?&])_=[^&]*/,Jb=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Kb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Lb=/^(?:GET|HEAD)$/,Mb=/^\/\//,Nb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Ob={},Pb={},Qb="*/".concat("*"),Rb=Db.href,Sb=Nb.exec(Rb.toLowerCase())||[];function Tb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Ub(a,b,c,d){var e={},f=a===Pb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Vb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&n.extend(!0,a,c),a}function Wb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Xb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Rb,type:"GET",isLocal:Kb.test(Sb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Qb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Vb(Vb(a,n.ajaxSettings),b):Vb(n.ajaxSettings,a)},ajaxPrefilter:Tb(Ob),ajaxTransport:Tb(Pb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var d,e,f,g,h,i,j,k,l=n.ajaxSetup({},c),m=l.context||l,o=l.context&&(m.nodeType||m.jquery)?n(m):n.event,p=n.Deferred(),q=n.Callbacks("once memory"),r=l.statusCode||{},s={},t={},u=0,v="canceled",w={readyState:0,getResponseHeader:function(a){var b;if(2===u){if(!k){k={};while(b=Jb.exec(g))k[b[1].toLowerCase()]=b[2]}b=k[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===u?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return u||(a=t[c]=t[c]||a,s[a]=b),this},overrideMimeType:function(a){return u||(l.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>u)for(b in a)r[b]=[r[b],a[b]];else w.always(a[w.status]);return this},abort:function(a){var b=a||v;return j&&j.abort(b),y(0,b),this}};if(p.promise(w).complete=q.add,w.success=w.done,w.error=w.fail,l.url=((b||l.url||Rb)+"").replace(Hb,"").replace(Mb,Sb[1]+"//"),l.type=c.method||c.type||l.method||l.type,l.dataTypes=n.trim(l.dataType||"*").toLowerCase().match(G)||[""],null==l.crossDomain&&(d=Nb.exec(l.url.toLowerCase()),l.crossDomain=!(!d||d[1]===Sb[1]&&d[2]===Sb[2]&&(d[3]||("http:"===d[1]?"80":"443"))===(Sb[3]||("http:"===Sb[1]?"80":"443")))),l.data&&l.processData&&"string"!=typeof l.data&&(l.data=n.param(l.data,l.traditional)),Ub(Ob,l,c,w),2===u)return w;i=n.event&&l.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),l.type=l.type.toUpperCase(),l.hasContent=!Lb.test(l.type),f=l.url,l.hasContent||(l.data&&(f=l.url+=(Fb.test(f)?"&":"?")+l.data,delete l.data),l.cache===!1&&(l.url=Ib.test(f)?f.replace(Ib,"$1_="+Eb++):f+(Fb.test(f)?"&":"?")+"_="+Eb++)),l.ifModified&&(n.lastModified[f]&&w.setRequestHeader("If-Modified-Since",n.lastModified[f]),n.etag[f]&&w.setRequestHeader("If-None-Match",n.etag[f])),(l.data&&l.hasContent&&l.contentType!==!1||c.contentType)&&w.setRequestHeader("Content-Type",l.contentType),w.setRequestHeader("Accept",l.dataTypes[0]&&l.accepts[l.dataTypes[0]]?l.accepts[l.dataTypes[0]]+("*"!==l.dataTypes[0]?", "+Qb+"; q=0.01":""):l.accepts["*"]);for(e in l.headers)w.setRequestHeader(e,l.headers[e]);if(l.beforeSend&&(l.beforeSend.call(m,w,l)===!1||2===u))return w.abort();v="abort";for(e in{success:1,error:1,complete:1})w[e](l[e]);if(j=Ub(Pb,l,c,w)){if(w.readyState=1,i&&o.trigger("ajaxSend",[w,l]),2===u)return w;l.async&&l.timeout>0&&(h=a.setTimeout(function(){w.abort("timeout")},l.timeout));try{u=1,j.send(s,y)}catch(x){if(!(2>u))throw x;y(-1,x)}}else y(-1,"No Transport");function y(b,c,d,e){var k,s,t,v,x,y=c;2!==u&&(u=2,h&&a.clearTimeout(h),j=void 0,g=e||"",w.readyState=b>0?4:0,k=b>=200&&300>b||304===b,d&&(v=Wb(l,w,d)),v=Xb(l,v,w,k),k?(l.ifModified&&(x=w.getResponseHeader("Last-Modified"),x&&(n.lastModified[f]=x),x=w.getResponseHeader("etag"),x&&(n.etag[f]=x)),204===b||"HEAD"===l.type?y="nocontent":304===b?y="notmodified":(y=v.state,s=v.data,t=v.error,k=!t)):(t=y,!b&&y||(y="error",0>b&&(b=0))),w.status=b,w.statusText=(c||y)+"",k?p.resolveWith(m,[s,y,w]):p.rejectWith(m,[w,y,t]),w.statusCode(r),r=void 0,i&&o.trigger(k?"ajaxSuccess":"ajaxError",[w,l,k?s:t]),q.fireWith(m,[w,y]),i&&(o.trigger("ajaxComplete",[w,l]),--n.active||n.event.trigger("ajaxStop")))}return w},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){if(n.isFunction(a))return this.each(function(b){n(this).wrapAll(a.call(this,b))});if(this[0]){var b=n(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}});function Yb(a){return a.style&&a.style.display||n.css(a,"display")}function Zb(a){while(a&&1===a.nodeType){if("none"===Yb(a)||"hidden"===a.type)return!0;a=a.parentNode}return!1}n.expr.filters.hidden=function(a){return l.reliableHiddenOffsets()?a.offsetWidth<=0&&a.offsetHeight<=0&&!a.getClientRects().length:Zb(a)},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var $b=/%20/g,_b=/\[\]$/,ac=/\r?\n/g,bc=/^(?:submit|button|image|reset|file)$/i,cc=/^(?:input|select|textarea|keygen)/i;function dc(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||_b.test(a)?d(a,e):dc(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)dc(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)dc(c,a[c],b,e);return d.join("&").replace($b,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&cc.test(this.nodeName)&&!bc.test(a)&&(this.checked||!Z.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(ac,"\r\n")}}):{name:b.name,value:c.replace(ac,"\r\n")}}).get()}}),n.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return this.isLocal?ic():d.documentMode>8?hc():/^(get|post|head|put|delete|options)$/i.test(this.type)&&hc()||ic()}:hc;var ec=0,fc={},gc=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in fc)fc[a](void 0,!0)}),l.cors=!!gc&&"withCredentials"in gc,gc=l.ajax=!!gc,gc&&n.ajaxTransport(function(b){if(!b.crossDomain||l.cors){var c;return{send:function(d,e){var f,g=b.xhr(),h=++ec;if(g.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(f in b.xhrFields)g[f]=b.xhrFields[f];b.mimeType&&g.overrideMimeType&&g.overrideMimeType(b.mimeType),b.crossDomain||d["X-Requested-With"]||(d["X-Requested-With"]="XMLHttpRequest");for(f in d)void 0!==d[f]&&g.setRequestHeader(f,d[f]+"");g.send(b.hasContent&&b.data||null),c=function(a,d){var f,i,j;if(c&&(d||4===g.readyState))if(delete fc[h],c=void 0,g.onreadystatechange=n.noop,d)4!==g.readyState&&g.abort();else{j={},f=g.status,"string"==typeof g.responseText&&(j.text=g.responseText);try{i=g.statusText}catch(k){i=""}f||!b.isLocal||b.crossDomain?1223===f&&(f=204):f=j.text?200:404}j&&e(f,i,j,g.getAllResponseHeaders())},b.async?4===g.readyState?a.setTimeout(c):g.onreadystatechange=fc[h]=c:c()},abort:function(){c&&c(void 0,!0)}}}});function hc(){try{return new a.XMLHttpRequest}catch(b){}}function ic(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}n.ajaxPrefilter(function(a){a.crossDomain&&(a.contents.script=!1)}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=d.head||n("head")[0]||d.documentElement;return{send:function(e,f){b=d.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||f(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var jc=[],kc=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=jc.pop()||n.expando+"_"+Eb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(kc.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&kc.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(kc,"$1"+e):b.jsonp!==!1&&(b.url+=(Fb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,jc.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||d;var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ja([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var lc=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&lc)return lc.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=n.trim(a.slice(h,a.length)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(g,f||[a.responseText,b,a])})}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function mc(a){return n.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&n.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,n.contains(b,e)?("undefined"!=typeof e.getBoundingClientRect&&(d=e.getBoundingClientRect()),c=mc(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===n.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(c=a.offset()),c.top+=n.css(a[0],"borderTopWidth",!0),c.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-n.css(d,"marginTop",!0),left:b.left-c.left-n.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Qa})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);n.fn[a]=function(d){return Y(this,function(a,d,e){var f=mc(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?n(f).scrollLeft():e,c?e:n(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Ua(l.pixelPosition,function(a,c){
return c?(c=Sa(a,b),Oa.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return Y(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var nc=a.jQuery,oc=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=oc),b&&a.jQuery===n&&(a.jQuery=nc),n},b||(a.jQuery=a.$=n),n});

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.XRegExp = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
        /*!
 * XRegExp.build 3.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2012-2017 MIT License
 * Inspired by Lea Verou's RegExp.create <lea.verou.me>
 */

        module.exports = function(XRegExp) {
            'use strict';

            var REGEX_DATA = 'xregexp';
            var subParts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
            var parts = XRegExp.union([/\({{([\w$]+)}}\)|{{([\w$]+)}}/, subParts], 'g', {
                conjunction: 'or'
            });

            /**
             * Strips a leading `^` and trailing unescaped `$`, if both are present.
             *
             * @private
             * @param {String} pattern Pattern to process.
             * @returns {String} Pattern with edge anchors removed.
             */
            function deanchor(pattern) {
                // Allow any number of empty noncapturing groups before/after anchors, because regexes
                // built/generated by XRegExp sometimes include them
                var leadingAnchor = /^(?:\(\?:\))*\^/;
                var trailingAnchor = /\$(?:\(\?:\))*$/;

                if (
                    leadingAnchor.test(pattern) &&
                    trailingAnchor.test(pattern) &&
                    // Ensure that the trailing `$` isn't escaped
                    trailingAnchor.test(pattern.replace(/\\[\s\S]/g, ''))
                ) {
                    return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');
                }

                return pattern;
            }

            /**
             * Converts the provided value to an XRegExp. Native RegExp flags are not preserved.
             *
             * @private
             * @param {String|RegExp} value Value to convert.
             * @param {Boolean} [addFlagX] Whether to apply the `x` flag in cases when `value` is not
             *   already a regex generated by XRegExp
             * @returns {RegExp} XRegExp object with XRegExp syntax applied.
             */
            function asXRegExp(value, addFlagX) {
                var flags = addFlagX ? 'x' : '';
                return XRegExp.isRegExp(value) ?
                    (value[REGEX_DATA] && value[REGEX_DATA].captureNames ?
                            // Don't recompile, to preserve capture names
                            value :
                            // Recompile as XRegExp
                            XRegExp(value.source, flags)
                    ) :
                    // Compile string as XRegExp
                    XRegExp(value, flags);
            }

            /**
             * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in
             * the outer pattern and provided subpatterns are automatically renumbered to work correctly.
             * Native flags used by provided subpatterns are ignored in favor of the `flags` argument.
             *
             * @memberOf XRegExp
             * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows
             *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within
             *   character classes.
             * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A
             *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.
             * @param {String} [flags] Any combination of XRegExp flags.
             * @returns {RegExp} Regex with interpolated subpatterns.
             * @example
             *
             * var time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {
     *   hours: XRegExp.build('{{h12}} : | {{h24}}', {
     *     h12: /1[0-2]|0?[1-9]/,
     *     h24: /2[0-3]|[01][0-9]/
     *   }, 'x'),
     *   minutes: /^[0-5][0-9]$/
     * });
             * time.test('10:59'); // -> true
             * XRegExp.exec('10:59', time).minutes; // -> '59'
             */
            XRegExp.build = function(pattern, subs, flags) {
                flags = flags || '';
                // Used with `asXRegExp` calls for `pattern` and subpatterns in `subs`, to work around how
                // some browsers convert `RegExp('\n')` to a regex that contains the literal characters `\`
                // and `n`. See more details at <https://github.com/slevithan/xregexp/pull/163>.
                var addFlagX = flags.indexOf('x') > -1;
                var inlineFlags = /^\(\?([\w$]+)\)/.exec(pattern);
                // Add flags within a leading mode modifier to the overall pattern's flags
                if (inlineFlags) {
                    flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);
                }

                var data = {};
                for (var p in subs) {
                    if (subs.hasOwnProperty(p)) {
                        // Passing to XRegExp enables extended syntax and ensures independent validity,
                        // lest an unescaped `(`, `)`, `[`, or trailing `\` breaks the `(?:)` wrapper. For
                        // subpatterns provided as native regexes, it dies on octals and adds the property
                        // used to hold extended regex instance data, for simplicity.
                        var sub = asXRegExp(subs[p], addFlagX);
                        data[p] = {
                            // Deanchoring allows embedding independently useful anchored regexes. If you
                            // really need to keep your anchors, double them (i.e., `^^...$$`).
                            pattern: deanchor(sub.source),
                            names: sub[REGEX_DATA].captureNames || []
                        };
                    }
                }

                // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;
                // helps keep this simple. Named captures will be put back.
                var patternAsRegex = asXRegExp(pattern, addFlagX);

                // 'Caps' is short for 'captures'
                var numCaps = 0;
                var numPriorCaps;
                var numOuterCaps = 0;
                var outerCapsMap = [0];
                var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];
                var output = patternAsRegex.source.replace(parts, function($0, $1, $2, $3, $4) {
                    var subName = $1 || $2;
                    var capName;
                    var intro;
                    var localCapIndex;
                    // Named subpattern
                    if (subName) {
                        if (!data.hasOwnProperty(subName)) {
                            throw new ReferenceError('Undefined property ' + $0);
                        }
                        // Named subpattern was wrapped in a capturing group
                        if ($1) {
                            capName = outerCapNames[numOuterCaps];
                            outerCapsMap[++numOuterCaps] = ++numCaps;
                            // If it's a named group, preserve the name. Otherwise, use the subpattern name
                            // as the capture name
                            intro = '(?<' + (capName || subName) + '>';
                        } else {
                            intro = '(?:';
                        }
                        numPriorCaps = numCaps;
                        return intro + data[subName].pattern.replace(subParts, function(match, paren, backref) {
                            // Capturing group
                            if (paren) {
                                capName = data[subName].names[numCaps - numPriorCaps];
                                ++numCaps;
                                // If the current capture has a name, preserve the name
                                if (capName) {
                                    return '(?<' + capName + '>';
                                }
                                // Backreference
                            } else if (backref) {
                                localCapIndex = +backref - 1;
                                // Rewrite the backreference
                                return data[subName].names[localCapIndex] ?
                                    // Need to preserve the backreference name in case using flag `n`
                                    '\\k<' + data[subName].names[localCapIndex] + '>' :
                                    '\\' + (+backref + numPriorCaps);
                            }
                            return match;
                        }) + ')';
                    }
                    // Capturing group
                    if ($3) {
                        capName = outerCapNames[numOuterCaps];
                        outerCapsMap[++numOuterCaps] = ++numCaps;
                        // If the current capture has a name, preserve the name
                        if (capName) {
                            return '(?<' + capName + '>';
                        }
                        // Backreference
                    } else if ($4) {
                        localCapIndex = +$4 - 1;
                        // Rewrite the backreference
                        return outerCapNames[localCapIndex] ?
                            // Need to preserve the backreference name in case using flag `n`
                            '\\k<' + outerCapNames[localCapIndex] + '>' :
                            '\\' + outerCapsMap[+$4];
                    }
                    return $0;
                });

                return XRegExp(output, flags);
            };

        };

    },{}],2:[function(require,module,exports){
        /*!
 * XRegExp.matchRecursive 3.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2009-2017 MIT License
 */

        module.exports = function(XRegExp) {
            'use strict';

            /**
             * Returns a match detail object composed of the provided values.
             *
             * @private
             */
            function row(name, value, start, end) {
                return {
                    name: name,
                    value: value,
                    start: start,
                    end: end
                };
            }

            /**
             * Returns an array of match strings between outermost left and right delimiters, or an array of
             * objects with detailed match parts and position data. An error is thrown if delimiters are
             * unbalanced within the data.
             *
             * @memberOf XRegExp
             * @param {String} str String to search.
             * @param {String} left Left delimiter as an XRegExp pattern.
             * @param {String} right Right delimiter as an XRegExp pattern.
             * @param {String} [flags] Any native or XRegExp flags, used for the left and right delimiters.
             * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.
             * @returns {Array} Array of matches, or an empty array.
             * @example
             *
             * // Basic usage
             * var str = '(t((e))s)t()(ing)';
             * XRegExp.matchRecursive(str, '\\(', '\\)', 'g');
             * // -> ['t((e))s', '', 'ing']
             *
             * // Extended information mode with valueNames
             * str = 'Here is <div> <div>an</div></div> example';
             * XRegExp.matchRecursive(str, '<div\\s*>', '</div>', 'gi', {
     *   valueNames: ['between', 'left', 'match', 'right']
     * });
             * // -> [
             * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},
             * // {name: 'left',    value: '<div>',          start: 8,  end: 13},
             * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},
             * // {name: 'right',   value: '</div>',         start: 27, end: 33},
             * // {name: 'between', value: ' example',       start: 33, end: 41}
             * // ]
             *
             * // Omitting unneeded parts with null valueNames, and using escapeChar
             * str = '...{1}.\\{{function(x,y){return {y:x}}}';
     * XRegExp.matchRecursive(str, '{', '}', 'g', {
     *   valueNames: ['literal', null, 'value', null],
     *   escapeChar: '\\'
     * });
     * // -> [
     * // {name: 'literal', value: '...',  start: 0, end: 3},
     * // {name: 'value',   value: '1',    start: 4, end: 5},
     * // {name: 'literal', value: '.\\{', start: 6, end: 9},
     * // {name: 'value',   value: 'function(x,y){return {y:x}}', start: 10, end: 37}
     * // ]
     *
     * // Sticky mode via flag y
     * str = '<1><<<2>>><3>4<5>';
     * XRegExp.matchRecursive(str, '<', '>', 'gy');
     * // -> ['1', '<<2>>', '3']
     */
            XRegExp.matchRecursive = function(str, left, right, flags, options) {
                flags = flags || '';
                options = options || {};
                var global = flags.indexOf('g') > -1;
                var sticky = flags.indexOf('y') > -1;
                // Flag `y` is controlled internally
                var basicFlags = flags.replace(/y/g, '');
                var escapeChar = options.escapeChar;
                var vN = options.valueNames;
                var output = [];
                var openTokens = 0;
                var delimStart = 0;
                var delimEnd = 0;
                var lastOuterEnd = 0;
                var outerStart;
                var innerStart;
                var leftMatch;
                var rightMatch;
                var esc;
                left = XRegExp(left, basicFlags);
                right = XRegExp(right, basicFlags);

                if (escapeChar) {
                    if (escapeChar.length > 1) {
                        throw new Error('Cannot use more than one escape character');
                    }
                    escapeChar = XRegExp.escape(escapeChar);
                    // Example of concatenated `esc` regex:
                    // `escapeChar`: '%'
                    // `left`: '<'
                    // `right`: '>'
                    // Regex is: /(?:%[\S\s]|(?:(?!<|>)[^%])+)+/
                    esc = new RegExp(
                        '(?:' + escapeChar + '[\\S\\s]|(?:(?!' +
                        // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`.
                        // Intentionally not passing `basicFlags` to `XRegExp.union` since any syntax
                        // transformation resulting from those flags was already applied to `left` and
                        // `right` when they were passed through the XRegExp constructor above.
                        XRegExp.union([left, right], '', {conjunction: 'or'}).source +
                        ')[^' + escapeChar + '])+)+',
                        // Flags `gy` not needed here
                        flags.replace(/[^imu]+/g, '')
                    );
                }

                while (true) {
                    // If using an escape character, advance to the delimiter's next starting position,
                    // skipping any escaped characters in between
                    if (escapeChar) {
                        delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;
                    }
                    leftMatch = XRegExp.exec(str, left, delimEnd);
                    rightMatch = XRegExp.exec(str, right, delimEnd);
                    // Keep the leftmost match only
                    if (leftMatch && rightMatch) {
                        if (leftMatch.index <= rightMatch.index) {
                            rightMatch = null;
                        } else {
                            leftMatch = null;
                        }
                    }
                    // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):
                    // LM | RM | OT | Result
                    // 1  | 0  | 1  | loop
                    // 1  | 0  | 0  | loop
                    // 0  | 1  | 1  | loop
                    // 0  | 1  | 0  | throw
                    // 0  | 0  | 1  | throw
                    // 0  | 0  | 0  | break
                    // The paths above don't include the sticky mode special case. The loop ends after the
                    // first completed match if not `global`.
                    if (leftMatch || rightMatch) {
                        delimStart = (leftMatch || rightMatch).index;
                        delimEnd = delimStart + (leftMatch || rightMatch)[0].length;
                    } else if (!openTokens) {
                        break;
                    }
                    if (sticky && !openTokens && delimStart > lastOuterEnd) {
                        break;
                    }
                    if (leftMatch) {
                        if (!openTokens) {
                            outerStart = delimStart;
                            innerStart = delimEnd;
                        }
                        ++openTokens;
                    } else if (rightMatch && openTokens) {
                        if (!--openTokens) {
                            if (vN) {
                                if (vN[0] && outerStart > lastOuterEnd) {
                                    output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));
                                }
                                if (vN[1]) {
                                    output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));
                                }
                                if (vN[2]) {
                                    output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));
                                }
                                if (vN[3]) {
                                    output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));
                                }
                            } else {
                                output.push(str.slice(innerStart, delimStart));
                            }
                            lastOuterEnd = delimEnd;
                            if (!global) {
                                break;
                            }
                        }
                    } else {
                        throw new Error('Unbalanced delimiter found in string');
                    }
                    // If the delimiter matched an empty string, avoid an infinite loop
                    if (delimStart === delimEnd) {
                        ++delimEnd;
                    }
                }

                if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {
                    output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));
                }

                return output;
            };

        };

    },{}],3:[function(require,module,exports){
        /*!
 * XRegExp Unicode Base 3.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2008-2017 MIT License
 */

        module.exports = function(XRegExp) {
            'use strict';

            /**
             * Adds base support for Unicode matching:
             * - Adds syntax `\p{..}` for matching Unicode tokens. Tokens can be inverted using `\P{..}` or
             *   `\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the
             *   braces for token names that are a single letter (e.g. `\pL` or `PL`).
             * - Adds flag A (astral), which enables 21-bit Unicode support.
             * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.
             *
             * Unicode Base relies on externally provided Unicode character data. Official addons are
             * available to provide data for Unicode categories, scripts, blocks, and properties.
             *
             * @requires XRegExp
             */

                // ==--------------------------==
                // Private stuff
                // ==--------------------------==

                // Storage for Unicode data
            var unicode = {};

            // Reuse utils
            var dec = XRegExp._dec;
            var hex = XRegExp._hex;
            var pad4 = XRegExp._pad4;

            // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed
            function normalize(name) {
                return name.replace(/[- _]+/g, '').toLowerCase();
            }

            // Gets the decimal code of a literal code unit, \xHH, \uHHHH, or a backslash-escaped literal
            function charCode(chr) {
                var esc = /^\\[xu](.+)/.exec(chr);
                return esc ?
                    dec(esc[1]) :
                    chr.charCodeAt(chr.charAt(0) === '\\' ? 1 : 0);
            }

            // Inverts a list of ordered BMP characters and ranges
            function invertBmp(range) {
                var output = '';
                var lastEnd = -1;

                XRegExp.forEach(
                    range,
                    /(\\x..|\\u....|\\?[\s\S])(?:-(\\x..|\\u....|\\?[\s\S]))?/,
                    function(m) {
                        var start = charCode(m[1]);
                        if (start > (lastEnd + 1)) {
                            output += '\\u' + pad4(hex(lastEnd + 1));
                            if (start > (lastEnd + 2)) {
                                output += '-\\u' + pad4(hex(start - 1));
                            }
                        }
                        lastEnd = charCode(m[2] || m[1]);
                    }
                );

                if (lastEnd < 0xFFFF) {
                    output += '\\u' + pad4(hex(lastEnd + 1));
                    if (lastEnd < 0xFFFE) {
                        output += '-\\uFFFF';
                    }
                }

                return output;
            }

            // Generates an inverted BMP range on first use
            function cacheInvertedBmp(slug) {
                var prop = 'b!';
                return (
                    unicode[slug][prop] ||
                    (unicode[slug][prop] = invertBmp(unicode[slug].bmp))
                );
            }

            // Combines and optionally negates BMP and astral data
            function buildAstral(slug, isNegated) {
                var item = unicode[slug];
                var combined = '';

                if (item.bmp && !item.isBmpLast) {
                    combined = '[' + item.bmp + ']' + (item.astral ? '|' : '');
                }
                if (item.astral) {
                    combined += item.astral;
                }
                if (item.isBmpLast && item.bmp) {
                    combined += (item.astral ? '|' : '') + '[' + item.bmp + ']';
                }

                // Astral Unicode tokens always match a code point, never a code unit
                return isNegated ?
                    '(?:(?!' + combined + ')(?:[\uD800-\uDBFF][\uDC00-\uDFFF]|[\0-\uFFFF]))' :
                    '(?:' + combined + ')';
            }

            // Builds a complete astral pattern on first use
            function cacheAstral(slug, isNegated) {
                var prop = isNegated ? 'a!' : 'a=';
                return (
                    unicode[slug][prop] ||
                    (unicode[slug][prop] = buildAstral(slug, isNegated))
                );
            }

            // ==--------------------------==
            // Core functionality
            // ==--------------------------==

            /*
     * Add astral mode (flag A) and Unicode token syntax: `\p{..}`, `\P{..}`, `\p{^..}`, `\pC`.
     */
            XRegExp.addToken(
                // Use `*` instead of `+` to avoid capturing `^` as the token name in `\p{^}`
                /\\([pP])(?:{(\^?)([^}]*)}|([A-Za-z]))/,
                function(match, scope, flags) {
                    var ERR_DOUBLE_NEG = 'Invalid double negation ';
                    var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';
                    var ERR_UNKNOWN_REF = 'Unicode token missing data ';
                    var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';
                    var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes';
                    // Negated via \P{..} or \p{^..}
                    var isNegated = match[1] === 'P' || !!match[2];
                    // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A
                    var isAstralMode = flags.indexOf('A') > -1;
                    // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\p{}`
                    var slug = normalize(match[4] || match[3]);
                    // Token data object
                    var item = unicode[slug];

                    if (match[1] === 'P' && match[2]) {
                        throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);
                    }
                    if (!unicode.hasOwnProperty(slug)) {
                        throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);
                    }

                    // Switch to the negated form of the referenced Unicode token
                    if (item.inverseOf) {
                        slug = normalize(item.inverseOf);
                        if (!unicode.hasOwnProperty(slug)) {
                            throw new ReferenceError(ERR_UNKNOWN_REF + match[0] + ' -> ' + item.inverseOf);
                        }
                        item = unicode[slug];
                        isNegated = !isNegated;
                    }

                    if (!(item.bmp || isAstralMode)) {
                        throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);
                    }
                    if (isAstralMode) {
                        if (scope === 'class') {
                            throw new SyntaxError(ERR_ASTRAL_IN_CLASS);
                        }

                        return cacheAstral(slug, isNegated);
                    }

                    return scope === 'class' ?
                        (isNegated ? cacheInvertedBmp(slug) : item.bmp) :
                        (isNegated ? '[^' : '[') + item.bmp + ']';
                },
                {
                    scope: 'all',
                    optionalFlags: 'A',
                    leadChar: '\\'
                }
            );

            /**
             * Adds to the list of Unicode tokens that XRegExp regexes can match via `\p` or `\P`.
             *
             * @memberOf XRegExp
             * @param {Array} data Objects with named character ranges. Each object may have properties
             *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are
             *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If
             *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,
             *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are
             *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and
             *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan
             *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and
             *   `astral` data should be a combination of literal characters and `\xHH` or `\uHHHH` escape
             *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be
             *   escaped, apart from range-creating hyphens. The `astral` data can additionally use
             *   character classes and alternation, and should use surrogate pairs to represent astral code
             *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is
             *   defined as the exact inverse of another token.
             * @example
             *
             * // Basic use
             * XRegExp.addUnicodeData([{
     *   name: 'XDigit',
     *   alias: 'Hexadecimal',
     *   bmp: '0-9A-Fa-f'
     * }]);
             * XRegExp('\\p{XDigit}:\\p{Hexadecimal}+').test('0:3D'); // -> true
             */
            XRegExp.addUnicodeData = function(data) {
                var ERR_NO_NAME = 'Unicode token requires name';
                var ERR_NO_DATA = 'Unicode token has no character data ';
                var item;

                for (var i = 0; i < data.length; ++i) {
                    item = data[i];
                    if (!item.name) {
                        throw new Error(ERR_NO_NAME);
                    }
                    if (!(item.inverseOf || item.bmp || item.astral)) {
                        throw new Error(ERR_NO_DATA + item.name);
                    }
                    unicode[normalize(item.name)] = item;
                    if (item.alias) {
                        unicode[normalize(item.alias)] = item;
                    }
                }

                // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and
                // flags might now produce different results
                XRegExp.cache.flush('patterns');
            };

            /**
             * @ignore
             *
             * Return a reference to the internal Unicode definition structure for the given Unicode
             * Property if the given name is a legal Unicode Property for use in XRegExp `\p` or `\P` regex
             * constructs.
             *
             * @memberOf XRegExp
             * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),
             *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode
             *   Properties and Property Aliases.
             * @returns {Object} Reference to definition structure when the name matches a Unicode Property.
             *
             * @note
             * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.
             *
             * @note
             * This method is *not* part of the officially documented API and may change or be removed in
             * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode
             * structures set up by XRegExp.
             */
            XRegExp._getUnicodeProperty = function(name) {
                var slug = normalize(name);
                return unicode[slug];
            };

        };

    },{}],4:[function(require,module,exports){
        /*!
 * XRegExp Unicode Blocks 3.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2010-2017 MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */

        module.exports = function(XRegExp) {
            'use strict';

            /**
             * Adds support for all Unicode blocks. Block names use the prefix 'In'. E.g.,
             * `\p{InBasicLatin}`. Token names are case insensitive, and any spaces, hyphens, and
             * underscores are ignored.
             *
             * Uses Unicode 9.0.0.
             *
             * @requires XRegExp, Unicode Base
             */

            if (!XRegExp.addUnicodeData) {
                throw new ReferenceError('Unicode Base must be loaded before Unicode Blocks');
            }

            XRegExp.addUnicodeData([
                {
                    name: 'InAdlam',
                    astral: '\uD83A[\uDD00-\uDD5F]'
                },
                {
                    name: 'InAegean_Numbers',
                    astral: '\uD800[\uDD00-\uDD3F]'
                },
                {
                    name: 'InAhom',
                    astral: '\uD805[\uDF00-\uDF3F]'
                },
                {
                    name: 'InAlchemical_Symbols',
                    astral: '\uD83D[\uDF00-\uDF7F]'
                },
                {
                    name: 'InAlphabetic_Presentation_Forms',
                    bmp: '\uFB00-\uFB4F'
                },
                {
                    name: 'InAnatolian_Hieroglyphs',
                    astral: '\uD811[\uDC00-\uDE7F]'
                },
                {
                    name: 'InAncient_Greek_Musical_Notation',
                    astral: '\uD834[\uDE00-\uDE4F]'
                },
                {
                    name: 'InAncient_Greek_Numbers',
                    astral: '\uD800[\uDD40-\uDD8F]'
                },
                {
                    name: 'InAncient_Symbols',
                    astral: '\uD800[\uDD90-\uDDCF]'
                },
                {
                    name: 'InArabic',
                    bmp: '\u0600-\u06FF'
                },
                {
                    name: 'InArabic_Extended_A',
                    bmp: '\u08A0-\u08FF'
                },
                {
                    name: 'InArabic_Mathematical_Alphabetic_Symbols',
                    astral: '\uD83B[\uDE00-\uDEFF]'
                },
                {
                    name: 'InArabic_Presentation_Forms_A',
                    bmp: '\uFB50-\uFDFF'
                },
                {
                    name: 'InArabic_Presentation_Forms_B',
                    bmp: '\uFE70-\uFEFF'
                },
                {
                    name: 'InArabic_Supplement',
                    bmp: '\u0750-\u077F'
                },
                {
                    name: 'InArmenian',
                    bmp: '\u0530-\u058F'
                },
                {
                    name: 'InArrows',
                    bmp: '\u2190-\u21FF'
                },
                {
                    name: 'InAvestan',
                    astral: '\uD802[\uDF00-\uDF3F]'
                },
                {
                    name: 'InBalinese',
                    bmp: '\u1B00-\u1B7F'
                },
                {
                    name: 'InBamum',
                    bmp: '\uA6A0-\uA6FF'
                },
                {
                    name: 'InBamum_Supplement',
                    astral: '\uD81A[\uDC00-\uDE3F]'
                },
                {
                    name: 'InBasic_Latin',
                    bmp: '\0-\x7F'
                },
                {
                    name: 'InBassa_Vah',
                    astral: '\uD81A[\uDED0-\uDEFF]'
                },
                {
                    name: 'InBatak',
                    bmp: '\u1BC0-\u1BFF'
                },
                {
                    name: 'InBengali',
                    bmp: '\u0980-\u09FF'
                },
                {
                    name: 'InBhaiksuki',
                    astral: '\uD807[\uDC00-\uDC6F]'
                },
                {
                    name: 'InBlock_Elements',
                    bmp: '\u2580-\u259F'
                },
                {
                    name: 'InBopomofo',
                    bmp: '\u3100-\u312F'
                },
                {
                    name: 'InBopomofo_Extended',
                    bmp: '\u31A0-\u31BF'
                },
                {
                    name: 'InBox_Drawing',
                    bmp: '\u2500-\u257F'
                },
                {
                    name: 'InBrahmi',
                    astral: '\uD804[\uDC00-\uDC7F]'
                },
                {
                    name: 'InBraille_Patterns',
                    bmp: '\u2800-\u28FF'
                },
                {
                    name: 'InBuginese',
                    bmp: '\u1A00-\u1A1F'
                },
                {
                    name: 'InBuhid',
                    bmp: '\u1740-\u175F'
                },
                {
                    name: 'InByzantine_Musical_Symbols',
                    astral: '\uD834[\uDC00-\uDCFF]'
                },
                {
                    name: 'InCJK_Compatibility',
                    bmp: '\u3300-\u33FF'
                },
                {
                    name: 'InCJK_Compatibility_Forms',
                    bmp: '\uFE30-\uFE4F'
                },
                {
                    name: 'InCJK_Compatibility_Ideographs',
                    bmp: '\uF900-\uFAFF'
                },
                {
                    name: 'InCJK_Compatibility_Ideographs_Supplement',
                    astral: '\uD87E[\uDC00-\uDE1F]'
                },
                {
                    name: 'InCJK_Radicals_Supplement',
                    bmp: '\u2E80-\u2EFF'
                },
                {
                    name: 'InCJK_Strokes',
                    bmp: '\u31C0-\u31EF'
                },
                {
                    name: 'InCJK_Symbols_and_Punctuation',
                    bmp: '\u3000-\u303F'
                },
                {
                    name: 'InCJK_Unified_Ideographs',
                    bmp: '\u4E00-\u9FFF'
                },
                {
                    name: 'InCJK_Unified_Ideographs_Extension_A',
                    bmp: '\u3400-\u4DBF'
                },
                {
                    name: 'InCJK_Unified_Ideographs_Extension_B',
                    astral: '[\uD840-\uD868][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDF]'
                },
                {
                    name: 'InCJK_Unified_Ideographs_Extension_C',
                    astral: '\uD869[\uDF00-\uDFFF]|[\uD86A-\uD86C][\uDC00-\uDFFF]|\uD86D[\uDC00-\uDF3F]'
                },
                {
                    name: 'InCJK_Unified_Ideographs_Extension_D',
                    astral: '\uD86D[\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1F]'
                },
                {
                    name: 'InCJK_Unified_Ideographs_Extension_E',
                    astral: '\uD86E[\uDC20-\uDFFF]|[\uD86F-\uD872][\uDC00-\uDFFF]|\uD873[\uDC00-\uDEAF]'
                },
                {
                    name: 'InCarian',
                    astral: '\uD800[\uDEA0-\uDEDF]'
                },
                {
                    name: 'InCaucasian_Albanian',
                    astral: '\uD801[\uDD30-\uDD6F]'
                },
                {
                    name: 'InChakma',
                    astral: '\uD804[\uDD00-\uDD4F]'
                },
                {
                    name: 'InCham',
                    bmp: '\uAA00-\uAA5F'
                },
                {
                    name: 'InCherokee',
                    bmp: '\u13A0-\u13FF'
                },
                {
                    name: 'InCherokee_Supplement',
                    bmp: '\uAB70-\uABBF'
                },
                {
                    name: 'InCombining_Diacritical_Marks',
                    bmp: '\u0300-\u036F'
                },
                {
                    name: 'InCombining_Diacritical_Marks_Extended',
                    bmp: '\u1AB0-\u1AFF'
                },
                {
                    name: 'InCombining_Diacritical_Marks_Supplement',
                    bmp: '\u1DC0-\u1DFF'
                },
                {
                    name: 'InCombining_Diacritical_Marks_for_Symbols',
                    bmp: '\u20D0-\u20FF'
                },
                {
                    name: 'InCombining_Half_Marks',
                    bmp: '\uFE20-\uFE2F'
                },
                {
                    name: 'InCommon_Indic_Number_Forms',
                    bmp: '\uA830-\uA83F'
                },
                {
                    name: 'InControl_Pictures',
                    bmp: '\u2400-\u243F'
                },
                {
                    name: 'InCoptic',
                    bmp: '\u2C80-\u2CFF'
                },
                {
                    name: 'InCoptic_Epact_Numbers',
                    astral: '\uD800[\uDEE0-\uDEFF]'
                },
                {
                    name: 'InCounting_Rod_Numerals',
                    astral: '\uD834[\uDF60-\uDF7F]'
                },
                {
                    name: 'InCuneiform',
                    astral: '\uD808[\uDC00-\uDFFF]'
                },
                {
                    name: 'InCuneiform_Numbers_and_Punctuation',
                    astral: '\uD809[\uDC00-\uDC7F]'
                },
                {
                    name: 'InCurrency_Symbols',
                    bmp: '\u20A0-\u20CF'
                },
                {
                    name: 'InCypriot_Syllabary',
                    astral: '\uD802[\uDC00-\uDC3F]'
                },
                {
                    name: 'InCyrillic',
                    bmp: '\u0400-\u04FF'
                },
                {
                    name: 'InCyrillic_Extended_A',
                    bmp: '\u2DE0-\u2DFF'
                },
                {
                    name: 'InCyrillic_Extended_B',
                    bmp: '\uA640-\uA69F'
                },
                {
                    name: 'InCyrillic_Extended_C',
                    bmp: '\u1C80-\u1C8F'
                },
                {
                    name: 'InCyrillic_Supplement',
                    bmp: '\u0500-\u052F'
                },
                {
                    name: 'InDeseret',
                    astral: '\uD801[\uDC00-\uDC4F]'
                },
                {
                    name: 'InDevanagari',
                    bmp: '\u0900-\u097F'
                },
                {
                    name: 'InDevanagari_Extended',
                    bmp: '\uA8E0-\uA8FF'
                },
                {
                    name: 'InDingbats',
                    bmp: '\u2700-\u27BF'
                },
                {
                    name: 'InDomino_Tiles',
                    astral: '\uD83C[\uDC30-\uDC9F]'
                },
                {
                    name: 'InDuployan',
                    astral: '\uD82F[\uDC00-\uDC9F]'
                },
                {
                    name: 'InEarly_Dynastic_Cuneiform',
                    astral: '\uD809[\uDC80-\uDD4F]'
                },
                {
                    name: 'InEgyptian_Hieroglyphs',
                    astral: '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F]'
                },
                {
                    name: 'InElbasan',
                    astral: '\uD801[\uDD00-\uDD2F]'
                },
                {
                    name: 'InEmoticons',
                    astral: '\uD83D[\uDE00-\uDE4F]'
                },
                {
                    name: 'InEnclosed_Alphanumeric_Supplement',
                    astral: '\uD83C[\uDD00-\uDDFF]'
                },
                {
                    name: 'InEnclosed_Alphanumerics',
                    bmp: '\u2460-\u24FF'
                },
                {
                    name: 'InEnclosed_CJK_Letters_and_Months',
                    bmp: '\u3200-\u32FF'
                },
                {
                    name: 'InEnclosed_Ideographic_Supplement',
                    astral: '\uD83C[\uDE00-\uDEFF]'
                },
                {
                    name: 'InEthiopic',
                    bmp: '\u1200-\u137F'
                },
                {
                    name: 'InEthiopic_Extended',
                    bmp: '\u2D80-\u2DDF'
                },
                {
                    name: 'InEthiopic_Extended_A',
                    bmp: '\uAB00-\uAB2F'
                },
                {
                    name: 'InEthiopic_Supplement',
                    bmp: '\u1380-\u139F'
                },
                {
                    name: 'InGeneral_Punctuation',
                    bmp: '\u2000-\u206F'
                },
                {
                    name: 'InGeometric_Shapes',
                    bmp: '\u25A0-\u25FF'
                },
                {
                    name: 'InGeometric_Shapes_Extended',
                    astral: '\uD83D[\uDF80-\uDFFF]'
                },
                {
                    name: 'InGeorgian',
                    bmp: '\u10A0-\u10FF'
                },
                {
                    name: 'InGeorgian_Supplement',
                    bmp: '\u2D00-\u2D2F'
                },
                {
                    name: 'InGlagolitic',
                    bmp: '\u2C00-\u2C5F'
                },
                {
                    name: 'InGlagolitic_Supplement',
                    astral: '\uD838[\uDC00-\uDC2F]'
                },
                {
                    name: 'InGothic',
                    astral: '\uD800[\uDF30-\uDF4F]'
                },
                {
                    name: 'InGrantha',
                    astral: '\uD804[\uDF00-\uDF7F]'
                },
                {
                    name: 'InGreek_Extended',
                    bmp: '\u1F00-\u1FFF'
                },
                {
                    name: 'InGreek_and_Coptic',
                    bmp: '\u0370-\u03FF'
                },
                {
                    name: 'InGujarati',
                    bmp: '\u0A80-\u0AFF'
                },
                {
                    name: 'InGurmukhi',
                    bmp: '\u0A00-\u0A7F'
                },
                {
                    name: 'InHalfwidth_and_Fullwidth_Forms',
                    bmp: '\uFF00-\uFFEF'
                },
                {
                    name: 'InHangul_Compatibility_Jamo',
                    bmp: '\u3130-\u318F'
                },
                {
                    name: 'InHangul_Jamo',
                    bmp: '\u1100-\u11FF'
                },
                {
                    name: 'InHangul_Jamo_Extended_A',
                    bmp: '\uA960-\uA97F'
                },
                {
                    name: 'InHangul_Jamo_Extended_B',
                    bmp: '\uD7B0-\uD7FF'
                },
                {
                    name: 'InHangul_Syllables',
                    bmp: '\uAC00-\uD7AF'
                },
                {
                    name: 'InHanunoo',
                    bmp: '\u1720-\u173F'
                },
                {
                    name: 'InHatran',
                    astral: '\uD802[\uDCE0-\uDCFF]'
                },
                {
                    name: 'InHebrew',
                    bmp: '\u0590-\u05FF'
                },
                {
                    name: 'InHigh_Private_Use_Surrogates',
                    bmp: '\uDB80-\uDBFF'
                },
                {
                    name: 'InHigh_Surrogates',
                    bmp: '\uD800-\uDB7F'
                },
                {
                    name: 'InHiragana',
                    bmp: '\u3040-\u309F'
                },
                {
                    name: 'InIPA_Extensions',
                    bmp: '\u0250-\u02AF'
                },
                {
                    name: 'InIdeographic_Description_Characters',
                    bmp: '\u2FF0-\u2FFF'
                },
                {
                    name: 'InIdeographic_Symbols_and_Punctuation',
                    astral: '\uD81B[\uDFE0-\uDFFF]'
                },
                {
                    name: 'InImperial_Aramaic',
                    astral: '\uD802[\uDC40-\uDC5F]'
                },
                {
                    name: 'InInscriptional_Pahlavi',
                    astral: '\uD802[\uDF60-\uDF7F]'
                },
                {
                    name: 'InInscriptional_Parthian',
                    astral: '\uD802[\uDF40-\uDF5F]'
                },
                {
                    name: 'InJavanese',
                    bmp: '\uA980-\uA9DF'
                },
                {
                    name: 'InKaithi',
                    astral: '\uD804[\uDC80-\uDCCF]'
                },
                {
                    name: 'InKana_Supplement',
                    astral: '\uD82C[\uDC00-\uDCFF]'
                },
                {
                    name: 'InKanbun',
                    bmp: '\u3190-\u319F'
                },
                {
                    name: 'InKangxi_Radicals',
                    bmp: '\u2F00-\u2FDF'
                },
                {
                    name: 'InKannada',
                    bmp: '\u0C80-\u0CFF'
                },
                {
                    name: 'InKatakana',
                    bmp: '\u30A0-\u30FF'
                },
                {
                    name: 'InKatakana_Phonetic_Extensions',
                    bmp: '\u31F0-\u31FF'
                },
                {
                    name: 'InKayah_Li',
                    bmp: '\uA900-\uA92F'
                },
                {
                    name: 'InKharoshthi',
                    astral: '\uD802[\uDE00-\uDE5F]'
                },
                {
                    name: 'InKhmer',
                    bmp: '\u1780-\u17FF'
                },
                {
                    name: 'InKhmer_Symbols',
                    bmp: '\u19E0-\u19FF'
                },
                {
                    name: 'InKhojki',
                    astral: '\uD804[\uDE00-\uDE4F]'
                },
                {
                    name: 'InKhudawadi',
                    astral: '\uD804[\uDEB0-\uDEFF]'
                },
                {
                    name: 'InLao',
                    bmp: '\u0E80-\u0EFF'
                },
                {
                    name: 'InLatin_Extended_Additional',
                    bmp: '\u1E00-\u1EFF'
                },
                {
                    name: 'InLatin_Extended_A',
                    bmp: '\u0100-\u017F'
                },
                {
                    name: 'InLatin_Extended_B',
                    bmp: '\u0180-\u024F'
                },
                {
                    name: 'InLatin_Extended_C',
                    bmp: '\u2C60-\u2C7F'
                },
                {
                    name: 'InLatin_Extended_D',
                    bmp: '\uA720-\uA7FF'
                },
                {
                    name: 'InLatin_Extended_E',
                    bmp: '\uAB30-\uAB6F'
                },
                {
                    name: 'InLatin_1_Supplement',
                    bmp: '\x80-\xFF'
                },
                {
                    name: 'InLepcha',
                    bmp: '\u1C00-\u1C4F'
                },
                {
                    name: 'InLetterlike_Symbols',
                    bmp: '\u2100-\u214F'
                },
                {
                    name: 'InLimbu',
                    bmp: '\u1900-\u194F'
                },
                {
                    name: 'InLinear_A',
                    astral: '\uD801[\uDE00-\uDF7F]'
                },
                {
                    name: 'InLinear_B_Ideograms',
                    astral: '\uD800[\uDC80-\uDCFF]'
                },
                {
                    name: 'InLinear_B_Syllabary',
                    astral: '\uD800[\uDC00-\uDC7F]'
                },
                {
                    name: 'InLisu',
                    bmp: '\uA4D0-\uA4FF'
                },
                {
                    name: 'InLow_Surrogates',
                    bmp: '\uDC00-\uDFFF'
                },
                {
                    name: 'InLycian',
                    astral: '\uD800[\uDE80-\uDE9F]'
                },
                {
                    name: 'InLydian',
                    astral: '\uD802[\uDD20-\uDD3F]'
                },
                {
                    name: 'InMahajani',
                    astral: '\uD804[\uDD50-\uDD7F]'
                },
                {
                    name: 'InMahjong_Tiles',
                    astral: '\uD83C[\uDC00-\uDC2F]'
                },
                {
                    name: 'InMalayalam',
                    bmp: '\u0D00-\u0D7F'
                },
                {
                    name: 'InMandaic',
                    bmp: '\u0840-\u085F'
                },
                {
                    name: 'InManichaean',
                    astral: '\uD802[\uDEC0-\uDEFF]'
                },
                {
                    name: 'InMarchen',
                    astral: '\uD807[\uDC70-\uDCBF]'
                },
                {
                    name: 'InMathematical_Alphanumeric_Symbols',
                    astral: '\uD835[\uDC00-\uDFFF]'
                },
                {
                    name: 'InMathematical_Operators',
                    bmp: '\u2200-\u22FF'
                },
                {
                    name: 'InMeetei_Mayek',
                    bmp: '\uABC0-\uABFF'
                },
                {
                    name: 'InMeetei_Mayek_Extensions',
                    bmp: '\uAAE0-\uAAFF'
                },
                {
                    name: 'InMende_Kikakui',
                    astral: '\uD83A[\uDC00-\uDCDF]'
                },
                {
                    name: 'InMeroitic_Cursive',
                    astral: '\uD802[\uDDA0-\uDDFF]'
                },
                {
                    name: 'InMeroitic_Hieroglyphs',
                    astral: '\uD802[\uDD80-\uDD9F]'
                },
                {
                    name: 'InMiao',
                    astral: '\uD81B[\uDF00-\uDF9F]'
                },
                {
                    name: 'InMiscellaneous_Mathematical_Symbols_A',
                    bmp: '\u27C0-\u27EF'
                },
                {
                    name: 'InMiscellaneous_Mathematical_Symbols_B',
                    bmp: '\u2980-\u29FF'
                },
                {
                    name: 'InMiscellaneous_Symbols',
                    bmp: '\u2600-\u26FF'
                },
                {
                    name: 'InMiscellaneous_Symbols_and_Arrows',
                    bmp: '\u2B00-\u2BFF'
                },
                {
                    name: 'InMiscellaneous_Symbols_and_Pictographs',
                    astral: '\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDDFF]'
                },
                {
                    name: 'InMiscellaneous_Technical',
                    bmp: '\u2300-\u23FF'
                },
                {
                    name: 'InModi',
                    astral: '\uD805[\uDE00-\uDE5F]'
                },
                {
                    name: 'InModifier_Tone_Letters',
                    bmp: '\uA700-\uA71F'
                },
                {
                    name: 'InMongolian',
                    bmp: '\u1800-\u18AF'
                },
                {
                    name: 'InMongolian_Supplement',
                    astral: '\uD805[\uDE60-\uDE7F]'
                },
                {
                    name: 'InMro',
                    astral: '\uD81A[\uDE40-\uDE6F]'
                },
                {
                    name: 'InMultani',
                    astral: '\uD804[\uDE80-\uDEAF]'
                },
                {
                    name: 'InMusical_Symbols',
                    astral: '\uD834[\uDD00-\uDDFF]'
                },
                {
                    name: 'InMyanmar',
                    bmp: '\u1000-\u109F'
                },
                {
                    name: 'InMyanmar_Extended_A',
                    bmp: '\uAA60-\uAA7F'
                },
                {
                    name: 'InMyanmar_Extended_B',
                    bmp: '\uA9E0-\uA9FF'
                },
                {
                    name: 'InNKo',
                    bmp: '\u07C0-\u07FF'
                },
                {
                    name: 'InNabataean',
                    astral: '\uD802[\uDC80-\uDCAF]'
                },
                {
                    name: 'InNew_Tai_Lue',
                    bmp: '\u1980-\u19DF'
                },
                {
                    name: 'InNewa',
                    astral: '\uD805[\uDC00-\uDC7F]'
                },
                {
                    name: 'InNumber_Forms',
                    bmp: '\u2150-\u218F'
                },
                {
                    name: 'InOgham',
                    bmp: '\u1680-\u169F'
                },
                {
                    name: 'InOl_Chiki',
                    bmp: '\u1C50-\u1C7F'
                },
                {
                    name: 'InOld_Hungarian',
                    astral: '\uD803[\uDC80-\uDCFF]'
                },
                {
                    name: 'InOld_Italic',
                    astral: '\uD800[\uDF00-\uDF2F]'
                },
                {
                    name: 'InOld_North_Arabian',
                    astral: '\uD802[\uDE80-\uDE9F]'
                },
                {
                    name: 'InOld_Permic',
                    astral: '\uD800[\uDF50-\uDF7F]'
                },
                {
                    name: 'InOld_Persian',
                    astral: '\uD800[\uDFA0-\uDFDF]'
                },
                {
                    name: 'InOld_South_Arabian',
                    astral: '\uD802[\uDE60-\uDE7F]'
                },
                {
                    name: 'InOld_Turkic',
                    astral: '\uD803[\uDC00-\uDC4F]'
                },
                {
                    name: 'InOptical_Character_Recognition',
                    bmp: '\u2440-\u245F'
                },
                {
                    name: 'InOriya',
                    bmp: '\u0B00-\u0B7F'
                },
                {
                    name: 'InOrnamental_Dingbats',
                    astral: '\uD83D[\uDE50-\uDE7F]'
                },
                {
                    name: 'InOsage',
                    astral: '\uD801[\uDCB0-\uDCFF]'
                },
                {
                    name: 'InOsmanya',
                    astral: '\uD801[\uDC80-\uDCAF]'
                },
                {
                    name: 'InPahawh_Hmong',
                    astral: '\uD81A[\uDF00-\uDF8F]'
                },
                {
                    name: 'InPalmyrene',
                    astral: '\uD802[\uDC60-\uDC7F]'
                },
                {
                    name: 'InPau_Cin_Hau',
                    astral: '\uD806[\uDEC0-\uDEFF]'
                },
                {
                    name: 'InPhags_pa',
                    bmp: '\uA840-\uA87F'
                },
                {
                    name: 'InPhaistos_Disc',
                    astral: '\uD800[\uDDD0-\uDDFF]'
                },
                {
                    name: 'InPhoenician',
                    astral: '\uD802[\uDD00-\uDD1F]'
                },
                {
                    name: 'InPhonetic_Extensions',
                    bmp: '\u1D00-\u1D7F'
                },
                {
                    name: 'InPhonetic_Extensions_Supplement',
                    bmp: '\u1D80-\u1DBF'
                },
                {
                    name: 'InPlaying_Cards',
                    astral: '\uD83C[\uDCA0-\uDCFF]'
                },
                {
                    name: 'InPrivate_Use_Area',
                    bmp: '\uE000-\uF8FF'
                },
                {
                    name: 'InPsalter_Pahlavi',
                    astral: '\uD802[\uDF80-\uDFAF]'
                },
                {
                    name: 'InRejang',
                    bmp: '\uA930-\uA95F'
                },
                {
                    name: 'InRumi_Numeral_Symbols',
                    astral: '\uD803[\uDE60-\uDE7F]'
                },
                {
                    name: 'InRunic',
                    bmp: '\u16A0-\u16FF'
                },
                {
                    name: 'InSamaritan',
                    bmp: '\u0800-\u083F'
                },
                {
                    name: 'InSaurashtra',
                    bmp: '\uA880-\uA8DF'
                },
                {
                    name: 'InSharada',
                    astral: '\uD804[\uDD80-\uDDDF]'
                },
                {
                    name: 'InShavian',
                    astral: '\uD801[\uDC50-\uDC7F]'
                },
                {
                    name: 'InShorthand_Format_Controls',
                    astral: '\uD82F[\uDCA0-\uDCAF]'
                },
                {
                    name: 'InSiddham',
                    astral: '\uD805[\uDD80-\uDDFF]'
                },
                {
                    name: 'InSinhala',
                    bmp: '\u0D80-\u0DFF'
                },
                {
                    name: 'InSinhala_Archaic_Numbers',
                    astral: '\uD804[\uDDE0-\uDDFF]'
                },
                {
                    name: 'InSmall_Form_Variants',
                    bmp: '\uFE50-\uFE6F'
                },
                {
                    name: 'InSora_Sompeng',
                    astral: '\uD804[\uDCD0-\uDCFF]'
                },
                {
                    name: 'InSpacing_Modifier_Letters',
                    bmp: '\u02B0-\u02FF'
                },
                {
                    name: 'InSpecials',
                    bmp: '\uFFF0-\uFFFF'
                },
                {
                    name: 'InSundanese',
                    bmp: '\u1B80-\u1BBF'
                },
                {
                    name: 'InSundanese_Supplement',
                    bmp: '\u1CC0-\u1CCF'
                },
                {
                    name: 'InSuperscripts_and_Subscripts',
                    bmp: '\u2070-\u209F'
                },
                {
                    name: 'InSupplemental_Arrows_A',
                    bmp: '\u27F0-\u27FF'
                },
                {
                    name: 'InSupplemental_Arrows_B',
                    bmp: '\u2900-\u297F'
                },
                {
                    name: 'InSupplemental_Arrows_C',
                    astral: '\uD83E[\uDC00-\uDCFF]'
                },
                {
                    name: 'InSupplemental_Mathematical_Operators',
                    bmp: '\u2A00-\u2AFF'
                },
                {
                    name: 'InSupplemental_Punctuation',
                    bmp: '\u2E00-\u2E7F'
                },
                {
                    name: 'InSupplemental_Symbols_and_Pictographs',
                    astral: '\uD83E[\uDD00-\uDDFF]'
                },
                {
                    name: 'InSupplementary_Private_Use_Area_A',
                    astral: '[\uDB80-\uDBBF][\uDC00-\uDFFF]'
                },
                {
                    name: 'InSupplementary_Private_Use_Area_B',
                    astral: '[\uDBC0-\uDBFF][\uDC00-\uDFFF]'
                },
                {
                    name: 'InSutton_SignWriting',
                    astral: '\uD836[\uDC00-\uDEAF]'
                },
                {
                    name: 'InSyloti_Nagri',
                    bmp: '\uA800-\uA82F'
                },
                {
                    name: 'InSyriac',
                    bmp: '\u0700-\u074F'
                },
                {
                    name: 'InTagalog',
                    bmp: '\u1700-\u171F'
                },
                {
                    name: 'InTagbanwa',
                    bmp: '\u1760-\u177F'
                },
                {
                    name: 'InTags',
                    astral: '\uDB40[\uDC00-\uDC7F]'
                },
                {
                    name: 'InTai_Le',
                    bmp: '\u1950-\u197F'
                },
                {
                    name: 'InTai_Tham',
                    bmp: '\u1A20-\u1AAF'
                },
                {
                    name: 'InTai_Viet',
                    bmp: '\uAA80-\uAADF'
                },
                {
                    name: 'InTai_Xuan_Jing_Symbols',
                    astral: '\uD834[\uDF00-\uDF5F]'
                },
                {
                    name: 'InTakri',
                    astral: '\uD805[\uDE80-\uDECF]'
                },
                {
                    name: 'InTamil',
                    bmp: '\u0B80-\u0BFF'
                },
                {
                    name: 'InTangut',
                    astral: '[\uD81C-\uD821][\uDC00-\uDFFF]'
                },
                {
                    name: 'InTangut_Components',
                    astral: '\uD822[\uDC00-\uDEFF]'
                },
                {
                    name: 'InTelugu',
                    bmp: '\u0C00-\u0C7F'
                },
                {
                    name: 'InThaana',
                    bmp: '\u0780-\u07BF'
                },
                {
                    name: 'InThai',
                    bmp: '\u0E00-\u0E7F'
                },
                {
                    name: 'InTibetan',
                    bmp: '\u0F00-\u0FFF'
                },
                {
                    name: 'InTifinagh',
                    bmp: '\u2D30-\u2D7F'
                },
                {
                    name: 'InTirhuta',
                    astral: '\uD805[\uDC80-\uDCDF]'
                },
                {
                    name: 'InTransport_and_Map_Symbols',
                    astral: '\uD83D[\uDE80-\uDEFF]'
                },
                {
                    name: 'InUgaritic',
                    astral: '\uD800[\uDF80-\uDF9F]'
                },
                {
                    name: 'InUnified_Canadian_Aboriginal_Syllabics',
                    bmp: '\u1400-\u167F'
                },
                {
                    name: 'InUnified_Canadian_Aboriginal_Syllabics_Extended',
                    bmp: '\u18B0-\u18FF'
                },
                {
                    name: 'InVai',
                    bmp: '\uA500-\uA63F'
                },
                {
                    name: 'InVariation_Selectors',
                    bmp: '\uFE00-\uFE0F'
                },
                {
                    name: 'InVariation_Selectors_Supplement',
                    astral: '\uDB40[\uDD00-\uDDEF]'
                },
                {
                    name: 'InVedic_Extensions',
                    bmp: '\u1CD0-\u1CFF'
                },
                {
                    name: 'InVertical_Forms',
                    bmp: '\uFE10-\uFE1F'
                },
                {
                    name: 'InWarang_Citi',
                    astral: '\uD806[\uDCA0-\uDCFF]'
                },
                {
                    name: 'InYi_Radicals',
                    bmp: '\uA490-\uA4CF'
                },
                {
                    name: 'InYi_Syllables',
                    bmp: '\uA000-\uA48F'
                },
                {
                    name: 'InYijing_Hexagram_Symbols',
                    bmp: '\u4DC0-\u4DFF'
                }
            ]);

        };

    },{}],5:[function(require,module,exports){
        /*!
 * XRegExp Unicode Categories 3.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2010-2017 MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */

        module.exports = function(XRegExp) {
            'use strict';

            /**
             * Adds support for Unicode's general categories. E.g., `\p{Lu}` or `\p{Uppercase Letter}`. See
             * category descriptions in UAX #44 <http://unicode.org/reports/tr44/#GC_Values_Table>. Token
             * names are case insensitive, and any spaces, hyphens, and underscores are ignored.
             *
             * Uses Unicode 9.0.0.
             *
             * @requires XRegExp, Unicode Base
             */

            if (!XRegExp.addUnicodeData) {
                throw new ReferenceError('Unicode Base must be loaded before Unicode Categories');
            }

            XRegExp.addUnicodeData([
                {
                    name: 'C',
                    alias: 'Other',
                    isBmpLast: true,
                    bmp: '\0-\x1F\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u0560\u0588\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EF\u05F5-\u0605\u061C\u061D\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB-\u07FF\u082E\u082F\u083F\u085C\u085D\u085F-\u089F\u08B5\u08BE-\u08D3\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FC-\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0AFA-\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C04\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0D00\u0D04\u0D0D\u0D11\u0D3B\u0D3C\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u180F\u181A-\u181F\u1878-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1CBF\u1CC8-\u1CCF\u1CF7\u1CFA-\u1CFF\u1DF6-\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20BF-\u20CF\u20F1-\u20FF\u218C-\u218F\u23FF\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BBA-\u2BBC\u2BC9\u2BD2-\u2BEB\u2BF0-\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E45-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u312E-\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FD6-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7AF\uA7B8-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA8FE\uA8FF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF',
                    astral: '\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2F\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE34-\uDE37\uDE3B-\uDE3E\uDE48-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD00-\uDE5F\uDE7F-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCBD\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD44-\uDD4F\uDD77-\uDD7F\uDDCE\uDDCF\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF3B\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5A\uDC5C\uDC5E-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB8-\uDEBF\uDECA-\uDEFF\uDF1A-\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC00-\uDC9F\uDCF3-\uDCFE\uDD00-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD823-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD874-\uD87D\uD87F-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDEFF\uDF45-\uDF4F\uDF7F-\uDF8E\uDFA0-\uDFDF\uDFE1-\uDFFF]|\uD821[\uDFED-\uDFFF]|\uD822[\uDEF3-\uDFFF]|\uD82C[\uDC02-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDE9-\uDDFF\uDE46-\uDEFF\uDF57-\uDF5F\uDF72-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4B-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD6F\uDDAD-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDEFF]|\uD83D[\uDED3-\uDEDF\uDEED-\uDEEF\uDEF7-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDD0F\uDD1F\uDD28-\uDD2F\uDD31\uDD32\uDD3F\uDD4C-\uDD4F\uDD5F-\uDD7F\uDD92-\uDDBF\uDDC1-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]'
                },
                {
                    name: 'Cc',
                    alias: 'Control',
                    bmp: '\0-\x1F\x7F-\x9F'
                },
                {
                    name: 'Cf',
                    alias: 'Format',
                    bmp: '\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB',
                    astral: '\uD804\uDCBD|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]'
                },
                {
                    name: 'Cn',
                    alias: 'Unassigned',
                    bmp: '\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u0560\u0588\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EF\u05F5-\u05FF\u061D\u070E\u074B\u074C\u07B2-\u07BF\u07FB-\u07FF\u082E\u082F\u083F\u085C\u085D\u085F-\u089F\u08B5\u08BE-\u08D3\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FC-\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0AFA-\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C04\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0D00\u0D04\u0D0D\u0D11\u0D3B\u0D3C\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180F\u181A-\u181F\u1878-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1CBF\u1CC8-\u1CCF\u1CF7\u1CFA-\u1CFF\u1DF6-\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20BF-\u20CF\u20F1-\u20FF\u218C-\u218F\u23FF\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BBA-\u2BBC\u2BC9\u2BD2-\u2BEB\u2BF0-\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E45-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u312E-\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FD6-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7AF\uA7B8-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA8FE\uA8FF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF',
                    astral: '\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2F\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE34-\uDE37\uDE3B-\uDE3E\uDE48-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD00-\uDE5F\uDE7F-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD44-\uDD4F\uDD77-\uDD7F\uDDCE\uDDCF\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF3B\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5A\uDC5C\uDC5E-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB8-\uDEBF\uDECA-\uDEFF\uDF1A-\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC00-\uDC9F\uDCF3-\uDCFE\uDD00-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD823-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD874-\uD87D\uD87F-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDEFF\uDF45-\uDF4F\uDF7F-\uDF8E\uDFA0-\uDFDF\uDFE1-\uDFFF]|\uD821[\uDFED-\uDFFF]|\uD822[\uDEF3-\uDFFF]|\uD82C[\uDC02-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDE9-\uDDFF\uDE46-\uDEFF\uDF57-\uDF5F\uDF72-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4B-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD6F\uDDAD-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDEFF]|\uD83D[\uDED3-\uDEDF\uDEED-\uDEEF\uDEF7-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDD0F\uDD1F\uDD28-\uDD2F\uDD31\uDD32\uDD3F\uDD4C-\uDD4F\uDD5F-\uDD7F\uDD92-\uDDBF\uDDC1-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]'
                },
                {
                    name: 'Co',
                    alias: 'Private_Use',
                    bmp: '\uE000-\uF8FF',
                    astral: '[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]'
                },
                {
                    name: 'Cs',
                    alias: 'Surrogate',
                    bmp: '\uD800-\uDFFF'
                },
                {
                    name: 'L',
                    alias: 'Letter',
                    bmp: 'A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
                    astral: '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]'
                },
                {
                    name: 'Ll',
                    alias: 'Lowercase_Letter',
                    bmp: 'a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A',
                    astral: '\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]'
                },
                {
                    name: 'Lm',
                    alias: 'Modifier_Letter',
                    bmp: '\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E\uFF9F',
                    astral: '\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0]'
                },
                {
                    name: 'Lo',
                    alias: 'Other_Letter',
                    bmp: '\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
                    astral: '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]'
                },
                {
                    name: 'Lt',
                    alias: 'Titlecase_Letter',
                    bmp: '\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC'
                },
                {
                    name: 'Lu',
                    alias: 'Uppercase_Letter',
                    bmp: 'A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A',
                    astral: '\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]'
                },
                {
                    name: 'M',
                    alias: 'Mark',
                    bmp: '\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D4-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFB-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F',
                    astral: '\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDCA-\uDDCC\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]'
                },
                {
                    name: 'Mc',
                    alias: 'Spacing_Mark',
                    bmp: '\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF2\u1CF3\u302E\u302F\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BD-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC',
                    astral: '\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4]|\uD81B[\uDF51-\uDF7E]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]'
                },
                {
                    name: 'Me',
                    alias: 'Enclosing_Mark',
                    bmp: '\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672'
                },
                {
                    name: 'Mn',
                    alias: 'Nonspacing_Mark',
                    bmp: '\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D4-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D01\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8C5\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F',
                    astral: '\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDCA-\uDDCC\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]'
                },
                {
                    name: 'N',
                    alias: 'Number',
                    bmp: '0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19',
                    astral: '\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE47\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2]|\uD807[\uDC50-\uDC6C]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59\uDF5B-\uDF61]|\uD834[\uDF60-\uDF71]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83C[\uDD00-\uDD0C]'
                },
                {
                    name: 'Nd',
                    alias: 'Decimal_Number',
                    bmp: '0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19',
                    astral: '\uD801[\uDCA0-\uDCA9]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9]|\uD807[\uDC50-\uDC59]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDD50-\uDD59]'
                },
                {
                    name: 'Nl',
                    alias: 'Letter_Number',
                    bmp: '\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF',
                    astral: '\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]'
                },
                {
                    name: 'No',
                    alias: 'Other_Number',
                    bmp: '\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835',
                    astral: '\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE47\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C]|\uD81A[\uDF5B-\uDF61]|\uD834[\uDF60-\uDF71]|\uD83A[\uDCC7-\uDCCF]|\uD83C[\uDD00-\uDD0C]'
                },
                {
                    name: 'P',
                    alias: 'Punctuation',
                    bmp: '\x21-\x23\x25-\\x2A\x2C-\x2F\x3A\x3B\\x3F\x40\\x5B-\\x5D\x5F\\x7B\x7D\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E44\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65',
                    astral: '\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD807[\uDC41-\uDC45\uDC70\uDC71]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]'
                },
                {
                    name: 'Pc',
                    alias: 'Connector_Punctuation',
                    bmp: '\x5F\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F'
                },
                {
                    name: 'Pd',
                    alias: 'Dash_Punctuation',
                    bmp: '\\x2D\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D'
                },
                {
                    name: 'Pe',
                    alias: 'Close_Punctuation',
                    bmp: '\\x29\\x5D\x7D\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63'
                },
                {
                    name: 'Pf',
                    alias: 'Final_Punctuation',
                    bmp: '\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21'
                },
                {
                    name: 'Pi',
                    alias: 'Initial_Punctuation',
                    bmp: '\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20'
                },
                {
                    name: 'Po',
                    alias: 'Other_Punctuation',
                    bmp: '\x21-\x23\x25-\x27\\x2A\x2C\\x2E\x2F\x3A\x3B\\x3F\x40\\x5C\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166D\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43\u2E44\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65',
                    astral: '\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD807[\uDC41-\uDC45\uDC70\uDC71]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]'
                },
                {
                    name: 'Ps',
                    alias: 'Open_Punctuation',
                    bmp: '\\x28\\x5B\\x7B\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62'
                },
                {
                    name: 'S',
                    alias: 'Symbol',
                    bmp: '\\x24\\x2B\x3C-\x3E\\x5E\x60\\x7C\x7E\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BE\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u23FE\u2400-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD1\u2BEC-\u2BEF\u2CE5-\u2CEA\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u32FE\u3300-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD',
                    astral: '\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9B\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD83B[\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDDAC\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED2\uDEE0-\uDEEC\uDEF0-\uDEF6\uDF00-\uDF73\uDF80-\uDFD4]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD10-\uDD1E\uDD20-\uDD27\uDD30\uDD33-\uDD3E\uDD40-\uDD4B\uDD50-\uDD5E\uDD80-\uDD91\uDDC0]'
                },
                {
                    name: 'Sc',
                    alias: 'Currency_Symbol',
                    bmp: '\\x24\xA2-\xA5\u058F\u060B\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20BE\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6'
                },
                {
                    name: 'Sk',
                    alias: 'Modifier_Symbol',
                    bmp: '\\x5E\x60\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uFBB2-\uFBC1\uFF3E\uFF40\uFFE3',
                    astral: '\uD83C[\uDFFB-\uDFFF]'
                },
                {
                    name: 'Sm',
                    alias: 'Math_Symbol',
                    bmp: '\\x2B\x3C-\x3E\\x7C\x7E\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC',
                    astral: '\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]'
                },
                {
                    name: 'So',
                    alias: 'Other_Symbol',
                    bmp: '\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u23FE\u2400-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD1\u2BEC-\u2BEF\u2CE5-\u2CEA\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u32FE\u3300-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFDFD\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD',
                    astral: '\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9B\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDDAC\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED2\uDEE0-\uDEEC\uDEF0-\uDEF6\uDF00-\uDF73\uDF80-\uDFD4]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD10-\uDD1E\uDD20-\uDD27\uDD30\uDD33-\uDD3E\uDD40-\uDD4B\uDD50-\uDD5E\uDD80-\uDD91\uDDC0]'
                },
                {
                    name: 'Z',
                    alias: 'Separator',
                    bmp: '\x20\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
                },
                {
                    name: 'Zl',
                    alias: 'Line_Separator',
                    bmp: '\u2028'
                },
                {
                    name: 'Zp',
                    alias: 'Paragraph_Separator',
                    bmp: '\u2029'
                },
                {
                    name: 'Zs',
                    alias: 'Space_Separator',
                    bmp: '\x20\xA0\u1680\u2000-\u200A\u202F\u205F\u3000'
                }
            ]);

        };

    },{}],6:[function(require,module,exports){
        /*!
 * XRegExp Unicode Properties 3.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2012-2017 MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */

        module.exports = function(XRegExp) {
            'use strict';

            /**
             * Adds properties to meet the UTS #18 Level 1 RL1.2 requirements for Unicode regex support. See
             * <http://unicode.org/reports/tr18/#RL1.2>. Following are definitions of these properties from
             * UAX #44 <http://unicode.org/reports/tr44/>:
             *
             * - Alphabetic
             *   Characters with the Alphabetic property. Generated from: Lowercase + Uppercase + Lt + Lm +
             *   Lo + Nl + Other_Alphabetic.
             *
             * - Default_Ignorable_Code_Point
             *   For programmatic determination of default ignorable code points. New characters that should
             *   be ignored in rendering (unless explicitly supported) will be assigned in these ranges,
             *   permitting programs to correctly handle the default rendering of such characters when not
             *   otherwise supported.
             *
             * - Lowercase
             *   Characters with the Lowercase property. Generated from: Ll + Other_Lowercase.
             *
             * - Noncharacter_Code_Point
             *   Code points permanently reserved for internal use.
             *
             * - Uppercase
             *   Characters with the Uppercase property. Generated from: Lu + Other_Uppercase.
             *
             * - White_Space
             *   Spaces, separator characters and other control characters which should be treated by
             *   programming languages as "white space" for the purpose of parsing elements.
             *
             * The properties ASCII, Any, and Assigned are also included but are not defined in UAX #44. UTS
             * #18 RL1.2 additionally requires support for Unicode scripts and general categories. These are
             * included in XRegExp's Unicode Categories and Unicode Scripts addons.
             *
             * Token names are case insensitive, and any spaces, hyphens, and underscores are ignored.
             *
             * Uses Unicode 9.0.0.
             *
             * @requires XRegExp, Unicode Base
             */

            if (!XRegExp.addUnicodeData) {
                throw new ReferenceError('Unicode Base must be loaded before Unicode Properties');
            }

            var unicodeData = [
                {
                    name: 'ASCII',
                    bmp: '\0-\x7F'
                },
                {
                    name: 'Alphabetic',
                    bmp: 'A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u065F\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06EF\u06FA-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09F0\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A70-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u103F\u1050-\u1062\u1065-\u1068\u106E-\u1086\u108E\u109C\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1AA7\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B80-\u1BA9\u1BAC-\u1BAF\u1BBA-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C35\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u24B6-\u24E9\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA827\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA60-\uAA76\uAA7A\uAA7E-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
                    astral: '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC45\uDC82-\uDCB8\uDCD0-\uDCE8\uDD00-\uDD32\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE80-\uDEB5\uDF00-\uDF19\uDF1D-\uDF2A]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF36\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD47]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]'
                },
                {
                    name: 'Any',
                    isBmpLast: true,
                    bmp: '\0-\uFFFF',
                    astral: '[\uD800-\uDBFF][\uDC00-\uDFFF]'
                },
                {
                    name: 'Default_Ignorable_Code_Point',
                    bmp: '\xAD\u034F\u061C\u115F\u1160\u17B4\u17B5\u180B-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8',
                    astral: '\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|[\uDB40-\uDB43][\uDC00-\uDFFF]'
                },
                {
                    name: 'Lowercase',
                    bmp: 'a-z\xAA\xB5\xBA\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02B8\u02C0\u02C1\u02E0-\u02E4\u0345\u0371\u0373\u0377\u037A-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1DBF\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2071\u207F\u2090-\u209C\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2170-\u217F\u2184\u24D0-\u24E9\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7D\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B-\uA69D\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7F8-\uA7FA\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A',
                    astral: '\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]'
                },
                {
                    name: 'Noncharacter_Code_Point',
                    bmp: '\uFDD0-\uFDEF\uFFFE\uFFFF',
                    astral: '[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]'
                },
                {
                    name: 'Uppercase',
                    bmp: 'A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2160-\u216F\u2183\u24B6-\u24CF\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A',
                    astral: '\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]'
                },
                {
                    name: 'White_Space',
                    bmp: '\x09-\x0D\x20\x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
                }
            ];

            // Add non-generated data
            unicodeData.push({
                name: 'Assigned',
                // Since this is defined as the inverse of Unicode category Cn (Unassigned), the Unicode
                // Categories addon is required to use this property
                inverseOf: 'Cn'
            });

            XRegExp.addUnicodeData(unicodeData);

        };

    },{}],7:[function(require,module,exports){
        /*!
 * XRegExp Unicode Scripts 3.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2010-2017 MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */

        module.exports = function(XRegExp) {
            'use strict';

            /**
             * Adds support for all Unicode scripts. E.g., `\p{Latin}`. Token names are case insensitive,
             * and any spaces, hyphens, and underscores are ignored.
             *
             * Uses Unicode 9.0.0.
             *
             * @requires XRegExp, Unicode Base
             */

            if (!XRegExp.addUnicodeData) {
                throw new ReferenceError('Unicode Base must be loaded before Unicode Scripts');
            }

            XRegExp.addUnicodeData([
                {
                    name: 'Adlam',
                    astral: '\uD83A[\uDD00-\uDD4A\uDD50-\uDD59\uDD5E\uDD5F]'
                },
                {
                    name: 'Ahom',
                    astral: '\uD805[\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF3F]'
                },
                {
                    name: 'Anatolian_Hieroglyphs',
                    astral: '\uD811[\uDC00-\uDE46]'
                },
                {
                    name: 'Arabic',
                    bmp: '\u0600-\u0604\u0606-\u060B\u060D-\u061A\u061E\u0620-\u063F\u0641-\u064A\u0656-\u066F\u0671-\u06DC\u06DE-\u06FF\u0750-\u077F\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u08FF\uFB50-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFD\uFE70-\uFE74\uFE76-\uFEFC',
                    astral: '\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]'
                },
                {
                    name: 'Armenian',
                    bmp: '\u0531-\u0556\u0559-\u055F\u0561-\u0587\u058A\u058D-\u058F\uFB13-\uFB17'
                },
                {
                    name: 'Avestan',
                    astral: '\uD802[\uDF00-\uDF35\uDF39-\uDF3F]'
                },
                {
                    name: 'Balinese',
                    bmp: '\u1B00-\u1B4B\u1B50-\u1B7C'
                },
                {
                    name: 'Bamum',
                    bmp: '\uA6A0-\uA6F7',
                    astral: '\uD81A[\uDC00-\uDE38]'
                },
                {
                    name: 'Bassa_Vah',
                    astral: '\uD81A[\uDED0-\uDEED\uDEF0-\uDEF5]'
                },
                {
                    name: 'Batak',
                    bmp: '\u1BC0-\u1BF3\u1BFC-\u1BFF'
                },
                {
                    name: 'Bengali',
                    bmp: '\u0980-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FB'
                },
                {
                    name: 'Bhaiksuki',
                    astral: '\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC45\uDC50-\uDC6C]'
                },
                {
                    name: 'Bopomofo',
                    bmp: '\u02EA\u02EB\u3105-\u312D\u31A0-\u31BA'
                },
                {
                    name: 'Brahmi',
                    astral: '\uD804[\uDC00-\uDC4D\uDC52-\uDC6F\uDC7F]'
                },
                {
                    name: 'Braille',
                    bmp: '\u2800-\u28FF'
                },
                {
                    name: 'Buginese',
                    bmp: '\u1A00-\u1A1B\u1A1E\u1A1F'
                },
                {
                    name: 'Buhid',
                    bmp: '\u1740-\u1753'
                },
                {
                    name: 'Canadian_Aboriginal',
                    bmp: '\u1400-\u167F\u18B0-\u18F5'
                },
                {
                    name: 'Carian',
                    astral: '\uD800[\uDEA0-\uDED0]'
                },
                {
                    name: 'Caucasian_Albanian',
                    astral: '\uD801[\uDD30-\uDD63\uDD6F]'
                },
                {
                    name: 'Chakma',
                    astral: '\uD804[\uDD00-\uDD34\uDD36-\uDD43]'
                },
                {
                    name: 'Cham',
                    bmp: '\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA5C-\uAA5F'
                },
                {
                    name: 'Cherokee',
                    bmp: '\u13A0-\u13F5\u13F8-\u13FD\uAB70-\uABBF'
                },
                {
                    name: 'Common',
                    bmp: '\0-\x40\\x5B-\x60\\x7B-\xA9\xAB-\xB9\xBB-\xBF\xD7\xF7\u02B9-\u02DF\u02E5-\u02E9\u02EC-\u02FF\u0374\u037E\u0385\u0387\u0589\u0605\u060C\u061B\u061C\u061F\u0640\u06DD\u08E2\u0964\u0965\u0E3F\u0FD5-\u0FD8\u10FB\u16EB-\u16ED\u1735\u1736\u1802\u1803\u1805\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u2000-\u200B\u200E-\u2064\u2066-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20BE\u2100-\u2125\u2127-\u2129\u212C-\u2131\u2133-\u214D\u214F-\u215F\u2189-\u218B\u2190-\u23FE\u2400-\u2426\u2440-\u244A\u2460-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD1\u2BEC-\u2BEF\u2E00-\u2E44\u2FF0-\u2FFB\u3000-\u3004\u3006\u3008-\u3020\u3030-\u3037\u303C-\u303F\u309B\u309C\u30A0\u30FB\u30FC\u3190-\u319F\u31C0-\u31E3\u3220-\u325F\u327F-\u32CF\u3358-\u33FF\u4DC0-\u4DFF\uA700-\uA721\uA788-\uA78A\uA830-\uA839\uA92E\uA9CF\uAB5B\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFF70\uFF9E\uFF9F\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD',
                    astral: '\uD800[\uDD00-\uDD02\uDD07-\uDD33\uDD37-\uDD3F\uDD90-\uDD9B\uDDD0-\uDDFC\uDEE1-\uDEFB]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD66\uDD6A-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDF00-\uDF56\uDF60-\uDF71]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDFCB\uDFCE-\uDFFF]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDD0C\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDDAC\uDDE6-\uDDFF\uDE01\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED2\uDEE0-\uDEEC\uDEF0-\uDEF6\uDF00-\uDF73\uDF80-\uDFD4]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD10-\uDD1E\uDD20-\uDD27\uDD30\uDD33-\uDD3E\uDD40-\uDD4B\uDD50-\uDD5E\uDD80-\uDD91\uDDC0]|\uDB40[\uDC01\uDC20-\uDC7F]'
                },
                {
                    name: 'Coptic',
                    bmp: '\u03E2-\u03EF\u2C80-\u2CF3\u2CF9-\u2CFF'
                },
                {
                    name: 'Cuneiform',
                    astral: '\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC70-\uDC74\uDC80-\uDD43]'
                },
                {
                    name: 'Cypriot',
                    astral: '\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F]'
                },
                {
                    name: 'Cyrillic',
                    bmp: '\u0400-\u0484\u0487-\u052F\u1C80-\u1C88\u1D2B\u1D78\u2DE0-\u2DFF\uA640-\uA69F\uFE2E\uFE2F'
                },
                {
                    name: 'Deseret',
                    astral: '\uD801[\uDC00-\uDC4F]'
                },
                {
                    name: 'Devanagari',
                    bmp: '\u0900-\u0950\u0953-\u0963\u0966-\u097F\uA8E0-\uA8FD'
                },
                {
                    name: 'Duployan',
                    astral: '\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9C-\uDC9F]'
                },
                {
                    name: 'Egyptian_Hieroglyphs',
                    astral: '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]'
                },
                {
                    name: 'Elbasan',
                    astral: '\uD801[\uDD00-\uDD27]'
                },
                {
                    name: 'Ethiopic',
                    bmp: '\u1200-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E'
                },
                {
                    name: 'Georgian',
                    bmp: '\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u10FF\u2D00-\u2D25\u2D27\u2D2D'
                },
                {
                    name: 'Glagolitic',
                    bmp: '\u2C00-\u2C2E\u2C30-\u2C5E',
                    astral: '\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]'
                },
                {
                    name: 'Gothic',
                    astral: '\uD800[\uDF30-\uDF4A]'
                },
                {
                    name: 'Grantha',
                    astral: '\uD804[\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]'
                },
                {
                    name: 'Greek',
                    bmp: '\u0370-\u0373\u0375-\u0377\u037A-\u037D\u037F\u0384\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03E1\u03F0-\u03FF\u1D26-\u1D2A\u1D5D-\u1D61\u1D66-\u1D6A\u1DBF\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u2126\uAB65',
                    astral: '\uD800[\uDD40-\uDD8E\uDDA0]|\uD834[\uDE00-\uDE45]'
                },
                {
                    name: 'Gujarati',
                    bmp: '\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1\u0AF9'
                },
                {
                    name: 'Gurmukhi',
                    bmp: '\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75'
                },
                {
                    name: 'Han',
                    bmp: '\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B\u3400-\u4DB5\u4E00-\u9FD5\uF900-\uFA6D\uFA70-\uFAD9',
                    astral: '[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]'
                },
                {
                    name: 'Hangul',
                    bmp: '\u1100-\u11FF\u302E\u302F\u3131-\u318E\u3200-\u321E\u3260-\u327E\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC'
                },
                {
                    name: 'Hanunoo',
                    bmp: '\u1720-\u1734'
                },
                {
                    name: 'Hatran',
                    astral: '\uD802[\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDCFF]'
                },
                {
                    name: 'Hebrew',
                    bmp: '\u0591-\u05C7\u05D0-\u05EA\u05F0-\u05F4\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFB4F'
                },
                {
                    name: 'Hiragana',
                    bmp: '\u3041-\u3096\u309D-\u309F',
                    astral: '\uD82C\uDC01|\uD83C\uDE00'
                },
                {
                    name: 'Imperial_Aramaic',
                    astral: '\uD802[\uDC40-\uDC55\uDC57-\uDC5F]'
                },
                {
                    name: 'Inherited',
                    bmp: '\u0300-\u036F\u0485\u0486\u064B-\u0655\u0670\u0951\u0952\u1AB0-\u1ABE\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFB-\u1DFF\u200C\u200D\u20D0-\u20F0\u302A-\u302D\u3099\u309A\uFE00-\uFE0F\uFE20-\uFE2D',
                    astral: '\uD800[\uDDFD\uDEE0]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD]|\uDB40[\uDD00-\uDDEF]'
                },
                {
                    name: 'Inscriptional_Pahlavi',
                    astral: '\uD802[\uDF60-\uDF72\uDF78-\uDF7F]'
                },
                {
                    name: 'Inscriptional_Parthian',
                    astral: '\uD802[\uDF40-\uDF55\uDF58-\uDF5F]'
                },
                {
                    name: 'Javanese',
                    bmp: '\uA980-\uA9CD\uA9D0-\uA9D9\uA9DE\uA9DF'
                },
                {
                    name: 'Kaithi',
                    astral: '\uD804[\uDC80-\uDCC1]'
                },
                {
                    name: 'Kannada',
                    bmp: '\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2'
                },
                {
                    name: 'Katakana',
                    bmp: '\u30A1-\u30FA\u30FD-\u30FF\u31F0-\u31FF\u32D0-\u32FE\u3300-\u3357\uFF66-\uFF6F\uFF71-\uFF9D',
                    astral: '\uD82C\uDC00'
                },
                {
                    name: 'Kayah_Li',
                    bmp: '\uA900-\uA92D\uA92F'
                },
                {
                    name: 'Kharoshthi',
                    astral: '\uD802[\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F-\uDE47\uDE50-\uDE58]'
                },
                {
                    name: 'Khmer',
                    bmp: '\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u19E0-\u19FF'
                },
                {
                    name: 'Khojki',
                    astral: '\uD804[\uDE00-\uDE11\uDE13-\uDE3E]'
                },
                {
                    name: 'Khudawadi',
                    astral: '\uD804[\uDEB0-\uDEEA\uDEF0-\uDEF9]'
                },
                {
                    name: 'Lao',
                    bmp: '\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF'
                },
                {
                    name: 'Latin',
                    bmp: 'A-Za-z\xAA\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02E0-\u02E4\u1D00-\u1D25\u1D2C-\u1D5C\u1D62-\u1D65\u1D6B-\u1D77\u1D79-\u1DBE\u1E00-\u1EFF\u2071\u207F\u2090-\u209C\u212A\u212B\u2132\u214E\u2160-\u2188\u2C60-\u2C7F\uA722-\uA787\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA7FF\uAB30-\uAB5A\uAB5C-\uAB64\uFB00-\uFB06\uFF21-\uFF3A\uFF41-\uFF5A'
                },
                {
                    name: 'Lepcha',
                    bmp: '\u1C00-\u1C37\u1C3B-\u1C49\u1C4D-\u1C4F'
                },
                {
                    name: 'Limbu',
                    bmp: '\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1940\u1944-\u194F'
                },
                {
                    name: 'Linear_A',
                    astral: '\uD801[\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]'
                },
                {
                    name: 'Linear_B',
                    astral: '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA]'
                },
                {
                    name: 'Lisu',
                    bmp: '\uA4D0-\uA4FF'
                },
                {
                    name: 'Lycian',
                    astral: '\uD800[\uDE80-\uDE9C]'
                },
                {
                    name: 'Lydian',
                    astral: '\uD802[\uDD20-\uDD39\uDD3F]'
                },
                {
                    name: 'Mahajani',
                    astral: '\uD804[\uDD50-\uDD76]'
                },
                {
                    name: 'Malayalam',
                    bmp: '\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4F\u0D54-\u0D63\u0D66-\u0D7F'
                },
                {
                    name: 'Mandaic',
                    bmp: '\u0840-\u085B\u085E'
                },
                {
                    name: 'Manichaean',
                    astral: '\uD802[\uDEC0-\uDEE6\uDEEB-\uDEF6]'
                },
                {
                    name: 'Marchen',
                    astral: '\uD807[\uDC70-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]'
                },
                {
                    name: 'Meetei_Mayek',
                    bmp: '\uAAE0-\uAAF6\uABC0-\uABED\uABF0-\uABF9'
                },
                {
                    name: 'Mende_Kikakui',
                    astral: '\uD83A[\uDC00-\uDCC4\uDCC7-\uDCD6]'
                },
                {
                    name: 'Meroitic_Cursive',
                    astral: '\uD802[\uDDA0-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDDFF]'
                },
                {
                    name: 'Meroitic_Hieroglyphs',
                    astral: '\uD802[\uDD80-\uDD9F]'
                },
                {
                    name: 'Miao',
                    astral: '\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]'
                },
                {
                    name: 'Modi',
                    astral: '\uD805[\uDE00-\uDE44\uDE50-\uDE59]'
                },
                {
                    name: 'Mongolian',
                    bmp: '\u1800\u1801\u1804\u1806-\u180E\u1810-\u1819\u1820-\u1877\u1880-\u18AA',
                    astral: '\uD805[\uDE60-\uDE6C]'
                },
                {
                    name: 'Mro',
                    astral: '\uD81A[\uDE40-\uDE5E\uDE60-\uDE69\uDE6E\uDE6F]'
                },
                {
                    name: 'Multani',
                    astral: '\uD804[\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA9]'
                },
                {
                    name: 'Myanmar',
                    bmp: '\u1000-\u109F\uA9E0-\uA9FE\uAA60-\uAA7F'
                },
                {
                    name: 'Nabataean',
                    astral: '\uD802[\uDC80-\uDC9E\uDCA7-\uDCAF]'
                },
                {
                    name: 'New_Tai_Lue',
                    bmp: '\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u19DE\u19DF'
                },
                {
                    name: 'Newa',
                    astral: '\uD805[\uDC00-\uDC59\uDC5B\uDC5D]'
                },
                {
                    name: 'Nko',
                    bmp: '\u07C0-\u07FA'
                },
                {
                    name: 'Ogham',
                    bmp: '\u1680-\u169C'
                },
                {
                    name: 'Ol_Chiki',
                    bmp: '\u1C50-\u1C7F'
                },
                {
                    name: 'Old_Hungarian',
                    astral: '\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDCFF]'
                },
                {
                    name: 'Old_Italic',
                    astral: '\uD800[\uDF00-\uDF23]'
                },
                {
                    name: 'Old_North_Arabian',
                    astral: '\uD802[\uDE80-\uDE9F]'
                },
                {
                    name: 'Old_Permic',
                    astral: '\uD800[\uDF50-\uDF7A]'
                },
                {
                    name: 'Old_Persian',
                    astral: '\uD800[\uDFA0-\uDFC3\uDFC8-\uDFD5]'
                },
                {
                    name: 'Old_South_Arabian',
                    astral: '\uD802[\uDE60-\uDE7F]'
                },
                {
                    name: 'Old_Turkic',
                    astral: '\uD803[\uDC00-\uDC48]'
                },
                {
                    name: 'Oriya',
                    bmp: '\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77'
                },
                {
                    name: 'Osage',
                    astral: '\uD801[\uDCB0-\uDCD3\uDCD8-\uDCFB]'
                },
                {
                    name: 'Osmanya',
                    astral: '\uD801[\uDC80-\uDC9D\uDCA0-\uDCA9]'
                },
                {
                    name: 'Pahawh_Hmong',
                    astral: '\uD81A[\uDF00-\uDF45\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]'
                },
                {
                    name: 'Palmyrene',
                    astral: '\uD802[\uDC60-\uDC7F]'
                },
                {
                    name: 'Pau_Cin_Hau',
                    astral: '\uD806[\uDEC0-\uDEF8]'
                },
                {
                    name: 'Phags_Pa',
                    bmp: '\uA840-\uA877'
                },
                {
                    name: 'Phoenician',
                    astral: '\uD802[\uDD00-\uDD1B\uDD1F]'
                },
                {
                    name: 'Psalter_Pahlavi',
                    astral: '\uD802[\uDF80-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]'
                },
                {
                    name: 'Rejang',
                    bmp: '\uA930-\uA953\uA95F'
                },
                {
                    name: 'Runic',
                    bmp: '\u16A0-\u16EA\u16EE-\u16F8'
                },
                {
                    name: 'Samaritan',
                    bmp: '\u0800-\u082D\u0830-\u083E'
                },
                {
                    name: 'Saurashtra',
                    bmp: '\uA880-\uA8C5\uA8CE-\uA8D9'
                },
                {
                    name: 'Sharada',
                    astral: '\uD804[\uDD80-\uDDCD\uDDD0-\uDDDF]'
                },
                {
                    name: 'Shavian',
                    astral: '\uD801[\uDC50-\uDC7F]'
                },
                {
                    name: 'Siddham',
                    astral: '\uD805[\uDD80-\uDDB5\uDDB8-\uDDDD]'
                },
                {
                    name: 'SignWriting',
                    astral: '\uD836[\uDC00-\uDE8B\uDE9B-\uDE9F\uDEA1-\uDEAF]'
                },
                {
                    name: 'Sinhala',
                    bmp: '\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4',
                    astral: '\uD804[\uDDE1-\uDDF4]'
                },
                {
                    name: 'Sora_Sompeng',
                    astral: '\uD804[\uDCD0-\uDCE8\uDCF0-\uDCF9]'
                },
                {
                    name: 'Sundanese',
                    bmp: '\u1B80-\u1BBF\u1CC0-\u1CC7'
                },
                {
                    name: 'Syloti_Nagri',
                    bmp: '\uA800-\uA82B'
                },
                {
                    name: 'Syriac',
                    bmp: '\u0700-\u070D\u070F-\u074A\u074D-\u074F'
                },
                {
                    name: 'Tagalog',
                    bmp: '\u1700-\u170C\u170E-\u1714'
                },
                {
                    name: 'Tagbanwa',
                    bmp: '\u1760-\u176C\u176E-\u1770\u1772\u1773'
                },
                {
                    name: 'Tai_Le',
                    bmp: '\u1950-\u196D\u1970-\u1974'
                },
                {
                    name: 'Tai_Tham',
                    bmp: '\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD'
                },
                {
                    name: 'Tai_Viet',
                    bmp: '\uAA80-\uAAC2\uAADB-\uAADF'
                },
                {
                    name: 'Takri',
                    astral: '\uD805[\uDE80-\uDEB7\uDEC0-\uDEC9]'
                },
                {
                    name: 'Tamil',
                    bmp: '\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA'
                },
                {
                    name: 'Tangut',
                    astral: '\uD81B\uDFE0|[\uD81C-\uD820][\uDC00-\uDFFF]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]'
                },
                {
                    name: 'Telugu',
                    bmp: '\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7F'
                },
                {
                    name: 'Thaana',
                    bmp: '\u0780-\u07B1'
                },
                {
                    name: 'Thai',
                    bmp: '\u0E01-\u0E3A\u0E40-\u0E5B'
                },
                {
                    name: 'Tibetan',
                    bmp: '\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA'
                },
                {
                    name: 'Tifinagh',
                    bmp: '\u2D30-\u2D67\u2D6F\u2D70\u2D7F'
                },
                {
                    name: 'Tirhuta',
                    astral: '\uD805[\uDC80-\uDCC7\uDCD0-\uDCD9]'
                },
                {
                    name: 'Ugaritic',
                    astral: '\uD800[\uDF80-\uDF9D\uDF9F]'
                },
                {
                    name: 'Vai',
                    bmp: '\uA500-\uA62B'
                },
                {
                    name: 'Warang_Citi',
                    astral: '\uD806[\uDCA0-\uDCF2\uDCFF]'
                },
                {
                    name: 'Yi',
                    bmp: '\uA000-\uA48C\uA490-\uA4C6'
                }
            ]);

        };

    },{}],8:[function(require,module,exports){
        var XRegExp = require('./xregexp');

        require('./addons/build')(XRegExp);
        require('./addons/matchrecursive')(XRegExp);
        require('./addons/unicode-base')(XRegExp);
        require('./addons/unicode-blocks')(XRegExp);
        require('./addons/unicode-categories')(XRegExp);
        require('./addons/unicode-properties')(XRegExp);
        require('./addons/unicode-scripts')(XRegExp);

        module.exports = XRegExp;

    },{"./addons/build":1,"./addons/matchrecursive":2,"./addons/unicode-base":3,"./addons/unicode-blocks":4,"./addons/unicode-categories":5,"./addons/unicode-properties":6,"./addons/unicode-scripts":7,"./xregexp":9}],9:[function(require,module,exports){
        /*!
 * XRegExp 3.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2007-2017 MIT License
 */

        'use strict';

        /**
         * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and
         * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to
         * make your client-side grepping simpler and more powerful, while freeing you from related
         * cross-browser inconsistencies.
         */

// ==--------------------------==
// Private stuff
// ==--------------------------==

// Property name used for extended regex instance data
        var REGEX_DATA = 'xregexp';
// Optional features that can be installed and uninstalled
        var features = {
            astral: false,
            natives: false
        };
// Native methods to use and restore ('native' is an ES3 reserved keyword)
        var nativ = {
            exec: RegExp.prototype.exec,
            test: RegExp.prototype.test,
            match: String.prototype.match,
            replace: String.prototype.replace,
            split: String.prototype.split
        };
// Storage for fixed/extended native methods
        var fixed = {};
// Storage for regexes cached by `XRegExp.cache`
        var regexCache = {};
// Storage for pattern details cached by the `XRegExp` constructor
        var patternCache = {};
// Storage for regex syntax tokens added internally or by `XRegExp.addToken`
        var tokens = [];
// Token scopes
        var defaultScope = 'default';
        var classScope = 'class';
// Regexes that match native regex syntax, including octals
        var nativeTokens = {
            // Any native multicharacter token in default scope, or any single character
            'default': /\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|\(\?(?:[:=!]|<[=!])|[?*+]\?|{\d+(?:,\d*)?}\??|[\s\S]/,
            // Any native multicharacter token in character class scope, or any single character
            'class': /\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|[\s\S]/
        };
// Any backreference or dollar-prefixed character in replacement strings
        var replacementToken = /\$(?:{([\w$]+)}|(\d\d?|[\s\S]))/g;
// Check for correct `exec` handling of nonparticipating capturing groups
        var correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined;
// Check for ES6 `flags` prop support
        var hasFlagsProp = /x/.flags !== undefined;
// Shortcut to `Object.prototype.toString`
        var toString = {}.toString;

        function hasNativeFlag(flag) {
            // Can't check based on the presence of properties/getters since browsers might support such
            // properties even when they don't support the corresponding flag in regex construction (tested
            // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`
            // throws an error)
            var isSupported = true;
            try {
                // Can't use regex literals for testing even in a `try` because regex literals with
                // unsupported flags cause a compilation error in IE
                new RegExp('', flag);
            } catch (exception) {
                isSupported = false;
            }
            return isSupported;
        }
// Check for ES6 `u` flag support
        var hasNativeU = hasNativeFlag('u');
// Check for ES6 `y` flag support
        var hasNativeY = hasNativeFlag('y');
// Tracker for known flags, including addon flags
        var registeredFlags = {
            g: true,
            i: true,
            m: true,
            u: hasNativeU,
            y: hasNativeY
        };

        /**
         * Attaches extended data and `XRegExp.prototype` properties to a regex object.
         *
         * @private
         * @param {RegExp} regex Regex to augment.
         * @param {Array} captureNames Array with capture names, or `null`.
         * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.
         * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.
         * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal
         *   operations, and never exposed to users. For internal-only regexes, we can improve perf by
         *   skipping some operations like attaching `XRegExp.prototype` properties.
         * @returns {RegExp} Augmented regex.
         */
        function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {
            var p;

            regex[REGEX_DATA] = {
                captureNames: captureNames
            };

            if (isInternalOnly) {
                return regex;
            }

            // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value
            if (regex.__proto__) {
                regex.__proto__ = XRegExp.prototype;
            } else {
                for (p in XRegExp.prototype) {
                    // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this
                    // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`
                    // extensions exist on `regex.prototype` anyway
                    regex[p] = XRegExp.prototype[p];
                }
            }

            regex[REGEX_DATA].source = xSource;
            // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order
            regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;

            return regex;
        }

        /**
         * Removes any duplicate characters from the provided string.
         *
         * @private
         * @param {String} str String to remove duplicate characters from.
         * @returns {String} String with any duplicate characters removed.
         */
        function clipDuplicates(str) {
            return nativ.replace.call(str, /([\s\S])(?=[\s\S]*\1)/g, '');
        }

        /**
         * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`
         * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing
         * flags g and y while copying the regex.
         *
         * @private
         * @param {RegExp} regex Regex to copy.
         * @param {Object} [options] Options object with optional properties:
         *   - `addG` {Boolean} Add flag g while copying the regex.
         *   - `addY` {Boolean} Add flag y while copying the regex.
         *   - `removeG` {Boolean} Remove flag g while copying the regex.
         *   - `removeY` {Boolean} Remove flag y while copying the regex.
         *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal
         *     operations, and never exposed to users. For internal-only regexes, we can improve perf by
         *     skipping some operations like attaching `XRegExp.prototype` properties.
         *   - `source` {String} Overrides `<regex>.source`, for special cases.
         * @returns {RegExp} Copy of the provided regex, possibly with modified flags.
         */
        function copyRegex(regex, options) {
            if (!XRegExp.isRegExp(regex)) {
                throw new TypeError('Type RegExp expected');
            }

            var xData = regex[REGEX_DATA] || {};
            var flags = getNativeFlags(regex);
            var flagsToAdd = '';
            var flagsToRemove = '';
            var xregexpSource = null;
            var xregexpFlags = null;

            options = options || {};

            if (options.removeG) {flagsToRemove += 'g';}
            if (options.removeY) {flagsToRemove += 'y';}
            if (flagsToRemove) {
                flags = nativ.replace.call(flags, new RegExp('[' + flagsToRemove + ']+', 'g'), '');
            }

            if (options.addG) {flagsToAdd += 'g';}
            if (options.addY) {flagsToAdd += 'y';}
            if (flagsToAdd) {
                flags = clipDuplicates(flags + flagsToAdd);
            }

            if (!options.isInternalOnly) {
                if (xData.source !== undefined) {
                    xregexpSource = xData.source;
                }
                // null or undefined; don't want to add to `flags` if the previous value was null, since
                // that indicates we're not tracking original precompilation flags
                if (xData.flags != null) {
                    // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never
                    // removed for non-internal regexes, so don't need to handle it
                    xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;
                }
            }

            // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid
            // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and
            // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the
            // translation to native regex syntax
            regex = augment(
                new RegExp(options.source || regex.source, flags),
                hasNamedCapture(regex) ? xData.captureNames.slice(0) : null,
                xregexpSource,
                xregexpFlags,
                options.isInternalOnly
            );

            return regex;
        }

        /**
         * Converts hexadecimal to decimal.
         *
         * @private
         * @param {String} hex
         * @returns {Number}
         */
        function dec(hex) {
            return parseInt(hex, 16);
        }

        /**
         * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an
         * inline comment or whitespace with flag x. This is used directly as a token handler function
         * passed to `XRegExp.addToken`.
         *
         * @private
         * @param {String} match Match arg of `XRegExp.addToken` handler
         * @param {String} scope Scope arg of `XRegExp.addToken` handler
         * @param {String} flags Flags arg of `XRegExp.addToken` handler
         * @returns {String} Either '' or '(?:)', depending on which is needed in the context of the match.
         */
        function getContextualTokenSeparator(match, scope, flags) {
            if (
                // No need to separate tokens if at the beginning or end of a group
                match.input.charAt(match.index - 1) === '(' ||
                match.input.charAt(match.index + match[0].length) === ')' ||
                // Avoid separating tokens when the following token is a quantifier
                isPatternNext(match.input, match.index + match[0].length, flags, '[?*+]|{\\d+(?:,\\d*)?}')
            ) {
                return '';
            }
            // Keep tokens separated. This avoids e.g. inadvertedly changing `\1 1` or `\1(?#)1` to `\11`.
            // This also ensures all tokens remain as discrete atoms, e.g. it avoids converting the syntax
            // error `(? :` into `(?:`.
            return '(?:)';
        }

        /**
         * Returns native `RegExp` flags used by a regex object.
         *
         * @private
         * @param {RegExp} regex Regex to check.
         * @returns {String} Native flags in use.
         */
        function getNativeFlags(regex) {
            return hasFlagsProp ?
                regex.flags :
                // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation
                // with an empty string) allows this to continue working predictably when
                // `XRegExp.proptotype.toString` is overridden
                nativ.exec.call(/\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];
        }

        /**
         * Determines whether a regex has extended instance data used to track capture names.
         *
         * @private
         * @param {RegExp} regex Regex to check.
         * @returns {Boolean} Whether the regex uses named capture.
         */
        function hasNamedCapture(regex) {
            return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);
        }

        /**
         * Converts decimal to hexadecimal.
         *
         * @private
         * @param {Number|String} dec
         * @returns {String}
         */
        function hex(dec) {
            return parseInt(dec, 10).toString(16);
        }

        /**
         * Returns the first index at which a given value can be found in an array.
         *
         * @private
         * @param {Array} array Array to search.
         * @param {*} value Value to locate in the array.
         * @returns {Number} Zero-based index at which the item is found, or -1.
         */
        function indexOf(array, value) {
            var len = array.length;
            var i;

            for (i = 0; i < len; ++i) {
                if (array[i] === value) {
                    return i;
                }
            }

            return -1;
        }

        /**
         * Checks whether the next nonignorable token after the specified position matches the
         * `needlePattern`
         *
         * @private
         * @param {String} pattern Pattern to search within.
         * @param {Number} pos Index in `pattern` to search at.
         * @param {String} flags Flags used by the pattern.
         * @param {String} needlePattern Pattern to match the next token against.
         * @returns {Boolean} Whether the next nonignorable token matches `needlePattern`
         */
        function isPatternNext(pattern, pos, flags, needlePattern) {
            var inlineCommentPattern = '\\(\\?#[^)]*\\)';
            var lineCommentPattern = '#[^#\\n]*';
            var patternsToIgnore = flags.indexOf('x') > -1 ?
                // Ignore any leading whitespace, line comments, and inline comments
                ['\\s', lineCommentPattern, inlineCommentPattern] :
                // Ignore any leading inline comments
                [inlineCommentPattern];
            return nativ.test.call(
                new RegExp('^(?:' + patternsToIgnore.join('|') + ')*(?:' + needlePattern + ')'),
                pattern.slice(pos)
            );
        }

        /**
         * Determines whether a value is of the specified type, by resolving its internal [[Class]].
         *
         * @private
         * @param {*} value Object to check.
         * @param {String} type Type to check for, in TitleCase.
         * @returns {Boolean} Whether the object matches the type.
         */
        function isType(value, type) {
            return toString.call(value) === '[object ' + type + ']';
        }

        /**
         * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.
         *
         * @private
         * @param {String} str
         * @returns {String}
         */
        function pad4(str) {
            while (str.length < 4) {
                str = '0' + str;
            }
            return str;
        }

        /**
         * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads
         * the flag preparation logic from the `XRegExp` constructor.
         *
         * @private
         * @param {String} pattern Regex pattern, possibly with a leading mode modifier.
         * @param {String} flags Any combination of flags.
         * @returns {Object} Object with properties `pattern` and `flags`.
         */
        function prepareFlags(pattern, flags) {
            var i;

            // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags
            if (clipDuplicates(flags) !== flags) {
                throw new SyntaxError('Invalid duplicate regex flag ' + flags);
            }

            // Strip and apply a leading mode modifier with any combination of flags except g or y
            pattern = nativ.replace.call(pattern, /^\(\?([\w$]+)\)/, function($0, $1) {
                if (nativ.test.call(/[gy]/, $1)) {
                    throw new SyntaxError('Cannot use flag g or y in mode modifier ' + $0);
                }
                // Allow duplicate flags within the mode modifier
                flags = clipDuplicates(flags + $1);
                return '';
            });

            // Throw on unknown native or nonnative flags
            for (i = 0; i < flags.length; ++i) {
                if (!registeredFlags[flags.charAt(i)]) {
                    throw new SyntaxError('Unknown regex flag ' + flags.charAt(i));
                }
            }

            return {
                pattern: pattern,
                flags: flags
            };
        }

        /**
         * Prepares an options object from the given value.
         *
         * @private
         * @param {String|Object} value Value to convert to an options object.
         * @returns {Object} Options object.
         */
        function prepareOptions(value) {
            var options = {};

            if (isType(value, 'String')) {
                XRegExp.forEach(value, /[^\s,]+/, function(match) {
                    options[match] = true;
                });

                return options;
            }

            return value;
        }

        /**
         * Registers a flag so it doesn't throw an 'unknown flag' error.
         *
         * @private
         * @param {String} flag Single-character flag to register.
         */
        function registerFlag(flag) {
            if (!/^[\w$]$/.test(flag)) {
                throw new Error('Flag must be a single character A-Za-z0-9_$');
            }

            registeredFlags[flag] = true;
        }

        /**
         * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified
         * position, until a match is found.
         *
         * @private
         * @param {String} pattern Original pattern from which an XRegExp object is being built.
         * @param {String} flags Flags being used to construct the regex.
         * @param {Number} pos Position to search for tokens within `pattern`.
         * @param {Number} scope Regex scope to apply: 'default' or 'class'.
         * @param {Object} context Context object to use for token handler functions.
         * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.
         */
        function runTokens(pattern, flags, pos, scope, context) {
            var i = tokens.length;
            var leadChar = pattern.charAt(pos);
            var result = null;
            var match;
            var t;

            // Run in reverse insertion order
            while (i--) {
                t = tokens[i];
                if (
                    (t.leadChar && t.leadChar !== leadChar) ||
                    (t.scope !== scope && t.scope !== 'all') ||
                    (t.flag && flags.indexOf(t.flag) === -1)
                ) {
                    continue;
                }

                match = XRegExp.exec(pattern, t.regex, pos, 'sticky');
                if (match) {
                    result = {
                        matchLength: match[0].length,
                        output: t.handler.call(context, match, scope, flags),
                        reparse: t.reparse
                    };
                    // Finished with token tests
                    break;
                }
            }

            return result;
        }

        /**
         * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to
         * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if
         * the Unicode Base addon is not available, since flag A is registered by that addon.
         *
         * @private
         * @param {Boolean} on `true` to enable; `false` to disable.
         */
        function setAstral(on) {
            features.astral = on;
        }

        /**
         * Enables or disables native method overrides.
         *
         * @private
         * @param {Boolean} on `true` to enable; `false` to disable.
         */
        function setNatives(on) {
            RegExp.prototype.exec = (on ? fixed : nativ).exec;
            RegExp.prototype.test = (on ? fixed : nativ).test;
            String.prototype.match = (on ? fixed : nativ).match;
            String.prototype.replace = (on ? fixed : nativ).replace;
            String.prototype.split = (on ? fixed : nativ).split;

            features.natives = on;
        }

        /**
         * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow
         * the ES5 abstract operation `ToObject`.
         *
         * @private
         * @param {*} value Object to check and return.
         * @returns {*} The provided object.
         */
        function toObject(value) {
            // null or undefined
            if (value == null) {
                throw new TypeError('Cannot convert null or undefined to object');
            }

            return value;
        }

// ==--------------------------==
// Constructor
// ==--------------------------==

        /**
         * Creates an extended regular expression object for matching text with a pattern. Differs from a
         * native regular expression in that additional syntax and flags are supported. The returned object
         * is in fact a native `RegExp` and works with all native methods.
         *
         * @class XRegExp
         * @constructor
         * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.
         * @param {String} [flags] Any combination of flags.
         *   Native flags:
         *     - `g` - global
         *     - `i` - ignore case
         *     - `m` - multiline anchors
         *     - `u` - unicode (ES6)
         *     - `y` - sticky (Firefox 3+, ES6)
         *   Additional XRegExp flags:
         *     - `n` - explicit capture
         *     - `s` - dot matches all (aka singleline)
         *     - `x` - free-spacing and line comments (aka extended)
         *     - `A` - astral (requires the Unicode Base addon)
         *   Flags cannot be provided when constructing one `RegExp` from another.
         * @returns {RegExp} Extended regular expression object.
         * @example
         *
         * // With named capture and flag x
         * XRegExp('(?<year>  [0-9]{4} ) -?  # year  \n\
         *          (?<month> [0-9]{2} ) -?  # month \n\
         *          (?<day>   [0-9]{2} )     # day   ', 'x');
         *
         * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)
         * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and
         * // have fresh `lastIndex` properties (set to zero).
         * XRegExp(/regex/);
         */
        function XRegExp(pattern, flags) {
            if (XRegExp.isRegExp(pattern)) {
                if (flags !== undefined) {
                    throw new TypeError('Cannot supply flags when copying a RegExp');
                }
                return copyRegex(pattern);
            }

            // Copy the argument behavior of `RegExp`
            pattern = pattern === undefined ? '' : String(pattern);
            flags = flags === undefined ? '' : String(flags);

            if (XRegExp.isInstalled('astral') && flags.indexOf('A') === -1) {
                // This causes an error to be thrown if the Unicode Base addon is not available
                flags += 'A';
            }

            if (!patternCache[pattern]) {
                patternCache[pattern] = {};
            }

            if (!patternCache[pattern][flags]) {
                var context = {
                    hasNamedCapture: false,
                    captureNames: []
                };
                var scope = defaultScope;
                var output = '';
                var pos = 0;
                var result;

                // Check for flag-related errors, and strip/apply flags in a leading mode modifier
                var applied = prepareFlags(pattern, flags);
                var appliedPattern = applied.pattern;
                var appliedFlags = applied.flags;

                // Use XRegExp's tokens to translate the pattern to a native regex pattern.
                // `appliedPattern.length` may change on each iteration if tokens use `reparse`
                while (pos < appliedPattern.length) {
                    do {
                        // Check for custom tokens at the current position
                        result = runTokens(appliedPattern, appliedFlags, pos, scope, context);
                        // If the matched token used the `reparse` option, splice its output into the
                        // pattern before running tokens again at the same position
                        if (result && result.reparse) {
                            appliedPattern = appliedPattern.slice(0, pos) +
                                result.output +
                                appliedPattern.slice(pos + result.matchLength);
                        }
                    } while (result && result.reparse);

                    if (result) {
                        output += result.output;
                        pos += (result.matchLength || 1);
                    } else {
                        // Get the native token at the current position
                        var token = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky')[0];
                        output += token;
                        pos += token.length;
                        if (token === '[' && scope === defaultScope) {
                            scope = classScope;
                        } else if (token === ']' && scope === classScope) {
                            scope = defaultScope;
                        }
                    }
                }

                patternCache[pattern][flags] = {
                    // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty
                    // groups are sometimes inserted during regex transpilation in order to keep tokens
                    // separated. However, more than one empty group in a row is never needed.
                    pattern: nativ.replace.call(output, /(?:\(\?:\))+/g, '(?:)'),
                    // Strip all but native flags
                    flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),
                    // `context.captureNames` has an item for each capturing group, even if unnamed
                    captures: context.hasNamedCapture ? context.captureNames : null
                };
            }

            var generated = patternCache[pattern][flags];
            return augment(
                new RegExp(generated.pattern, generated.flags),
                generated.captures,
                pattern,
                flags
            );
        }

// Add `RegExp.prototype` to the prototype chain
        XRegExp.prototype = new RegExp();

// ==--------------------------==
// Public properties
// ==--------------------------==

        /**
         * The XRegExp version number as a string containing three dot-separated parts. For example,
         * '2.0.0-beta-3'.
         *
         * @static
         * @memberOf XRegExp
         * @type String
         */
        XRegExp.version = '3.2.0';

// ==--------------------------==
// Public methods
// ==--------------------------==

// Intentionally undocumented; used in tests and addons
        XRegExp._clipDuplicates = clipDuplicates;
        XRegExp._hasNativeFlag = hasNativeFlag;
        XRegExp._dec = dec;
        XRegExp._hex = hex;
        XRegExp._pad4 = pad4;

        /**
         * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to
         * create XRegExp addons. If more than one token can match the same string, the last added wins.
         *
         * @memberOf XRegExp
         * @param {RegExp} regex Regex object that matches the new token.
         * @param {Function} handler Function that returns a new pattern string (using native regex syntax)
         *   to replace the matched token within all future XRegExp regexes. Has access to persistent
         *   properties of the regex being built, through `this`. Invoked with three arguments:
         *   - The match array, with named backreference properties.
         *   - The regex scope where the match was found: 'default' or 'class'.
         *   - The flags used by the regex, including any flags in a leading mode modifier.
         *   The handler function becomes part of the XRegExp construction process, so be careful not to
         *   construct XRegExps within the function or you will trigger infinite recursion.
         * @param {Object} [options] Options object with optional properties:
         *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'.
         *   - `flag` {String} Single-character flag that triggers the token. This also registers the
         *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.
         *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are
         *     not required to trigger the token. This registers the flags, to prevent XRegExp from
         *     throwing an 'unknown flag' error when any of the flags are used.
         *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as
         *     final, and instead be reparseable by other tokens (including the current token). Allows
         *     token chaining or deferring.
         *   - `leadChar` {String} Single character that occurs at the beginning of any successful match
         *     of the token (not always applicable). This doesn't change the behavior of the token unless
         *     you provide an erroneous value. However, providing it can increase the token's performance
         *     since the token can be skipped at any positions where this character doesn't appear.
         * @example
         *
         * // Basic usage: Add \a for the ALERT control code
         * XRegExp.addToken(
         *   /\\a/,
         *   function() {return '\\x07';},
         *   {scope: 'all'}
         * );
         * XRegExp('\\a[\\a-\\n]+').test('\x07\n\x07'); // -> true
         *
         * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers.
         * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of
         * // character classes only)
         * XRegExp.addToken(
         *   /([?*+]|{\d+(?:,\d*)?})(\??)/,
         *   function(match) {return match[1] + (match[2] ? '' : '?');},
         *   {flag: 'U'}
         * );
         * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'
         * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'
         */
        XRegExp.addToken = function(regex, handler, options) {
            options = options || {};
            var optionalFlags = options.optionalFlags;
            var i;

            if (options.flag) {
                registerFlag(options.flag);
            }

            if (optionalFlags) {
                optionalFlags = nativ.split.call(optionalFlags, '');
                for (i = 0; i < optionalFlags.length; ++i) {
                    registerFlag(optionalFlags[i]);
                }
            }

            // Add to the private list of syntax tokens
            tokens.push({
                regex: copyRegex(regex, {
                    addG: true,
                    addY: hasNativeY,
                    isInternalOnly: true
                }),
                handler: handler,
                scope: options.scope || defaultScope,
                flag: options.flag,
                reparse: options.reparse,
                leadChar: options.leadChar
            });

            // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags
            // might now produce different results
            XRegExp.cache.flush('patterns');
        };

        /**
         * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with
         * the same pattern and flag combination, the cached copy of the regex is returned.
         *
         * @memberOf XRegExp
         * @param {String} pattern Regex pattern string.
         * @param {String} [flags] Any combination of XRegExp flags.
         * @returns {RegExp} Cached XRegExp object.
         * @example
         *
         * while (match = XRegExp.cache('.', 'gs').exec(str)) {
 *   // The regex is compiled once only
 * }
         */
        XRegExp.cache = function(pattern, flags) {
            if (!regexCache[pattern]) {
                regexCache[pattern] = {};
            }
            return regexCache[pattern][flags] || (
                regexCache[pattern][flags] = XRegExp(pattern, flags)
            );
        };

// Intentionally undocumented; used in tests
        XRegExp.cache.flush = function(cacheName) {
            if (cacheName === 'patterns') {
                // Flush the pattern cache used by the `XRegExp` constructor
                patternCache = {};
            } else {
                // Flush the regex cache populated by `XRegExp.cache`
                regexCache = {};
            }
        };

        /**
         * Escapes any regular expression metacharacters, for use when matching literal strings. The result
         * can safely be used at any point within a regex that uses any flags.
         *
         * @memberOf XRegExp
         * @param {String} str String to escape.
         * @returns {String} String with regex metacharacters escaped.
         * @example
         *
         * XRegExp.escape('Escaped? <.>');
         * // -> 'Escaped\?\ <\.>'
         */
        XRegExp.escape = function(str) {
            return nativ.replace.call(toObject(str), /[-\[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
        };

        /**
         * Executes a regex search in a specified string. Returns a match array or `null`. If the provided
         * regex uses named capture, named backreference properties are included on the match array.
         * Optional `pos` and `sticky` arguments specify the search start position, and whether the match
         * must start at the specified position only. The `lastIndex` property of the provided regex is not
         * used, but is updated for compatibility. Also fixes browser bugs compared to the native
         * `RegExp.prototype.exec` and can be used reliably cross-browser.
         *
         * @memberOf XRegExp
         * @param {String} str String to search.
         * @param {RegExp} regex Regex to search with.
         * @param {Number} [pos=0] Zero-based index at which to start the search.
         * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position
         *   only. The string `'sticky'` is accepted as an alternative to `true`.
         * @returns {Array} Match array with named backreference properties, or `null`.
         * @example
         *
         * // Basic use, with named backreference
         * var match = XRegExp.exec('U+2620', XRegExp('U\\+(?<hex>[0-9A-F]{4})'));
         * match.hex; // -> '2620'
         *
         * // With pos and sticky, in a loop
         * var pos = 2, result = [], match;
         * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\d)>/, pos, 'sticky')) {
 *   result.push(match[1]);
 *   pos = match.index + match[0].length;
 * }
         * // result -> ['2', '3', '4']
         */
        XRegExp.exec = function(str, regex, pos, sticky) {
            var cacheKey = 'g';
            var addY = false;
            var fakeY = false;
            var match;
            var r2;

            addY = hasNativeY && !!(sticky || (regex.sticky && sticky !== false));
            if (addY) {
                cacheKey += 'y';
            } else if (sticky) {
                // Simulate sticky matching by appending an empty capture to the original regex. The
                // resulting regex will succeed no matter what at the current index (set with `lastIndex`),
                // and will not search the rest of the subject string. We'll know that the original regex
                // has failed if that last capture is `''` rather than `undefined` (i.e., if that last
                // capture participated in the match).
                fakeY = true;
                cacheKey += 'FakeY';
            }

            regex[REGEX_DATA] = regex[REGEX_DATA] || {};

            // Shares cached copies with `XRegExp.match`/`replace`
            r2 = regex[REGEX_DATA][cacheKey] || (
                regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
                    addG: true,
                    addY: addY,
                    source: fakeY ? regex.source + '|()' : undefined,
                    removeY: sticky === false,
                    isInternalOnly: true
                })
            );

            pos = pos || 0;
            r2.lastIndex = pos;

            // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.
            match = fixed.exec.call(r2, str);

            // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means
            // the original regexp failed (see above).
            if (fakeY && match && match.pop() === '') {
                match = null;
            }

            if (regex.global) {
                regex.lastIndex = match ? r2.lastIndex : 0;
            }

            return match;
        };

        /**
         * Executes a provided function once per regex match. Searches always start at the beginning of the
         * string and continue until the end, regardless of the state of the regex's `global` property and
         * initial `lastIndex`.
         *
         * @memberOf XRegExp
         * @param {String} str String to search.
         * @param {RegExp} regex Regex to search with.
         * @param {Function} callback Function to execute for each match. Invoked with four arguments:
         *   - The match array, with named backreference properties.
         *   - The zero-based match index.
         *   - The string being traversed.
         *   - The regex object being used to traverse the string.
         * @example
         *
         * // Extracts every other digit from a string
         * var evens = [];
         * XRegExp.forEach('1a2345', /\d/, function(match, i) {
 *   if (i % 2) evens.push(+match[0]);
 * });
         * // evens -> [2, 4]
         */
        XRegExp.forEach = function(str, regex, callback) {
            var pos = 0;
            var i = -1;
            var match;

            while ((match = XRegExp.exec(str, regex, pos))) {
                // Because `regex` is provided to `callback`, the function could use the deprecated/
                // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`
                // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,
                // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of
                // regexes, mutating the regex will not have any effect on the iteration or matched strings,
                // which is a nice side effect that brings extra safety.
                callback(match, ++i, str, regex);

                pos = match.index + (match[0].length || 1);
            }
        };

        /**
         * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with
         * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native
         * regexes are not recompiled using XRegExp syntax.
         *
         * @memberOf XRegExp
         * @param {RegExp} regex Regex to globalize.
         * @returns {RegExp} Copy of the provided regex with flag `g` added.
         * @example
         *
         * var globalCopy = XRegExp.globalize(/regex/);
         * globalCopy.global; // -> true
         */
        XRegExp.globalize = function(regex) {
            return copyRegex(regex, {addG: true});
        };

        /**
         * Installs optional features according to the specified options. Can be undone using
         * `XRegExp.uninstall`.
         *
         * @memberOf XRegExp
         * @param {Object|String} options Options object or string.
         * @example
         *
         * // With an options object
         * XRegExp.install({
 *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)
 *   astral: true,
 *
 *   // DEPRECATED: Overrides native regex methods with fixed/extended versions
 *   natives: true
 * });
         *
         * // With an options string
         * XRegExp.install('astral natives');
         */
        XRegExp.install = function(options) {
            options = prepareOptions(options);

            if (!features.astral && options.astral) {
                setAstral(true);
            }

            if (!features.natives && options.natives) {
                setNatives(true);
            }
        };

        /**
         * Checks whether an individual optional feature is installed.
         *
         * @memberOf XRegExp
         * @param {String} feature Name of the feature to check. One of:
         *   - `astral`
         *   - `natives`
         * @returns {Boolean} Whether the feature is installed.
         * @example
         *
         * XRegExp.isInstalled('astral');
         */
        XRegExp.isInstalled = function(feature) {
            return !!(features[feature]);
        };

        /**
         * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes
         * created in another frame, when `instanceof` and `constructor` checks would fail.
         *
         * @memberOf XRegExp
         * @param {*} value Object to check.
         * @returns {Boolean} Whether the object is a `RegExp` object.
         * @example
         *
         * XRegExp.isRegExp('string'); // -> false
         * XRegExp.isRegExp(/regex/i); // -> true
         * XRegExp.isRegExp(RegExp('^', 'm')); // -> true
         * XRegExp.isRegExp(XRegExp('(?s).')); // -> true
         */
        XRegExp.isRegExp = function(value) {
            return toString.call(value) === '[object RegExp]';
            //return isType(value, 'RegExp');
        };

        /**
         * Returns the first matched string, or in global mode, an array containing all matched strings.
         * This is essentially a more convenient re-implementation of `String.prototype.match` that gives
         * the result types you actually want (string instead of `exec`-style array in match-first mode,
         * and an empty array instead of `null` when no matches are found in match-all mode). It also lets
         * you override flag g and ignore `lastIndex`, and fixes browser bugs.
         *
         * @memberOf XRegExp
         * @param {String} str String to search.
         * @param {RegExp} regex Regex to search with.
         * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to
         *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,
         *   `scope` is 'all'.
         * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all
         *   mode: Array of all matched strings, or an empty array.
         * @example
         *
         * // Match first
         * XRegExp.match('abc', /\w/); // -> 'a'
         * XRegExp.match('abc', /\w/g, 'one'); // -> 'a'
         * XRegExp.match('abc', /x/g, 'one'); // -> null
         *
         * // Match all
         * XRegExp.match('abc', /\w/g); // -> ['a', 'b', 'c']
         * XRegExp.match('abc', /\w/, 'all'); // -> ['a', 'b', 'c']
         * XRegExp.match('abc', /x/, 'all'); // -> []
         */
        XRegExp.match = function(str, regex, scope) {
            var global = (regex.global && scope !== 'one') || scope === 'all';
            var cacheKey = ((global ? 'g' : '') + (regex.sticky ? 'y' : '')) || 'noGY';
            var result;
            var r2;

            regex[REGEX_DATA] = regex[REGEX_DATA] || {};

            // Shares cached copies with `XRegExp.exec`/`replace`
            r2 = regex[REGEX_DATA][cacheKey] || (
                regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
                    addG: !!global,
                    removeG: scope === 'one',
                    isInternalOnly: true
                })
            );

            result = nativ.match.call(toObject(str), r2);

            if (regex.global) {
                regex.lastIndex = (
                    (scope === 'one' && result) ?
                        // Can't use `r2.lastIndex` since `r2` is nonglobal in this case
                        (result.index + result[0].length) : 0
                );
            }

            return global ? (result || []) : (result && result[0]);
        };

        /**
         * Retrieves the matches from searching a string using a chain of regexes that successively search
         * within previous matches. The provided `chain` array can contain regexes and or objects with
         * `regex` and `backref` properties. When a backreference is specified, the named or numbered
         * backreference is passed forward to the next regex or returned.
         *
         * @memberOf XRegExp
         * @param {String} str String to search.
         * @param {Array} chain Regexes that each search for matches within preceding results.
         * @returns {Array} Matches by the last regex in the chain, or an empty array.
         * @example
         *
         * // Basic usage; matches numbers within <b> tags
         * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [
         *   XRegExp('(?is)<b>.*?</b>'),
         *   /\d+/
         * ]);
         * // -> ['2', '4', '56']
         *
         * // Passing forward and returning specific backreferences
         * html = '<a href="http://xregexp.com/api/">XRegExp</a>\
         *         <a href="http://www.google.com/">Google</a>';
         * XRegExp.matchChain(html, [
         *   {regex: /<a href="([^"]+)">/i, backref: 1},
         *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}
         * ]);
         * // -> ['xregexp.com', 'www.google.com']
         */
        XRegExp.matchChain = function(str, chain) {
            return (function recurseChain(values, level) {
                var item = chain[level].regex ? chain[level] : {regex: chain[level]};
                var matches = [];

                function addMatch(match) {
                    if (item.backref) {
                        // Safari 4.0.5 (but not 5.0.5+) inappropriately uses sparse arrays to hold the
                        // `undefined`s for backreferences to nonparticipating capturing groups. In such
                        // cases, a `hasOwnProperty` or `in` check on its own would inappropriately throw
                        // the exception, so also check if the backreference is a number that is within the
                        // bounds of the array.
                        if (!(match.hasOwnProperty(item.backref) || +item.backref < match.length)) {
                            throw new ReferenceError('Backreference to undefined group: ' + item.backref);
                        }

                        matches.push(match[item.backref] || '');
                    } else {
                        matches.push(match[0]);
                    }
                }

                for (var i = 0; i < values.length; ++i) {
                    XRegExp.forEach(values[i], item.regex, addMatch);
                }

                return ((level === chain.length - 1) || !matches.length) ?
                    matches :
                    recurseChain(matches, level + 1);
            }([str], 0));
        };

        /**
         * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string
         * or regex, and the replacement can be a string or a function to be called for each match. To
         * perform a global search and replace, use the optional `scope` argument or include flag g if using
         * a regex. Replacement strings can use `${n}` for named and numbered backreferences. Replacement
         * functions can use named backreferences via `arguments[0].name`. Also fixes browser bugs compared
         * to the native `String.prototype.replace` and can be used reliably cross-browser.
         *
         * @memberOf XRegExp
         * @param {String} str String to search.
         * @param {RegExp|String} search Search pattern to be replaced.
         * @param {String|Function} replacement Replacement string or a function invoked to create it.
         *   Replacement strings can include special replacement syntax:
         *     - $$ - Inserts a literal $ character.
         *     - $&, $0 - Inserts the matched substring.
         *     - $` - Inserts the string that precedes the matched substring (left context).
         *     - $' - Inserts the string that follows the matched substring (right context).
         *     - $n, $nn - Where n/nn are digits referencing an existent capturing group, inserts
         *       backreference n/nn.
         *     - ${n} - Where n is a name or any number of digits that reference an existent capturing
         *       group, inserts backreference n.
         *   Replacement functions are invoked with three or more arguments:
         *     - The matched substring (corresponds to $& above). Named backreferences are accessible as
         *       properties of this first argument.
         *     - 0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).
         *     - The zero-based index of the match within the total search string.
         *     - The total string being searched.
         * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not
         *   explicitly specified and using a regex with flag g, `scope` is 'all'.
         * @returns {String} New string with one or all matches replaced.
         * @example
         *
         * // Regex search, using named backreferences in replacement string
         * var name = XRegExp('(?<first>\\w+) (?<last>\\w+)');
         * XRegExp.replace('John Smith', name, '${last}, ${first}');
         * // -> 'Smith, John'
         *
         * // Regex search, using named backreferences in replacement function
         * XRegExp.replace('John Smith', name, function(match) {
 *   return match.last + ', ' + match.first;
 * });
         * // -> 'Smith, John'
         *
         * // String search, with replace-all
         * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');
         * // -> 'XRegExp builds XRegExps'
         */
        XRegExp.replace = function(str, search, replacement, scope) {
            var isRegex = XRegExp.isRegExp(search);
            var global = (search.global && scope !== 'one') || scope === 'all';
            var cacheKey = ((global ? 'g' : '') + (search.sticky ? 'y' : '')) || 'noGY';
            var s2 = search;
            var result;

            if (isRegex) {
                search[REGEX_DATA] = search[REGEX_DATA] || {};

                // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s
                // `lastIndex` isn't updated *during* replacement iterations
                s2 = search[REGEX_DATA][cacheKey] || (
                    search[REGEX_DATA][cacheKey] = copyRegex(search, {
                        addG: !!global,
                        removeG: scope === 'one',
                        isInternalOnly: true
                    })
                );
            } else if (global) {
                s2 = new RegExp(XRegExp.escape(String(search)), 'g');
            }

            // Fixed `replace` required for named backreferences, etc.
            result = fixed.replace.call(toObject(str), s2, replacement);

            if (isRegex && search.global) {
                // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)
                search.lastIndex = 0;
            }

            return result;
        };

        /**
         * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an
         * array of replacement details. Later replacements operate on the output of earlier replacements.
         * Replacement details are accepted as an array with a regex or string to search for, the
         * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp
         * replacement text syntax, which supports named backreference properties via `${name}`.
         *
         * @memberOf XRegExp
         * @param {String} str String to search.
         * @param {Array} replacements Array of replacement detail arrays.
         * @returns {String} New string with all replacements.
         * @example
         *
         * str = XRegExp.replaceEach(str, [
         *   [XRegExp('(?<name>a)'), 'z${name}'],
         *   [/b/gi, 'y'],
         *   [/c/g, 'x', 'one'], // scope 'one' overrides /g
         *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g
         *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings
         *   [/f/g, function($0) {
 *     return $0.toUpperCase();
 *   }]
         * ]);
         */
        XRegExp.replaceEach = function(str, replacements) {
            var i;
            var r;

            for (i = 0; i < replacements.length; ++i) {
                r = replacements[i];
                str = XRegExp.replace(str, r[0], r[1], r[2]);
            }

            return str;
        };

        /**
         * Splits a string into an array of strings using a regex or string separator. Matches of the
         * separator are not included in the result array. However, if `separator` is a regex that contains
         * capturing groups, backreferences are spliced into the result each time `separator` is matched.
         * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
         * cross-browser.
         *
         * @memberOf XRegExp
         * @param {String} str String to split.
         * @param {RegExp|String} separator Regex or string to use for separating the string.
         * @param {Number} [limit] Maximum number of items to include in the result array.
         * @returns {Array} Array of substrings.
         * @example
         *
         * // Basic use
         * XRegExp.split('a b c', ' ');
         * // -> ['a', 'b', 'c']
         *
         * // With limit
         * XRegExp.split('a b c', ' ', 2);
         * // -> ['a', 'b']
         *
         * // Backreferences in result array
         * XRegExp.split('..word1..', /([a-z]+)(\d+)/i);
         * // -> ['..', 'word', '1', '..']
         */
        XRegExp.split = function(str, separator, limit) {
            return fixed.split.call(toObject(str), separator, limit);
        };

        /**
         * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and
         * `sticky` arguments specify the search start position, and whether the match must start at the
         * specified position only. The `lastIndex` property of the provided regex is not used, but is
         * updated for compatibility. Also fixes browser bugs compared to the native
         * `RegExp.prototype.test` and can be used reliably cross-browser.
         *
         * @memberOf XRegExp
         * @param {String} str String to search.
         * @param {RegExp} regex Regex to search with.
         * @param {Number} [pos=0] Zero-based index at which to start the search.
         * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position
         *   only. The string `'sticky'` is accepted as an alternative to `true`.
         * @returns {Boolean} Whether the regex matched the provided value.
         * @example
         *
         * // Basic use
         * XRegExp.test('abc', /c/); // -> true
         *
         * // With pos and sticky
         * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false
         * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true
         */
        XRegExp.test = function(str, regex, pos, sticky) {
            // Do this the easy way :-)
            return !!XRegExp.exec(str, regex, pos, sticky);
        };

        /**
         * Uninstalls optional features according to the specified options. All optional features start out
         * uninstalled, so this is used to undo the actions of `XRegExp.install`.
         *
         * @memberOf XRegExp
         * @param {Object|String} options Options object or string.
         * @example
         *
         * // With an options object
         * XRegExp.uninstall({
 *   // Disables support for astral code points in Unicode addons
 *   astral: true,
 *
 *   // DEPRECATED: Restores native regex methods
 *   natives: true
 * });
         *
         * // With an options string
         * XRegExp.uninstall('astral natives');
         */
        XRegExp.uninstall = function(options) {
            options = prepareOptions(options);

            if (features.astral && options.astral) {
                setAstral(false);
            }

            if (features.natives && options.natives) {
                setNatives(false);
            }
        };

        /**
         * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as
         * regex objects or strings. Metacharacters are escaped in patterns provided as strings.
         * Backreferences in provided regex objects are automatically renumbered to work correctly within
         * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the
         * `flags` argument.
         *
         * @memberOf XRegExp
         * @param {Array} patterns Regexes and strings to combine.
         * @param {String} [flags] Any combination of XRegExp flags.
         * @param {Object} [options] Options object with optional properties:
         *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'.
         * @returns {RegExp} Union of the provided regexes and strings.
         * @example
         *
         * XRegExp.union(['a+b*c', /(dogs)\1/, /(cats)\1/], 'i');
         * // -> /a\+b\*c|(dogs)\1|(cats)\2/i
         *
         * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});
         * // -> /manbearpig/i
         */
        XRegExp.union = function(patterns, flags, options) {
            options = options || {};
            var conjunction = options.conjunction || 'or';
            var numCaptures = 0;
            var numPriorCaptures;
            var captureNames;

            function rewrite(match, paren, backref) {
                var name = captureNames[numCaptures - numPriorCaptures];

                // Capturing group
                if (paren) {
                    ++numCaptures;
                    // If the current capture has a name, preserve the name
                    if (name) {
                        return '(?<' + name + '>';
                    }
                    // Backreference
                } else if (backref) {
                    // Rewrite the backreference
                    return '\\' + (+backref + numPriorCaptures);
                }

                return match;
            }

            if (!(isType(patterns, 'Array') && patterns.length)) {
                throw new TypeError('Must provide a nonempty array of patterns to merge');
            }

            var parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
            var output = [];
            var pattern;
            for (var i = 0; i < patterns.length; ++i) {
                pattern = patterns[i];

                if (XRegExp.isRegExp(pattern)) {
                    numPriorCaptures = numCaptures;
                    captureNames = (pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames) || [];

                    // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are
                    // independently valid; helps keep this simple. Named captures are put back
                    output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));
                } else {
                    output.push(XRegExp.escape(pattern));
                }
            }

            var separator = conjunction === 'none' ? '' : '|';
            return XRegExp(output.join(separator), flags);
        };

// ==--------------------------==
// Fixed/extended native methods
// ==--------------------------==

        /**
         * Adds named capture support (with backreferences returned as `result.name`), and fixes browser
         * bugs in the native `RegExp.prototype.exec`. Calling `XRegExp.install('natives')` uses this to
         * override the native method. Use via `XRegExp.exec` without overriding natives.
         *
         * @memberOf RegExp
         * @param {String} str String to search.
         * @returns {Array} Match array with named backreference properties, or `null`.
         */
        fixed.exec = function(str) {
            var origLastIndex = this.lastIndex;
            var match = nativ.exec.apply(this, arguments);
            var name;
            var r2;
            var i;

            if (match) {
                // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing
                // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9
                // in standards mode follows the spec.
                if (!correctExecNpcg && match.length > 1 && indexOf(match, '') > -1) {
                    r2 = copyRegex(this, {
                        removeG: true,
                        isInternalOnly: true
                    });
                    // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed
                    // matching due to characters outside the match
                    nativ.replace.call(String(str).slice(match.index), r2, function() {
                        var len = arguments.length;
                        var i;
                        // Skip index 0 and the last 2
                        for (i = 1; i < len - 2; ++i) {
                            if (arguments[i] === undefined) {
                                match[i] = undefined;
                            }
                        }
                    });
                }

                // Attach named capture properties
                if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {
                    // Skip index 0
                    for (i = 1; i < match.length; ++i) {
                        name = this[REGEX_DATA].captureNames[i - 1];
                        if (name) {
                            match[name] = match[i];
                        }
                    }
                }

                // Fix browsers that increment `lastIndex` after zero-length matches
                if (this.global && !match[0].length && (this.lastIndex > match.index)) {
                    this.lastIndex = match.index;
                }
            }

            if (!this.global) {
                // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)
                this.lastIndex = origLastIndex;
            }

            return match;
        };

        /**
         * Fixes browser bugs in the native `RegExp.prototype.test`. Calling `XRegExp.install('natives')`
         * uses this to override the native method.
         *
         * @memberOf RegExp
         * @param {String} str String to search.
         * @returns {Boolean} Whether the regex matched the provided value.
         */
        fixed.test = function(str) {
            // Do this the easy way :-)
            return !!fixed.exec.call(this, str);
        };

        /**
         * Adds named capture support (with backreferences returned as `result.name`), and fixes browser
         * bugs in the native `String.prototype.match`. Calling `XRegExp.install('natives')` uses this to
         * override the native method.
         *
         * @memberOf String
         * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.
         * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,
         *   the result of calling `regex.exec(this)`.
         */
        fixed.match = function(regex) {
            var result;

            if (!XRegExp.isRegExp(regex)) {
                // Use the native `RegExp` rather than `XRegExp`
                regex = new RegExp(regex);
            } else if (regex.global) {
                result = nativ.match.apply(this, arguments);
                // Fixes IE bug
                regex.lastIndex = 0;

                return result;
            }

            return fixed.exec.call(regex, toObject(this));
        };

        /**
         * Adds support for `${n}` tokens for named and numbered backreferences in replacement text, and
         * provides named backreferences to replacement functions as `arguments[0].name`. Also fixes browser
         * bugs in replacement text syntax when performing a replacement using a nonregex search value, and
         * the value of a replacement regex's `lastIndex` property during replacement iterations and upon
         * completion. Calling `XRegExp.install('natives')` uses this to override the native method. Note
         * that this doesn't support SpiderMonkey's proprietary third (`flags`) argument. Use via
         * `XRegExp.replace` without overriding natives.
         *
         * @memberOf String
         * @param {RegExp|String} search Search pattern to be replaced.
         * @param {String|Function} replacement Replacement string or a function invoked to create it.
         * @returns {String} New string with one or all matches replaced.
         */
        fixed.replace = function(search, replacement) {
            var isRegex = XRegExp.isRegExp(search);
            var origLastIndex;
            var captureNames;
            var result;

            if (isRegex) {
                if (search[REGEX_DATA]) {
                    captureNames = search[REGEX_DATA].captureNames;
                }
                // Only needed if `search` is nonglobal
                origLastIndex = search.lastIndex;
            } else {
                search += ''; // Type-convert
            }

            // Don't use `typeof`; some older browsers return 'function' for regex objects
            if (isType(replacement, 'Function')) {
                // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement
                // functions isn't type-converted to a string
                result = nativ.replace.call(String(this), search, function() {
                    var args = arguments;
                    var i;
                    if (captureNames) {
                        // Change the `arguments[0]` string primitive to a `String` object that can store
                        // properties. This really does need to use `String` as a constructor
                        args[0] = new String(args[0]);
                        // Store named backreferences on the first argument
                        for (i = 0; i < captureNames.length; ++i) {
                            if (captureNames[i]) {
                                args[0][captureNames[i]] = args[i + 1];
                            }
                        }
                    }
                    // Update `lastIndex` before calling `replacement`. Fixes IE, Chrome, Firefox, Safari
                    // bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)
                    if (isRegex && search.global) {
                        search.lastIndex = args[args.length - 2] + args[0].length;
                    }
                    // ES6 specs the context for replacement functions as `undefined`
                    return replacement.apply(undefined, args);
                });
            } else {
                // Ensure that the last value of `args` will be a string when given nonstring `this`,
                // while still throwing on null or undefined context
                result = nativ.replace.call(this == null ? this : String(this), search, function() {
                    // Keep this function's `arguments` available through closure
                    var args = arguments;
                    return nativ.replace.call(String(replacement), replacementToken, function($0, $1, $2) {
                        var n;
                        // Named or numbered backreference with curly braces
                        if ($1) {
                            // XRegExp behavior for `${n}`:
                            // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for the
                            //    entire match. Any number of leading zeros may be used.
                            // 2. Backreference to named capture `n`, if it exists and is not an integer
                            //    overridden by numbered capture. In practice, this does not overlap with
                            //    numbered capture since XRegExp does not allow named capture to use a bare
                            //    integer as the name.
                            // 3. If the name or number does not refer to an existing capturing group, it's
                            //    an error.
                            n = +$1; // Type-convert; drop leading zeros
                            if (n <= args.length - 3) {
                                return args[n] || '';
                            }
                            // Groups with the same name is an error, else would need `lastIndexOf`
                            n = captureNames ? indexOf(captureNames, $1) : -1;
                            if (n < 0) {
                                throw new SyntaxError('Backreference to undefined group ' + $0);
                            }
                            return args[n + 1] || '';
                        }
                        // Else, special variable or numbered backreference without curly braces
                        if ($2 === '$') { // $$
                            return '$';
                        }
                        if ($2 === '&' || +$2 === 0) { // $&, $0 (not followed by 1-9), $00
                            return args[0];
                        }
                        if ($2 === '`') { // $` (left context)
                            return args[args.length - 1].slice(0, args[args.length - 2]);
                        }
                        if ($2 === "'") { // $' (right context)
                            return args[args.length - 1].slice(args[args.length - 2] + args[0].length);
                        }
                        // Else, numbered backreference without curly braces
                        $2 = +$2; // Type-convert; drop leading zero
                        // XRegExp behavior for `$n` and `$nn`:
                        // - Backrefs end after 1 or 2 digits. Use `${..}` for more digits.
                        // - `$1` is an error if no capturing groups.
                        // - `$10` is an error if less than 10 capturing groups. Use `${1}0` instead.
                        // - `$01` is `$1` if at least one capturing group, else it's an error.
                        // - `$0` (not followed by 1-9) and `$00` are the entire match.
                        // Native behavior, for comparison:
                        // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.
                        // - `$1` is a literal `$1` if no capturing groups.
                        // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.
                        // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.
                        // - `$0` is a literal `$0`.
                        if (!isNaN($2)) {
                            if ($2 > args.length - 3) {
                                throw new SyntaxError('Backreference to undefined group ' + $0);
                            }
                            return args[$2] || '';
                        }
                        // `$` followed by an unsupported char is an error, unlike native JS
                        throw new SyntaxError('Invalid token ' + $0);
                    });
                });
            }

            if (isRegex) {
                if (search.global) {
                    // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)
                    search.lastIndex = 0;
                } else {
                    // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)
                    search.lastIndex = origLastIndex;
                }
            }

            return result;
        };

        /**
         * Fixes browser bugs in the native `String.prototype.split`. Calling `XRegExp.install('natives')`
         * uses this to override the native method. Use via `XRegExp.split` without overriding natives.
         *
         * @memberOf String
         * @param {RegExp|String} separator Regex or string to use for separating the string.
         * @param {Number} [limit] Maximum number of items to include in the result array.
         * @returns {Array} Array of substrings.
         */
        fixed.split = function(separator, limit) {
            if (!XRegExp.isRegExp(separator)) {
                // Browsers handle nonregex split correctly, so use the faster native method
                return nativ.split.apply(this, arguments);
            }

            var str = String(this);
            var output = [];
            var origLastIndex = separator.lastIndex;
            var lastLastIndex = 0;
            var lastLength;

            // Values for `limit`, per the spec:
            // If undefined: pow(2,32) - 1
            // If 0, Infinity, or NaN: 0
            // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);
            // If negative number: pow(2,32) - floor(abs(limit))
            // If other: Type-convert, then use the above rules
            // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless
            // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+
            limit = (limit === undefined ? -1 : limit) >>> 0;

            XRegExp.forEach(str, separator, function(match) {
                // This condition is not the same as `if (match[0].length)`
                if ((match.index + match[0].length) > lastLastIndex) {
                    output.push(str.slice(lastLastIndex, match.index));
                    if (match.length > 1 && match.index < str.length) {
                        Array.prototype.push.apply(output, match.slice(1));
                    }
                    lastLength = match[0].length;
                    lastLastIndex = match.index + lastLength;
                }
            });

            if (lastLastIndex === str.length) {
                if (!nativ.test.call(separator, '') || lastLength) {
                    output.push('');
                }
            } else {
                output.push(str.slice(lastLastIndex));
            }

            separator.lastIndex = origLastIndex;
            return output.length > limit ? output.slice(0, limit) : output;
        };

// ==--------------------------==
// Built-in syntax/flag tokens
// ==--------------------------==

        /*
 * Letter escapes that natively match literal characters: `\a`, `\A`, etc. These should be
 * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser
 * consistency and to reserve their syntax, but lets them be superseded by addons.
 */
        XRegExp.addToken(
            /\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4}|{[\dA-Fa-f]+})|x(?![\dA-Fa-f]{2}))/,
            function(match, scope) {
                // \B is allowed in default scope only
                if (match[1] === 'B' && scope === defaultScope) {
                    return match[0];
                }
                throw new SyntaxError('Invalid escape ' + match[0]);
            },
            {
                scope: 'all',
                leadChar: '\\'
            }
        );

        /*
 * Unicode code point escape with curly braces: `\u{N..}`. `N..` is any one or more digit
 * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag
 * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to
 * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior
 * if you follow a `\u{N..}` token that references a code point above U+FFFF with a quantifier, or
 * if you use the same in a character class.
 */
        XRegExp.addToken(
            /\\u{([\dA-Fa-f]+)}/,
            function(match, scope, flags) {
                var code = dec(match[1]);
                if (code > 0x10FFFF) {
                    throw new SyntaxError('Invalid Unicode code point ' + match[0]);
                }
                if (code <= 0xFFFF) {
                    // Converting to \uNNNN avoids needing to escape the literal character and keep it
                    // separate from preceding tokens
                    return '\\u' + pad4(hex(code));
                }
                // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling
                if (hasNativeU && flags.indexOf('u') > -1) {
                    return match[0];
                }
                throw new SyntaxError('Cannot use Unicode code point above \\u{FFFF} without flag u');
            },
            {
                scope: 'all',
                leadChar: '\\'
            }
        );

        /*
 * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency.
 * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because
 * character class endings can't be determined.
 */
        XRegExp.addToken(
            /\[(\^?)\]/,
            function(match) {
                // For cross-browser compatibility with ES3, convert [] to \b\B and [^] to [\s\S].
                // (?!) should work like \b\B, but is unreliable in some versions of Firefox
                return match[1] ? '[\\s\\S]' : '\\b\\B';
            },
            {leadChar: '['}
        );

        /*
 * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in
 * free-spacing mode (flag x).
 */
        XRegExp.addToken(
            /\(\?#[^)]*\)/,
            getContextualTokenSeparator,
            {leadChar: '('}
        );

        /*
 * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.
 */
        XRegExp.addToken(
            /\s+|#[^\n]*\n?/,
            getContextualTokenSeparator,
            {flag: 'x'}
        );

        /*
 * Dot, in dotall mode (aka singleline mode, flag s) only.
 */
        XRegExp.addToken(
            /\./,
            function() {
                return '[\\s\\S]';
            },
            {
                flag: 's',
                leadChar: '.'
            }
        );

        /*
 * Named backreference: `\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,
 * and $ only. Also allows numbered backreferences as `\k<n>`.
 */
        XRegExp.addToken(
            /\\k<([\w$]+)>/,
            function(match) {
                // Groups with the same name is an error, else would need `lastIndexOf`
                var index = isNaN(match[1]) ? (indexOf(this.captureNames, match[1]) + 1) : +match[1];
                var endIndex = match.index + match[0].length;
                if (!index || index > this.captureNames.length) {
                    throw new SyntaxError('Backreference to undefined group ' + match[0]);
                }
                // Keep backreferences separate from subsequent literal numbers. This avoids e.g.
                // inadvertedly changing `(?<n>)\k<n>1` to `()\11`.
                return '\\' + index + (
                    endIndex === match.input.length || isNaN(match.input.charAt(endIndex)) ?
                        '' : '(?:)'
                );
            },
            {leadChar: '\\'}
        );

        /*
 * Numbered backreference or octal, plus any following digits: `\0`, `\11`, etc. Octals except `\0`
 * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches
 * are returned unaltered. IE < 9 doesn't support backreferences above `\99` in regex syntax.
 */
        XRegExp.addToken(
            /\\(\d+)/,
            function(match, scope) {
                if (
                    !(
                        scope === defaultScope &&
                        /^[1-9]/.test(match[1]) &&
                        +match[1] <= this.captureNames.length
                    ) &&
                    match[1] !== '0'
                ) {
                    throw new SyntaxError('Cannot use octal escape or backreference to undefined group ' +
                        match[0]);
                }
                return match[0];
            },
            {
                scope: 'all',
                leadChar: '\\'
            }
        );

        /*
 * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the
 * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style
 * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively
 * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to
 * Python-style named capture as octals.
 */
        XRegExp.addToken(
            /\(\?P?<([\w$]+)>/,
            function(match) {
                // Disallow bare integers as names because named backreferences are added to match arrays
                // and therefore numeric properties may lead to incorrect lookups
                if (!isNaN(match[1])) {
                    throw new SyntaxError('Cannot use integer as capture name ' + match[0]);
                }
                if (match[1] === 'length' || match[1] === '__proto__') {
                    throw new SyntaxError('Cannot use reserved word as capture name ' + match[0]);
                }
                if (indexOf(this.captureNames, match[1]) > -1) {
                    throw new SyntaxError('Cannot use same name for multiple groups ' + match[0]);
                }
                this.captureNames.push(match[1]);
                this.hasNamedCapture = true;
                return '(';
            },
            {leadChar: '('}
        );

        /*
 * Capturing group; match the opening parenthesis only. Required for support of named capturing
 * groups. Also adds explicit capture mode (flag n).
 */
        XRegExp.addToken(
            /\((?!\?)/,
            function(match, scope, flags) {
                if (flags.indexOf('n') > -1) {
                    return '(?:';
                }
                this.captureNames.push(null);
                return '(';
            },
            {
                optionalFlags: 'n',
                leadChar: '('
            }
        );

        module.exports = XRegExp;

    },{}]},{},[8])(8)
});
(function(c){c.extend(c.fn,{validate:function(a){if(!this.length)return a&&a.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing"),void 0;var b=c.data(this[0],"validator");return b?b:(this.attr("novalidate","novalidate"),b=new c.validator(a,this[0]),c.data(this[0],"validator",b),b.settings.onsubmit&&(this.validateDelegate(":submit","click",function(a){b.settings.submitHandler&&(b.submitButton=a.target);c(a.target).hasClass("cancel")&&(b.cancelSubmit=!0);void 0!==
c(a.target).attr("formnovalidate")&&(b.cancelSubmit=!0)}),this.submit(function(a){function e(){var e;return b.settings.submitHandler?(b.submitButton&&(e=c("\x3cinput type\x3d'hidden'/\x3e").attr("name",b.submitButton.name).val(c(b.submitButton).val()).appendTo(b.currentForm)),b.settings.submitHandler.call(b,b.currentForm,a),b.submitButton&&e.remove(),!1):!0}return b.settings.debug&&a.preventDefault(),b.cancelSubmit?(b.cancelSubmit=!1,e()):b.form()?b.pendingRequest?(b.formSubmitted=!0,!1):e():(b.focusInvalid(),
!1)})),b)},valid:function(){if(c(this[0]).is("form"))return this.validate().form();var a=!0,b=c(this[0].form).validate();return this.each(function(){a=a&&b.element(this)}),a},removeAttrs:function(a){var b={},d=this;return c.each(a.split(/\s/),function(a,c){b[c]=d.attr(c);d.removeAttr(c)}),b},rules:function(a,b){var d=this[0];if(a){var e=c.data(d.form,"validator").settings,f=e.rules,g=c.validator.staticRules(d);switch(a){case "add":c.extend(g,c.validator.normalizeRule(b));delete g.messages;f[d.name]=
g;b.messages&&(e.messages[d.name]=c.extend(e.messages[d.name],b.messages));break;case "remove":if(!b)return delete f[d.name],g;var h={};return c.each(b.split(/\s/),function(a,b){h[b]=g[b];delete g[b]}),h}}d=c.validator.normalizeRules(c.extend({},c.validator.classRules(d),c.validator.attributeRules(d),c.validator.dataRules(d),c.validator.staticRules(d)),d);d.required&&(e=d.required,delete d.required,d=c.extend({required:e},d));return d}});c.extend(c.expr[":"],{blank:function(a){return!c.trim(""+c(a).val())},
filled:function(a){return!!c.trim(""+c(a).val())},unchecked:function(a){return!c(a).prop("checked")}});c.validator=function(a,b){this.settings=c.extend(!0,{},c.validator.defaults,a);this.currentForm=b;this.init()};c.validator.format=function(a,b){return 1===arguments.length?function(){var b=c.makeArray(arguments);return b.unshift(a),c.validator.format.apply(this,b)}:(2<arguments.length&&b.constructor!==Array&&(b=c.makeArray(arguments).slice(1)),b.constructor!==Array&&(b=[b]),c.each(b,function(b,c){a=
a.replace(RegExp("\\{"+b+"\\}","g"),function(){return c})}),a)};c.extend(c.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",validClass:"valid",errorElement:"label",focusInvalid:!0,errorContainer:c([]),errorLabelContainer:c([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(a){this.lastActive=a;this.settings.focusCleanup&&!this.blockFocusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,a,this.settings.errorClass,this.settings.validClass),
this.addWrapper(this.errorsFor(a)).hide())},onfocusout:function(a){this.checkable(a)||!(a.name in this.submitted)&&this.optional(a)||this.element(a)},onkeyup:function(a,b){(9!==b.which||""!==this.elementValue(a))&&(a.name in this.submitted||a===this.lastElement)&&this.element(a)},onclick:function(a){a.name in this.submitted?this.element(a):a.parentNode.name in this.submitted&&this.element(a.parentNode)},highlight:function(a,b,d){"radio"===a.type?this.findByName(a.name).addClass(b).removeClass(d):
c(a).addClass(b).removeClass(d)},unhighlight:function(a,b,d){"radio"===a.type?this.findByName(a.name).removeClass(b).addClass(d):c(a).removeClass(b).addClass(d)}},setDefaults:function(a){c.extend(c.validator.defaults,a)},messages:{required:"This field is required",remote:"Please fix this field",email:"Please enter a valid email address",url:"Please enter a valid URL",date:"Please enter a valid date",dateISO:"Please enter a valid date (ISO)",number:"Please enter a valid number",digits:"Please enter only digits",
creditcard:"Please enter a valid credit card number",equalTo:"Please enter the same value again",maxlength:c.validator.format("Please enter no more than {0} characters"),minlength:c.validator.format("Please enter at least {0} characters"),rangelength:c.validator.format("Please enter a value between {0} and {1} characters long"),range:c.validator.format("Please enter a value between {0} and {1}"),max:c.validator.format("Please enter a value less than or equal to {0}"),min:c.validator.format("Please enter a value greater than or equal to {0}")},
autoCreateRanges:!1,prototype:{init:function(){function a(a){var b=c.data(this[0].form,"validator"),d="on"+a.type.replace(/^validate/,"");b.settings[d]&&b.settings[d].call(b,this[0],a)}this.labelContainer=c(this.settings.errorLabelContainer);this.errorContext=this.labelContainer.length&&this.labelContainer||c(this.currentForm);this.containers=c(this.settings.errorContainer).add(this.settings.errorLabelContainer);this.submitted={};this.valueCache={};this.pendingRequest=0;this.pending={};this.invalid=
{};this.reset();var b=this.groups={};c.each(this.settings.groups,function(a,d){"string"==typeof d&&(d=d.split(/\s/));c.each(d,function(c,d){b[d]=a})});var d=this.settings.rules;c.each(d,function(a,b){d[a]=c.validator.normalizeRule(b)});c(this.currentForm).validateDelegate(":text, [type\x3d'password'], [type\x3d'file'], select, textarea, [type\x3d'number'], [type\x3d'search'] ,[type\x3d'tel'], [type\x3d'url'], [type\x3d'email'], [type\x3d'datetime'], [type\x3d'date'], [type\x3d'month'], [type\x3d'week'], [type\x3d'time'], [type\x3d'datetime-local'], [type\x3d'range'], [type\x3d'color'] ",
"focusin focusout keyup",a).validateDelegate("[type\x3d'radio'], [type\x3d'checkbox'], select, option","click",a);this.settings.invalidHandler&&c(this.currentForm).bind("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),c.extend(this.submitted,this.errorMap),this.invalid=c.extend({},this.errorMap),this.valid()||c(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var a=0,b=
this.currentElements=this.elements();b[a];a++)this.check(b[a]);return this.valid()},element:function(a){this.lastElement=a=this.validationTargetFor(this.clean(a));this.prepareElement(a);this.currentElements=c(a);var b=!1!==this.check(a);return b?delete this.invalid[a.name]:this.invalid[a.name]=!0,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),b},showErrors:function(a){if(a){c.extend(this.errorMap,a);this.errorList=[];for(var b in a)this.errorList.push({message:a[b],
element:this.findByName(b)[0]});this.successList=c.grep(this.successList,function(b){return!(b.name in a)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){c.fn.resetForm&&c(this.currentForm).resetForm();this.submitted={};this.lastElement=null;this.prepareForm();this.hideErrors();this.elements().removeClass(this.settings.errorClass).removeData("previousValue")},numberOfInvalids:function(){return this.objectLength(this.invalid)},
objectLength:function(a){var b=0,c;for(c in a)b++;return b},hideErrors:function(){this.addWrapper(this.toHide).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{c(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(a){}},findLastActive:function(){var a=this.lastActive;return a&&1===c.grep(this.errorList,function(b){return b.element.name===
a.name}).length&&a},elements:function(){var a=this,b={};return c(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function(){return!this.name&&a.settings.debug&&window.console&&console.error("%o has no name assigned",this),this.name in b||!a.objectLength(c(this).rules())?!1:(b[this.name]=!0,!0)})},clean:function(a){return c(a)[0]},errors:function(){var a=this.settings.errorClass.replace(" ",".");return c(this.settings.errorElement+
"."+a,this.errorContext)},reset:function(){this.successList=[];this.errorList=[];this.errorMap={};this.toShow=c([]);this.toHide=c([]);this.currentElements=c([])},prepareForm:function(){this.reset();this.toHide=this.errors().add(this.containers)},prepareElement:function(a){this.reset();this.toHide=this.errorsFor(a)},elementValue:function(a){var b=c(a).attr("type"),d=c(a).val();return"radio"===b||"checkbox"===b?c("input[name\x3d'"+c(a).attr("name")+"']:checked").val():"string"==typeof d?d.replace(/\r/g,
""):d},check:function(a){a=this.validationTargetFor(this.clean(a));var b,d=c(a).rules(),e=!1,f=this.elementValue(a),g;for(g in d){var h={method:g,parameters:d[g]};try{if(b=c.validator.methods[g].call(this,f,a,h.parameters),"dependency-mismatch"===b)e=!0;else{if(e=!1,"pending"===b)return this.toHide=this.toHide.not(this.errorsFor(a)),void 0;if(!b)return this.formatAndAdd(a,h),!1}}catch(l){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+a.id+", check the '"+
h.method+"' method.",l),l;}}return e?void 0:(this.objectLength(d)&&this.successList.push(a),!0)},customDataMessage:function(a,b){return c(a).data("msg-"+b.toLowerCase())||a.attributes&&c(a).attr("data-msg-"+b.toLowerCase())},customMessage:function(a,b){var c=this.settings.messages[a];return c&&(c.constructor===String?c:c[b])},findDefined:function(){for(var a=0;arguments.length>a;a++)if(void 0!==arguments[a])return arguments[a]},defaultMessage:function(a,b){return this.findDefined(this.customMessage(a.name,
b),this.customDataMessage(a,b),!this.settings.ignoreTitle&&a.title||void 0,c.validator.messages[b],"\x3cstrong\x3eWarning: No message defined for "+a.name+"\x3c/strong\x3e")},formatAndAdd:function(a,b){var d=this.defaultMessage(a,b.method),e=/\$?\{(\d+)\}/g;"function"==typeof d?d=d.call(this,b.parameters,a):e.test(d)&&(d=c.validator.format(d.replace(e,"{$1}"),b.parameters));this.errorList.push({message:d,element:a});this.errorMap[a.name]=d;this.submitted[a.name]=d},addWrapper:function(a){return this.settings.wrapper&&
(a=a.add(a.parent(this.settings.wrapper))),a},defaultShowErrors:function(){var a,b;for(a=0;this.errorList[a];a++)b=this.errorList[a],this.settings.highlight&&this.settings.highlight.call(this,b.element,this.settings.errorClass,this.settings.validClass),this.showLabel(b.element,b.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(a=0;this.successList[a];a++)this.showLabel(this.successList[a]);if(this.settings.unhighlight)for(a=0,b=this.validElements();b[a];a++)this.settings.unhighlight.call(this,
b[a],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow);this.hideErrors();this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return c(this.errorList).map(function(){return this.element})},showLabel:function(a,b){var d=this.errorsFor(a);d.length?(d.removeClass(this.settings.validClass).addClass(this.settings.errorClass),d.html(b)):(d=c("\x3c"+this.settings.errorElement+
"\x3e").attr("for",this.idOrName(a)).addClass(this.settings.errorClass).html(b||""),this.settings.wrapper&&(d=d.hide().show().wrap("\x3c"+this.settings.wrapper+"/\x3e").parent()),this.labelContainer.append(d).length||(this.settings.errorPlacement?this.settings.errorPlacement(d,c(a)):d.insertAfter(a)));!b&&this.settings.success&&(d.text(""),"string"==typeof this.settings.success?d.addClass(this.settings.success):this.settings.success(d,a));this.toShow=this.toShow.add(d)},errorsFor:function(a){var b=
this.idOrName(a);return this.errors().filter(function(){return c(this).attr("for")===b})},idOrName:function(a){return this.groups[a.name]||(this.checkable(a)?a.name:a.id||a.name)},validationTargetFor:function(a){return this.checkable(a)&&(a=this.findByName(a.name).not(this.settings.ignore)[0]),a},checkable:function(a){return/radio|checkbox/i.test(a.type)},findByName:function(a){return c(this.currentForm).find("[name\x3d'"+a+"']")},getLength:function(a,b){switch(b.nodeName.toLowerCase()){case "select":return c("option:selected",
b).length;case "input":if(this.checkable(b))return this.findByName(b.name).filter(":checked").length}return a.length},depend:function(a,b){return this.dependTypes[typeof a]?this.dependTypes[typeof a](a,b):!0},dependTypes:{"boolean":function(a){return a},string:function(a,b){return!!c(a,b.form).length},"function":function(a,b){return a(b)}},optional:function(a){var b=this.elementValue(a);return!c.validator.methods.required.call(this,b,a)&&"dependency-mismatch"},startRequest:function(a){this.pending[a.name]||
(this.pendingRequest++,this.pending[a.name]=!0)},stopRequest:function(a,b){this.pendingRequest--;0>this.pendingRequest&&(this.pendingRequest=0);delete this.pending[a.name];b&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(c(this.currentForm).submit(),this.formSubmitted=!1):!b&&0===this.pendingRequest&&this.formSubmitted&&(c(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(a){return c.data(a,"previousValue")||c.data(a,"previousValue",
{old:null,valid:!0,message:this.defaultMessage(a,"remote")})}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(a,b){a.constructor===String?this.classRuleSettings[a]=b:c.extend(this.classRuleSettings,a)},classRules:function(a){var b={};a=c(a).attr("class");return a&&c.each(a.split(" "),function(){this in c.validator.classRuleSettings&&c.extend(b,c.validator.classRuleSettings[this])}),
b},attributeRules:function(a){var b={};a=c(a);var d=a[0].getAttribute("type"),e;for(e in c.validator.methods){var f;"required"===e?(f=a.get(0).getAttribute(e),""===f&&(f=!0),f=!!f):f=a.attr(e);/min|max/.test(e)&&(null===d||/number|range|text/.test(d))&&(f=Number(f));f?b[e]=f:d===e&&"range"!==d&&(b[e]=!0)}return b.maxlength&&/-1|2147483647|524288/.test(b.maxlength)&&delete b.maxlength,b},dataRules:function(a){var b,d={},e=c(a);for(b in c.validator.methods)a=e.data("rule-"+b.toLowerCase()),void 0!==
a&&(d[b]=a);return d},staticRules:function(a){var b={},d=c.data(a.form,"validator");return d.settings.rules&&(b=c.validator.normalizeRule(d.settings.rules[a.name])||{}),b},normalizeRules:function(a,b){return c.each(a,function(d,e){if(!1===e)return delete a[d],void 0;if(e.param||e.depends){var f=!0;switch(typeof e.depends){case "string":f=!!c(e.depends,b.form).length;break;case "function":f=e.depends.call(b,b)}f?a[d]=void 0!==e.param?e.param:!0:delete a[d]}}),c.each(a,function(d,e){a[d]=c.isFunction(e)?
e(b):e}),c.each(["minlength","maxlength"],function(){a[this]&&(a[this]=Number(a[this]))}),c.each(["rangelength","range"],function(){var b;a[this]&&(c.isArray(a[this])?a[this]=[Number(a[this][0]),Number(a[this][1])]:"string"==typeof a[this]&&(b=a[this].split(/[\s,]+/),a[this]=[Number(b[0]),Number(b[1])]))}),c.validator.autoCreateRanges&&(a.min&&a.max&&(a.range=[a.min,a.max],delete a.min,delete a.max),a.minlength&&a.maxlength&&(a.rangelength=[a.minlength,a.maxlength],delete a.minlength,delete a.maxlength)),
a},normalizeRule:function(a){if("string"==typeof a){var b={};c.each(a.split(/\s/),function(){b[this]=!0});a=b}return a},addMethod:function(a,b,d){c.validator.methods[a]=b;c.validator.messages[a]=void 0!==d?d:c.validator.messages[a];3>b.length&&c.validator.addClassRules(a,c.validator.normalizeRule(a))},methods:{required:function(a,b,d){return this.depend(d,b)?"select"===b.nodeName.toLowerCase()?(a=c(b).val())&&0<a.length:this.checkable(b)?0<this.getLength(a,b):0<c.trim(a).length:"dependency-mismatch"},
email:function(a,b){return this.optional(b)||/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(a)},
url:function(a,b){return this.optional(b)||/^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(a)},
date:function(a,b){return this.optional(b)||!/Invalid|NaN/.test(""+new Date(a))},dateISO:function(a,b){return this.optional(b)||/^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test(a)},number:function(a,b){return this.optional(b)||/^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(a)},digits:function(a,b){return this.optional(b)||/^\d+$/.test(a)},creditcard:function(a,b){if(this.optional(b))return"dependency-mismatch";if(/[^0-9 \-]+/.test(a))return!1;var c=0,e=0,f=!1;a=a.replace(/\D/g,"");for(var g=a.length-1;0<=
g;g--)e=a.charAt(g),e=parseInt(e,10),f&&9<(e*=2)&&(e-=9),c+=e,f=!f;return 0===c%10},minlength:function(a,b,d){a=c.isArray(a)?a.length:this.getLength(c.trim(a),b);return this.optional(b)||a>=d},maxlength:function(a,b,d){a=c.isArray(a)?a.length:this.getLength(c.trim(a),b);return this.optional(b)||d>=a},rangelength:function(a,b,d){a=c.isArray(a)?a.length:this.getLength(c.trim(a),b);return this.optional(b)||a>=d[0]&&d[1]>=a},min:function(a,b,c){return this.optional(b)||a>=c},max:function(a,b,c){return this.optional(b)||
c>=a},range:function(a,b,c){return this.optional(b)||a>=c[0]&&c[1]>=a},equalTo:function(a,b,d){d=c(d);return this.settings.onfocusout&&d.unbind(".validate-equalTo").bind("blur.validate-equalTo",function(){c(b).valid()}),a===d.val()},remote:function(a,b,d){if(this.optional(b))return"dependency-mismatch";var e=this.previousValue(b);if(this.settings.messages[b.name]||(this.settings.messages[b.name]={}),e.originalMessage=this.settings.messages[b.name].remote,this.settings.messages[b.name].remote=e.message,
d="string"==typeof d&&{url:d}||d,e.old===a)return e.valid;e.old=a;var f=this;this.startRequest(b);var g={};return g[b.name]=a,c.ajax(c.extend(!0,{url:d,mode:"abort",port:"validate"+b.name,dataType:"json",data:g,success:function(d){f.settings.messages[b.name].remote=e.originalMessage;var g=!0===d||"true"===d;if(g){var k=f.formSubmitted;f.prepareElement(b);f.formSubmitted=k;f.successList.push(b);delete f.invalid[b.name];f.showErrors()}else k={},d=d||f.defaultMessage(b,"remote"),k[b.name]=e.message=
c.isFunction(d)?d(a):d,f.invalid[b.name]=!0,f.showErrors(k);e.valid=g;f.stopRequest(b,g)}},d)),"pending"}}});c.format=c.validator.format})(jQuery);(function(c){var a={};if(c.ajaxPrefilter)c.ajaxPrefilter(function(b,c,f){c=b.port;"abort"===b.mode&&(a[c]&&a[c].abort(),a[c]=f)});else{var b=c.ajax;c.ajax=function(d){var e=("port"in d?d:c.ajaxSettings).port;return"abort"===("mode"in d?d:c.ajaxSettings).mode?(a[e]&&a[e].abort(),a[e]=b.apply(this,arguments),a[e]):b.apply(this,arguments)}}})(jQuery);
(function(c){c.extend(c.fn,{validateDelegate:function(a,b,d){return this.bind(b,function(b){var f=c(b.target);return f.is(a)?d.apply(f,arguments):void 0})}})})(jQuery);
(function () {
    function a(a) {
        return a.replace(/<.[^<>]*?>/g, " ").replace(/&nbsp;|&#160;/gi, " ").replace(/[.(),;:!?%#$'"_+=\/\-]*/g, "")
    }

    jQuery.validator.addMethod("maxWords", function (b, c, d) {
        return this.optional(c) || a(b).match(/\b\w+\b/g).length <= d
    }, jQuery.validator.format("Please enter {0} words or less."));
    jQuery.validator.addMethod("minWords", function (b, c, d) {
        return this.optional(c) || a(b).match(/\b\w+\b/g).length >= d
    }, jQuery.validator.format("Please enter at least {0} words."));
    jQuery.validator.addMethod("rangeWords",
        function (b, c, d) {
            b = a(b);
            var e = /\b\w+\b/g;
            return this.optional(c) || b.match(e).length >= d[0] && b.match(e).length <= d[1]
        }, jQuery.validator.format("Please enter between {0} and {1} words."))
})();
jQuery.validator.addMethod("letterswithbasicpunc", function (a, b) {
    return this.optional(b) || /^[a-z\-.,()'"\s]+$/i.test(a)
}, "Letters or punctuation only please");
jQuery.validator.addMethod("alphanumeric", function (a, b) {
    return this.optional(b) || /^\w+$/i.test(a)
}, "Letters, numbers, and underscores only please");
jQuery.validator.addMethod("lettersonly", function (a, b) {
    return this.optional(b) || /^[a-z]+$/i.test(a)
}, "Letters only please");
jQuery.validator.addMethod("nowhitespace", function (a, b) {
    return this.optional(b) || /^\S+$/i.test(a)
}, "No white space please");
jQuery.validator.addMethod("ziprange", function (a, b) {
    return this.optional(b) || /^90[2-5]\d\{2\}-\d{4}$/.test(a)
}, "Your ZIP-code must be in the range 902xx-xxxx to 905-xx-xxxx");
jQuery.validator.addMethod("zipcodeUS", function (a, b) {
    return this.optional(b) || /\d{5}-\d{4}$|^\d{5}$/.test(a)
}, "The specified US ZIP Code is invalid");
jQuery.validator.addMethod("integer", function (a, b) {
    return this.optional(b) || /^-?\d+$/.test(a)
}, "A positive or negative non-decimal number please");
jQuery.validator.addMethod("vinUS", function (a) {
    if (17 !== a.length) return !1;
    var b, c, d, e, f, g = "ABCDEFGHJKLMNPRSTUVWXYZ".split(""),
        h = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9],
        l = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2], k = 0;
    for (b = 0; 17 > b; b++) {
        e = l[b];
        d = a.slice(b, b + 1);
        8 === b && (f = d);
        if (isNaN(d)) for (c = 0; c < g.length; c++) {
            if (d.toUpperCase() === g[c]) {
                d = h[c];
                d *= e;
                isNaN(f) && 8 === c && (f = g[c]);
                break
            }
        } else d *= e;
        k += d
    }
    a = k % 11;
    10 === a && (a = "X");
    return a === f ? !0 : !1
}, "The specified vehicle identification number (VIN) is invalid.");
jQuery.validator.addMethod("dateITA", function (a, b) {
    var c = !1;
    if (/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(a)) var d = a.split("/"), c = parseInt(d[0], 10), e = parseInt(d[1], 10),
        d = parseInt(d[2], 10), f = new Date(d, e - 1, c),
        c = f.getFullYear() === d && f.getMonth() === e - 1 && f.getDate() === c ? !0 : !1; else c = !1;
    return this.optional(b) || c
}, "Please enter a correct date");
jQuery.validator.addMethod("iban", function (a, b) {
    if (this.optional(b)) return !0;
    if (!/^([a-zA-Z0-9]{4} ){2,8}[a-zA-Z0-9]{1,4}|[a-zA-Z0-9]{12,34}$/.test(a)) return !1;
    var c = a.replace(/ /g, "").toUpperCase(), d = {
        AL: "\\d{8}[\\dA-Z]{16}",
        AD: "\\d{8}[\\dA-Z]{12}",
        AT: "\\d{16}",
        AZ: "[\\dA-Z]{4}\\d{20}",
        BE: "\\d{12}",
        BH: "[A-Z]{4}[\\dA-Z]{14}",
        BA: "\\d{16}",
        BR: "\\d{23}[A-Z][\\dA-Z]",
        BG: "[A-Z]{4}\\d{6}[\\dA-Z]{8}",
        CR: "\\d{17}",
        HR: "\\d{17}",
        CY: "\\d{8}[\\dA-Z]{16}",
        CZ: "\\d{20}",
        DK: "\\d{14}",
        DO: "[A-Z]{4}\\d{20}",
        EE: "\\d{16}",
        FO: "\\d{14}",
        FI: "\\d{14}",
        FR: "\\d{10}[\\dA-Z]{11}\\d{2}",
        GE: "[\\dA-Z]{2}\\d{16}",
        DE: "\\d{18}",
        GI: "[A-Z]{4}[\\dA-Z]{15}",
        GR: "\\d{7}[\\dA-Z]{16}",
        GL: "\\d{14}",
        GT: "[\\dA-Z]{4}[\\dA-Z]{20}",
        HU: "\\d{24}",
        IS: "\\d{22}",
        IE: "[\\dA-Z]{4}\\d{14}",
        IL: "\\d{19}",
        IT: "[A-Z]\\d{10}[\\dA-Z]{12}",
        KZ: "\\d{3}[\\dA-Z]{13}",
        KW: "[A-Z]{4}[\\dA-Z]{22}",
        LV: "[A-Z]{4}[\\dA-Z]{13}",
        LB: "\\d{4}[\\dA-Z]{20}",
        LI: "\\d{5}[\\dA-Z]{12}",
        LT: "\\d{16}",
        LU: "\\d{3}[\\dA-Z]{13}",
        MK: "\\d{3}[\\dA-Z]{10}\\d{2}",
        MT: "[A-Z]{4}\\d{5}[\\dA-Z]{18}",
        MR: "\\d{23}",
        MU: "[A-Z]{4}\\d{19}[A-Z]{3}",
        MC: "\\d{10}[\\dA-Z]{11}\\d{2}",
        MD: "[\\dA-Z]{2}\\d{18}",
        ME: "\\d{18}",
        NL: "[A-Z]{4}\\d{10}",
        NO: "\\d{11}",
        PK: "[\\dA-Z]{4}\\d{16}",
        PS: "[\\dA-Z]{4}\\d{21}",
        PL: "\\d{24}",
        PT: "\\d{21}",
        RO: "[A-Z]{4}[\\dA-Z]{16}",
        SM: "[A-Z]\\d{10}[\\dA-Z]{12}",
        SA: "\\d{2}[\\dA-Z]{18}",
        RS: "\\d{18}",
        SK: "\\d{20}",
        SI: "\\d{15}",
        ES: "\\d{20}",
        SE: "\\d{20}",
        CH: "\\d{5}[\\dA-Z]{12}",
        TN: "\\d{20}",
        TR: "\\d{5}[\\dA-Z]{17}",
        AE: "\\d{3}\\d{16}",
        GB: "[A-Z]{4}\\d{14}",
        VG: "[\\dA-Z]{4}\\d{16}"
    }[c.substring(0,
        2)];
    if ("undefined" !== typeof d && !(new RegExp("^[A-Z]{2}\\d{2}" + d + "$", "")).test(c)) return !1;
    for (var d = c.substring(4, c.length) + c.substring(0, 4), c = "", e = !0, f, g = 0; g < d.length; g++) f = d.charAt(g), "0" !== f && (e = !1), e || (c += "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(f));
    f = d = "";
    for (e = 0; e < c.length; e++) f = c.charAt(e), f = "" + d + "" + f, d = f % 97;
    return 1 === d
}, "Please specify a valid IBAN");
jQuery.validator.addMethod("dateNL", function (a, b) {
    return this.optional(b) || /^(0?[1-9]|[12]\d|3[01])[\.\/\-](0?[1-9]|1[012])[\.\/\-]([12]\d)?(\d\d)$/.test(a)
}, "Please enter a correct date");
jQuery.validator.addMethod("phoneNL", function (a, b) {
    return this.optional(b) || /^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)[1-9]((\s|\s?\-\s?)?[0-9]){8}$/.test(a)
}, "Please specify a valid phone number.");
jQuery.validator.addMethod("mobileNL", function (a, b) {
    return this.optional(b) || /^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)6((\s|\s?\-\s?)?[0-9]){8}$/.test(a)
}, "Please specify a valid mobile number");
jQuery.validator.addMethod("postalcodeNL", function (a, b) {
    return this.optional(b) || /^[1-9][0-9]{3}\s?[a-zA-Z]{2}$/.test(a)
}, "Please specify a valid postal code");
jQuery.validator.addMethod("bankaccountNL", function (a, b) {
    if (this.optional(b)) return !0;
    if (!/^[0-9]{9}|([0-9]{2} ){3}[0-9]{3}$/.test(a)) return !1;
    for (var c = a.replace(/ /g, ""), d = 0, e = c.length, f = 0; f < e; f++) var g = e - f, h = c.substring(f, f + 1), d = d + g * h;
    return 0 === d % 11
}, "Please specify a valid bank account number");
jQuery.validator.addMethod("giroaccountNL", function (a, b) {
    return this.optional(b) || /^[0-9]{1,7}$/.test(a)
}, "Please specify a valid giro account number");
jQuery.validator.addMethod("bankorgiroaccountNL", function (a, b) {
    return this.optional(b) || $.validator.methods.bankaccountNL.call(this, a, b) || $.validator.methods.giroaccountNL.call(this, a, b)
}, "Please specify a valid bank or giro account number");
jQuery.validator.addMethod("time", function (a, b) {
    return this.optional(b) || /^([01]\d|2[0-3])(:[0-5]\d){1,2}$/.test(a)
}, "Please enter a valid time, between 00:00 and 23:59");
jQuery.validator.addMethod("time12h", function (a, b) {
    return this.optional(b) || /^((0?[1-9]|1[012])(:[0-5]\d){1,2}(\ ?[AP]M))$/i.test(a)
}, "Please enter a valid time in 12-hour am/pm format");
jQuery.validator.addMethod("phoneUS", function (a, b) {
    a = a.replace(/\s+/g, "");
    return this.optional(b) || 9 < a.length && a.match(/^(\+?1-?)?(\([2-9]\d{2}\)|[2-9]\d{2})-?[2-9]\d{2}-?\d{4}$/)
}, "Please specify a valid phone number");
jQuery.validator.addMethod("phoneUK", function (a, b) {
    a = a.replace(/\(|\)|\s+|-/g, "");
    return this.optional(b) || 9 < a.length && a.match(/^(?:(?:(?:00\s?|\+)44\s?)|(?:\(?0))(?:\d{2}\)?\s?\d{4}\s?\d{4}|\d{3}\)?\s?\d{3}\s?\d{3,4}|\d{4}\)?\s?(?:\d{5}|\d{3}\s?\d{3})|\d{5}\)?\s?\d{4,5})$/)
}, "Please specify a valid phone number");
jQuery.validator.addMethod("mobileUK", function (a, b) {
    a = a.replace(/\(|\)|\s+|-/g, "");
    return this.optional(b) || 9 < a.length && a.match(/^(?:(?:(?:00\s?|\+)44\s?|0)7(?:[45789]\d{2}|624)\s?\d{3}\s?\d{3})$/)
}, "Please specify a valid mobile number");
jQuery.validator.addMethod("phonesUK", function (a, b) {
    a = a.replace(/\(|\)|\s+|-/g, "");
    return this.optional(b) || 9 < a.length && a.match(/^(?:(?:(?:00\s?|\+)44\s?|0)(?:1\d{8,9}|[23]\d{9}|7(?:[45789]\d{8}|624\d{6})))$/)
}, "Please specify a valid uk phone number");
jQuery.validator.addMethod("postcodeUK", function (a, b) {
    return this.optional(b) || /^((([A-PR-UWYZ][0-9])|([A-PR-UWYZ][0-9][0-9])|([A-PR-UWYZ][A-HK-Y][0-9])|([A-PR-UWYZ][A-HK-Y][0-9][0-9])|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\s?([0-9][ABD-HJLNP-UW-Z]{2})|(GIR)\s?(0AA))$/i.test(a)
}, "Please specify a valid UK postcode");
jQuery.validator.addMethod("strippedminlength", function (a, b, c) {
    return jQuery(a).text().length >= c
}, jQuery.validator.format("Please enter at least {0} characters"));
jQuery.validator.addMethod("email2", function (a, b, c) {
    return this.optional(b) || /^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$/i.test(a)
}, jQuery.validator.messages.email);
jQuery.validator.addMethod("url2", function (a, b, c) {
    return this.optional(b) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)*(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(a)
}, jQuery.validator.messages.url);
jQuery.validator.addMethod("creditcardtypes", function (a, b, c) {
    if (/[^0-9\-\s]+/.test(a)) return !1;
    a = a.replace(/[\D\s]/g, "");
    b = 0;
    c.mastercard && (b |= 1);
    c.visa && (b |= 2);
    c.amex && (b |= 4);
    c.union && (b |= 6);
    c.insta && (b |= 7);
    c.dinersclub && (b |= 8);
    c.enroute && (b |= 16);
    c.laser && (b |= 18);
    c.discover && (b |= 32);
    c.jcb && (b |= 64);
    c.maestro && (b |= 96);
    c.unknown && (b |= 128);
    c.all && (b = 255);
    return b & 2 && /^(4)/.test(a) ? 16 === a.length || 13 === a.length || 19 === a.length : b & 18 && (/^(6304)/.test(a) || /^(560390)/.test(a) || /^(670695)/.test(a) || /^(67711[3789])/.test(a) ||
        /^(677120)/.test(a)) ? 16 <= a.length && 19 >= a.length : b & 96 && (/^(0604)/.test(a) || /^(50)/.test(a) && !/^(5019)/.test(a) || /^(5[6789])/.test(a) || /^(6[012347])/.test(a) || /^(6660)/.test(a) || /^(6670)/.test(a) || /^(6818)/.test(a) || /^(6858)/.test(a) || /^(6890)/.test(a) || /^(6901)/.test(a) || /^(6907)/.test(a)) ? 12 <= a.length && 19 >= a.length : b & 1 && /^(5[12345])/.test(a) ? 16 === a.length : b & 4 && /^(3[47])/.test(a) ? 15 === a.length : b & 6 && (/^(62)/.test(a) || /^(88)/.test(a)) ? 16 <= a.length && 19 >= a.length : b & 8 && (/^(3(0[012345]))/.test(a) || /^(36)/.test(a) ||
        /^(54)/.test(a) || /^(55)/.test(a)) ? 14 === a.length : b & 32 && (/^(6011)/.test(a) || /^(622[123456789][2][56])/.test(a) || /^(64[456789])/.test(a) || /^(65)/.test(a)) || b & 7 && /^(63[789])/.test(a) || b & 64 && /^(35((28) | (29) | [345678]))/.test(a) ? 16 === a.length : b & 64 && /^(2131|1800)/.test(a) ? 15 === a.length : b & 32 && /^(6011)/.test(a) ? 16 === a.length : $.payment.validateCardNumber(a)
}, "Please enter a valid credit card number.");
jQuery.validator.addMethod("ipv4", function (a, b, c) {
    return this.optional(b) || /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i.test(a)
}, "Please enter a valid IP v4 address.");
jQuery.validator.addMethod("ipv6", function (a, b, c) {
    return this.optional(b) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(a)
}, "Please enter a valid IP v6 address.");
jQuery.validator.addMethod("pattern", function (a, b, c) {
    if (this.optional(b)) return !0;
    "string" === typeof c && (c = new RegExp("^(?:" + c + ")$"));
    return c.test(a)
}, "Invalid format.");
jQuery.validator.addMethod("require_from_group", function (a, b, c) {
    var d = this;
    a = c[1];
    c = $(a, b.form).filter(function () {
        return d.elementValue(this)
    }).length >= c[0];
    $(b).data("being_validated") || (b = $(a, b.form), b.data("being_validated", !0), b.valid(), b.data("being_validated", !1));
    return c
}, jQuery.format("Please fill at least {0} of these fields."));
jQuery.validator.addMethod("skip_or_fill_minimum", function (a, b, c) {
    var d = this;
    a = c[0];
    c = c[1];
    var e = $(c, b.form).filter(function () {
        return d.elementValue(this)
    }).length;
    a = e >= a || 0 === e;
    $(b).data("being_validated") || (b = $(c, b.form), b.data("being_validated", !0), b.valid(), b.data("being_validated", !1));
    return a
}, jQuery.format("Please either skip these fields or fill at least {0} of them."));
jQuery.validator.addMethod("accept", function (a, b, c) {
    a = "string" === typeof c ? c.replace(/\s/g, "").replace(/,/g, "|") : "image/*";
    c = this.optional(b);
    var d;
    if (c) return c;
    if ("file" === $(b).attr("type") && (a = a.replace(/\*/g, ".*"), b.files && b.files.length)) for (c = 0; c < b.files.length; c++) if (d = b.files[c], !d.type.match(new RegExp(".?(" + a + ")$", "i"))) return !1;
    return !0
}, jQuery.format("Please enter a value with a valid mimetype."));
jQuery.validator.addMethod("extension", function (a, b, c) {
    c = "string" === typeof c ? c.replace(/,/g, "|") : "png|jpe?g|gif";
    return this.optional(b) || a.match(new RegExp(".(" + c + ")$", "i"))
}, jQuery.format("Please enter a value with a valid extension."));
jQuery.validator.addMethod("expfulldate", function (a, b, c) {
    a = parseInt($(c[0]).val());
    var d = parseInt($(c[1]).val());
    if (!a || !d) return !0;
    var e = new Date;
    month = e.getMonth() + 1;
    year = e.getFullYear();
    this.optional(b) || d > year || d === year && a >= month ? ($(c[0]).removeClass("error"), $(c[1]).removeClass("error")) : ($(c[0]).addClass("error"), $(c[1]).addClass("error"));
    return this.optional(b) || d > year || d === year && a >= month
}, jQuery.format("Please enter exp date later than now."));
jQuery.validator.addMethod("bothRequired", function (a, b, c) {
    return $(c[0]).val() || $(c[1]).val() ? !0 : !1
}, jQuery.format("Provide both month and year."));
jQuery.validator.addMethod("validateState", function (a, b) {
    var regex = new XRegExp("^(\\p{L}|[\\s-\\',\\.]){2,20}$");
    a = $.trim(a);
    return regex.test(a);
}, "Invalid State");
jQuery.validator.addMethod("validateZIP", function (a, b) {
    a = $.trim(a);
    return /^(.[-_0-9a-zA-z ]{1,20}$)|^(-)$/.test(a)
}, "Invalid ZIP");
jQuery.validator.addMethod("validateCity", function (a, b) {
    var regex = new XRegExp("^(\\p{L}|[\\s-\\',\\.]){1,20}$");
    a = $.trim(a);
    return regex.test(a);
}, "Invalid City");
jQuery.validator.addMethod("validateStreet", function (a, b) {
    var regex = new XRegExp("^((\\p{L}(\\p{M})?)|[\\d\\s-\\'\\\",\\.\\/\\;\\\\№#]){2,100}$");
    a = $.trim(a);
    return regex.test(a)
}, "Invalid Street");
jQuery.validator.addMethod("validatePhone", function (a, b) {
    a = $.trim(a);
    return /^[+]?[(]?[\d\s][)]?[-()\s\d]{5,20}$/.test(a) && !/^[- ]$/.test(a)
}, "Invalid Phone");
jQuery.validator.addMethod("validateHolder", function (a, b) {
    return /^[A-Za-z][-.'a-zA-Z\s]{0,60}$/.test(a)
}, "Invalid Name");
jQuery.validator.addMethod("validateEmail", function (a, b) {
    a = $.trim(a).toLowerCase();
    return /^[-a-z0-9!#$%&'*+/=?^_`{|}~]+(?:\.[-a-z0-9!#$%&'*+/=?^_`{|}~]+)*@(?:[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?\.)*(?:aero|arpa|asia|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|tel|travel|[a-z][a-z])$/.test(a)
}, "Invalid Email");
jQuery.validator.addMethod("cvvlength", function (a, b) {
    return /^\d{3,4}$/.test(a)
}, "Invalid CVV");
jQuery.validator.addMethod("cidlength", function (a, b) {
    return /^\d{4}$/.test(a)
}, "Invalid CID");

function isTestPan(a) {
    return "4000000000000000" === a || "5555555555554444" === a ? !0 : !1
}

jQuery.validator.addMethod("mod10", function (a, b) {
    var x = jQuery.payment.cardType(jQuery("#input-card-number").val());
    if (x == "unionpay") return true;
    a = a.replace(/[\D\s]/g, "");
    if (isTestPan(a)) return !0;
    for (var c = 0, d = a.toString().length, e = 0, f = 0, e = 1 - d % 2; e < d; e += 2) f = parseInt(a.toString().substring(e, e + 1)), isNaN(f) || (c += f);
    for (e = d % 2; e < d; e += 2) f = 2 * parseInt(a.toString().substring(e, e + 1)), isNaN(f) || (c = 10 > f ? c + f : c + (f - 9));
    return 0 == c % 10 ? !0 : !1
}, "Invalid Card Number");
jQuery.validator.addMethod('mustunionpay', function (a, b) {
    var x = jQuery.payment.cardType(jQuery("#input-card-number").val());
    if (x == "unionpay") return true;
    else if ((x != "unionpay" && x !== null) || x === null) { //Если введена карта не unionpay или введенна неизвестная последовательность
        var value = $("#input-card-number").val();
        if (typeof value === "string" && (value.replace(/\s/g, '').length >= 16 && value.replace(/\s/g, '').length <= 19)) {
            return true;
        }
    } else {
        return false;
    }
}, "Enter a full card number");
jQuery.validator.addMethod("validateLengthCardholderIdentity", function (a, b) {
    return a.length === 15 || a.length === 18
}, "Invalid Length");
jQuery.validator.addMethod("validatePatternCardholderIdentity", function (a, b) {
    return /^(\d{14}|\d{17})(X|\d)$/.test(a)
}, "Invalid Cardholder Identity");
jQuery.validator.addMethod("validateChinaPnrHolder",
    function (a, b) {
        return /^([\u4E00-\u9FCC\u3400-\u4DB5\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29]|[\ud840-\ud868][\udc00-\udfff]|\ud869[\udc00-\uded6\udf00-\udfff]|[\ud86a-\ud86c][\udc00-\udfff]|\ud86d[\udc00-\udf34\udf40-\udfff]|\ud86e[\udc00-\udc1d])+$/.test(a)
    }, "Invalid Name");
jQuery.validator.addMethod("validateChinaPnrHolderBytes",
    function (a, b) {
        var s = a.length;
        for (var i = a.length - 1; i >= 0; i--) {
            var code = a.charCodeAt(i);
            if (code > 0x7f && code <= 0x7ff) s++;
            else if (code > 0x7ff && code <= 0xffff) s += 2;
            if (code >= 0xDC00 && code <= 0xDFFF) i--; //trail surrogate
        }
        return s <= 64;
    }, "Invalid Name");
jQuery.validator.addMethod("validateQiwiPhone",
    function (a, b) {
        return /^(\+)?\d{1,15}$/.test(a);
    }, "Invalid phone number");
jQuery.validator.addMethod("validatedlHolderNumber",
    function (a, b) {
        return /^[0-9]{1,30}$/.test(a);
    }, "Invalid personal number");
jQuery.validator.addMethod("validateCountryId",
    function (a, b) {
        return a === "DE" || a === "AT";
    }, "The selected value of Country field is invalid.");
jQuery.validator.addMethod("validateBitcoinAddress",
    function (a, b) {
        var res = window.WAValidator.validate(a, 'bitcoin', window.networkType);
        return res;
    }, "Bitcoin address is incorrect");
jQuery.validator.addMethod("dokuLoginId", function (value) {
    var dokuid_reg = /^[\-\+]?(([0-9]+)([\.,]([0-9]+))?|([\.,]([0-9]+))?).{10,}$/;
    var emai_reg = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i;
    if (emai_reg.test(value) || dokuid_reg.test(value)) {
        return true;
    }
}, 'Input email atau 10 digit Doku ID');
(function(n,t){n.fn.watch=function(i){function u(t,i,u){t.each(function(){var i=n(this),t;window.MutationObserver?(t=i.data("__watcherObserver"+r.id),t==null&&(t=new MutationObserver(u.fnc),i.data("__watcherObserver"+r.id,t)),t.observe(this,{attributes:!0,subtree:r.watchChildren,childList:r.watchChildren,characterData:!0})):u.intervalId=setInterval(u.fnc,r.interval)})}function f(i,r,f){var s=n(this),e=s.data(i),a,l,o,h,c;if(e&&(a=this,e.func)){for(l=!1,o=0,o;o<e.props.length;o++)if((h=e.props[o],c="",c=h.startsWith("attr_")?s.attr(h.replace("attr_","")):h.startsWith("prop_")?s.prop(h.replace("prop_","")):s.css(h),c!=t)&&e.vals[o]!=c){e.vals[o]=c;l=!0;break}l&&(s.unwatch(i),e.func.call(a,e,o,r,f),u(s,i,e))}}var r=n.extend({properties:null,interval:100,id:"_watcher_"+(new Date).getTime(),watchChildren:!1,callback:null},i);return this.each(function(){var e=this,i=n(this),o=function(n,t){f.call(e,r.id,n,t)},t={id:r.id,props:r.properties.split(","),vals:[r.properties.split(",").length],func:r.callback,fnc:o,origProps:r.properties,interval:r.interval,intervalId:null};n.each(t.props,function(n){var r=t.props[n];t.vals[n]=t.props[n].startsWith("attr_")?i.attr(r.replace("attr_","")):r.startsWith("prop_")?i.prop(r.replace("props_","")):i.css(r)});i.data(r.id,t);u(i,r.id,t)})};n.fn.unwatch=function(t){return this.each(function(){var i=n(this),u=i.data(t),r;try{window.MutationObserver?(r=i.data("__watcherObserver"+t),r&&(r.disconnect(),i.removeData("__watcherObserver"+t))):clearInterval(u.intervalId)}catch(f){}}),this};String.prototype.startsWith=function(n){return n===null||n===t?!1:n==this.substr(0,n.length)}})(jQuery,undefined);
(function() {
    var d, m, p, k, g, q, r, s, t, u, v, n, w, x, y, z, A, B, D = [].slice,
        C = [].indexOf || function(a) {
            for (var b = 0, c = this.length; b < c; b++)
                if (b in this && this[b] === a) return b;
            return -1
        };
    d = jQuery;
    d.payment = {};
    d.payment.fn = {};
    d.fn.payment = function() {
        var a, b;
        b = arguments[0];
        a = 2 <= arguments.length ? D.call(arguments, 1) : [];
        return d.payment.fn[b].apply(this, a)
    };
    g = /(\d{1,4})/g;
    $.payment.cards = k = [{
        type: "discover",
        pattern: /^(6011|65|64[4-9]|622)/,
        format: g,
        length: [16],
        cvcLength: [3],
        luhn: !0
    },{
        type: "maestro",
        pattern: /^(0604|50|5[6789]|60|61|63|64|67|6660|6670|6818|6858|6890|6901|6907)/,
        format: g,
        length: [12, 13, 14, 15, 16, 17, 18, 19],
        cvcLength: [3],
        luhn: !0
    }, {
        type: "dinersclub",
        pattern: /^(36|38|30[0-5])/,
        format: g,
        length: [14],
        cvcLength: [3],
        luhn: !0
    }, {
        type: "laser",
        pattern: /^(6304|560390|670695|67711[3789]|677120)/,
        format: g,
        length: [16, 17, 18, 19],
        cvcLength: [3],
        luhn: !0
    }, {
        type: "jcb",
        pattern: /^(((352[8-9][0-9][0-9])|(35[3-8][0-9][0-9][0-9]))|((30[8-9][8-9][0-9][0-9])|309[0-4][0-9][0-9])|((309[6-9][0-9][0-9])|310[0-2][0-9][0-9])|(311[2-9][0-9][0-9])|(3120[0-9][0-9])|(315[8-9][0-9][0-9])|((333[7-9][0-9][0-9])|(334[0-9][0-9][0-9]))|(35))/,
        format: g,
        length: [16, 19],
        cvcLength: [3],
        luhn: !0
    }, {
        type: "unionpay",
        pattern: /^(62|9558)/,
        format: g,
        length: [16, 17, 18, 19],
        cvcLength: [3],
        luhn: !1
    }, {
        type: "mastercard",
        pattern: /^5[1-5]|^2(?:2(?:2[1-9]|[3-9]\d)|[3-6]\d\d|7(?:[01]\d|20))/,
        format: g,
        length: [16],
        cvcLength: [3],
        luhn: !0
    }, {
        type: "amex",
        pattern: /^3[47]/,
        format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
        length: [15],
        cvcLength: [3, 4],
        luhn: !0
    }, {
        type: "visa",
        pattern: /^4/,
        format: g,
        length: [13, 14, 15, 16, 19],
        cvcLength: [3],
        luhn: !0
    }];
    m = function(a) {
        var b, c, e;
        a = (a + "").replace(/\D/g, "");
        c = 0;
        for (e = k.length; c < e; c++)
            if (b = k[c], b.pattern.test(a)) return b
    };
    p = function(a) {
        var b, c, e;
        c = 0;
        for (e = k.length; c < e; c++)
            if (b = k[c], b.type === a) return b
    };
    w = function(a) {
        var b, c, e, d, f;
        c = !0;
        e = 0;
        b = (a + "").split("").reverse();
        d = 0;
        for (f = b.length; d <
            f; d++) {
            a = b[d];
            a = parseInt(a, 10);
            if (c = !c) a *= 2;
            9 < a && (a -= 9);
            e += a
        }
        return 0 === e % 10
    };
    n = function(a) {
        var b;
        return null != a.prop("selectionStart") && a.prop("selectionStart") !== a.prop("selectionEnd") || "undefined" !== typeof document && null !== document && null != (b = document.selection) && "function" === typeof b.createRange && b.createRange().text ? !0 : !1
    };
    x = function(a) {
        return setTimeout(function() {
            var b, c;
            b = d(a.currentTarget);
            c = b.val();
            c = d.payment.formatCardNumber(c);
            return b.val(c)
        })
    };
    s = function(a) {
        var b, c, e, h, f, l;
        e = String.fromCharCode(a.which);
        if (/^\d+$/.test(e) && (b = d(a.currentTarget), l = b.val(), c = m(l + e), h = (l.replace(/\D/g, "") + e).length, f = 16, c && (f = c.length[c.length.length - 1]), !(h >= f || null != b.prop("selectionStart") && b.prop("selectionStart") !== l.length))) {
            c = c && "amex" === c.type ? /^(\d{4}|\d{4}\s\d{6})$/ : /(?:^|\s)(\d{4})$/;
            if (c.test(l)) return a.preventDefault(), b.val(l + " " + e);
            c.test(l + e)
        }
    };
    q = function(a) {
        var b, c;
        b = d(a.currentTarget);
        c = b.val();
        if (!a.meta && 8 === a.which && (null == b.prop("selectionStart") || b.prop("selectionStart") === c.length)) {
            if (/\d\s$/.test(c)) return a.preventDefault(),
                b.val(c.replace(/\d\s$/, ""));
            if (/\s\d?$/.test(c)) return a.preventDefault(), b.val(c.replace(/\s\d?$/, ""))
        }
    };
    t = function(a) {
        var b, c;
        c = String.fromCharCode(a.which);
        if (/^\d+$/.test(c)) {
            b = d(a.currentTarget);
            c = b.val() + c;
            if (/^\d$/.test(c) && "0" !== c && "1" !== c) return a.preventDefault(), b.val("0" + c + " / ");
            if (/^\d\d$/.test(c)) return a.preventDefault(), b.val("" + c + " / ")
        }
    };
    u = function(a) {
        var b;
        b = String.fromCharCode(a.which);
        if (/^\d+$/.test(b) && (a = d(a.currentTarget), b = a.val(), /^\d\d$/.test(b))) return a.val("" + b + " / ")
    };
    v = function(a) {
        var b;
        if ("/" === String.fromCharCode(a.which) && (a = d(a.currentTarget), b = a.val(), /^\d$/.test(b) && "0" !== b)) return a.val("0" + b + " / ")
    };
    r = function(a) {
        var b, c;
        if (!a.meta && (b = d(a.currentTarget), c = b.val(), 8 === a.which && (null == b.prop("selectionStart") || b.prop("selectionStart") === c.length))) {
            if (/\d(\s|\/)+$/.test(c)) return a.preventDefault(), b.val(c.replace(/\d(\s|\/)*$/, ""));
            if (/\s\/\s?\d?$/.test(c)) return a.preventDefault(), b.val(c.replace(/\s\/\s?\d?$/, ""))
        }
    };
    A = function(a) {
        if (a.metaKey || a.ctrlKey) return !0;
        if (32 === a.which) return !1;
        if (0 === a.which || 33 > a.which) return !0;
        a = String.fromCharCode(a.which);
        return !!/[\d\s]/.test(a)
    };
    y = function(a) {
        var b;
        b = d(a.currentTarget);
        a = String.fromCharCode(a.which);
        if (/^\d+$/.test(a) && !n(b)) return a = (b.val() + a).replace(/\D/g, ""), (b = m(a)) ? a.length <= b.length[b.length.length - 1] : 16 >= a.length
    };
    z = function(a) {
        var b;
        b = d(a.currentTarget);
        a = String.fromCharCode(a.which);
        if (/^\d+$/.test(a) && !n(b) && (b = b.val() + a, b = b.replace(/\D/g, ""), 6 < b.length)) return !1
    };
    restrictCVC = function(a) {
        var b;
        b = d(a.currentTarget);
        a = String.fromCharCode(a.which);
        if (/^\d+$/.test(a)) return b = b.val() + a, 4 >= b.length
    };
    B = function(a) {
        var b, c;
        a = d(a.currentTarget);
        b = a.val();
        c = d.payment.cardType(b) || "unknown";
        if (!a.hasClass(c)) {
            var e, h, f;
            f = [];
            e = 0;
            for (h = k.length; e < h; e++) b = k[e], f.push(b.type);
            a.removeClass("unknown");
            a.removeClass(f.join(" "));
            a.addClass(c);
            $('body').removeClass("unknown").removeClass(f.join(" ")).addClass(c)
            a.toggleClass("identified", "unknown" !== c);
            return a.trigger("payment.cardType", c)
        }
    };
    d.payment.fn.formatCardCVC = function() {
        this.payment("restrictNumeric");
        this.on("keydown",
            restrictCVC);
        return this
    };
    d.payment.fn.formatCardExpiry = function() {
        this.payment("restrictNumeric");
        this.on("keypress", z);
        this.on("keypress", t);
        this.on("keypress", v);
        this.on("keypress", u);
        this.on("keydown", r);
        return this
    };
    d.payment.fn.formatCardNumber = function() {
        this.payment("restrictNumeric");
        this.on("keypress", y);
        this.on("keypress", s);
        this.on("keydown", q);
        this.on("keyup", B);
        this.on("paste", x);
        return this
    };
    d.payment.fn.restrictNumeric = function() {
        this.on("keypress", A);
        return this
    };
    d.payment.fn.cardExpiryVal =
        function() {
            return d.payment.cardExpiryVal(d(this).val())
        };
    d.payment.cardExpiryVal = function(a) {
        var b, c;
        a = a.replace(/\s/g, "");
        b = a.split("/", 2);
        a = b[0];
        c = b[1];
        2 === (null != c ? c.length : void 0) && /^\d+$/.test(c) && (b = (new Date).getFullYear(), b = b.toString().slice(0, 2), c = b + c);
        a = parseInt(a, 10);
        c = parseInt(c, 10);
        return {
            month: a,
            year: c
        }
    };
    d.payment.validateCardNumber = function(a) {
        var b, c;
        a = (a + "").replace(/\s+|-/g, "");
        return /^\d+$/.test(a) ? (b = m(a)) ? (c = a.length, 0 <= C.call(b.length, c)) && (!1 === b.luhn || w(a)) : !1 : !1
    };
    d.payment.validateCardExpiry =
        function(a, b) {
            var c, e;
            "object" === typeof a && "month" in a && (c = a, a = c.month, b = c.year);
            if (!a || !b) return !1;
            a = d.trim(a);
            b = d.trim(b);
            if (!(/^\d+$/.test(a) && /^\d+$/.test(b) && 12 >= parseInt(a, 10))) return !1;
            2 === b.length && (c = (new Date).getFullYear(), c = c.toString().slice(0, 2), b = c + b);
            e = new Date(b, a);
            c = new Date;
            e.setMonth(e.getMonth() - 1);
            e.setMonth(e.getMonth() + 1, 1);
            return e > c
        };
    d.payment.validateCardCVC = function(a, b) {
        var c, e;
        a = d.trim(a);
        return /^\d+$/.test(a) ? b ? (c = a.length, 0 <= C.call(null != (e = p(b)) ? e.cvcLength : void 0,
            c)) : 3 <= a.length && 4 >= a.length : !1
    };
    d.payment.cardType = function(a) {
        var b;
        return a ? (null != (b = m(a)) ? b.type : void 0) || null : null
    };
    d.payment.formatCardNumber = function(a) {
        var b, c, e;
        b = m(a);
        if (!b) return a;
        c = b.length[b.length.length - 1];
        a = a.replace(/\D/g, "");
        a = a.slice(0, +c + 1 || 9E9);
        if (b.format.global) return null != (e = a.match(b.format)) ? e.join(" ") : void 0;
        a = b.format.exec(a);
        null != a && a.shift();
        return null != a ? a.join(" ") : void 0
    };
    d.fn.blockInput = function(a) {
        function b(a, b) {
            for (var c = "", d = 0; d < a.length; d++) a.substr(0,
                d) + a.substr(d + a.length - b.length) === b && (c = a.substr(d, a.length - b.length));
            return c
        }

        function c(b, c) {
            return c && !a.fromCvv ? (new RegExp(a.regex)).test(b) || /^[ ]$/.test(b) : (new RegExp(a.regex)).test(b)
        }
        this.filter("input,textarea").on("input", function() {
            var e = this.value,
                h = d(this).data("lastVal"),
                f = b(e, h),
                l = b(h, e),
                g = 1 < f.length || !f && !l;
            if (g) {
                a: {
                    if (!/^[\d][ ][\d]$/.test(e) || a.fromCvv)
                        for (var k = 0; k < e.length; k++)
                            if (!c(e.substr(k, 1), !0)) {
                                e = !1;
                                break a
                            }
                    e = !0
                }
                e || (this.value = h)
            }
            else l || c(f, !1) || (this.value = h);
            l || g ||
                !/(?:^|\s)(\d{4})$/.test(h + f) || (this.value = h + f + " ");
            d(this).data("lastVal", this.value)
        }).on("focus", function() {
            d(this).data("lastVal", this.value)
        });
        return this
    }
}).call(this);

var i18n = {
    getCookie: function(name) {
        var matches = document.cookie.match(new RegExp(
            "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
        ));
        return matches ? decodeURIComponent(matches[1]) : undefined;
    },
    /**
     * Run intetnationalization engine
     *
     * @param {string} language (false) - Set page language manually
     * @param {string} theme (false) - Set page merchant theme
     */
    run: function(language, theme, onHold, holdedId) {
        var onHold = onHold || false;
        var holdedId = holdedId || "";
        /* > Initialize */
        var pageLang = !!language ? language : document.querySelector('html').getAttribute('lang') || 'en';
        var versionSuffix = '0-0-13';
        var merchant = !!theme ? theme : $('input[name="cssURL"]').val() || '';
        var pageDefaultFile = (window.MI_THEMES_URL ? window.MI_THEMES_URL : '') + 'i18n/en.'+versionSuffix+'.json';
        var pageLangFile = (window.MI_THEMES_URL ? window.MI_THEMES_URL : '') + 'i18n/' + pageLang + '.'+versionSuffix+'.json';
        if (merchant !== ''){
            var merchantDefaultFile = (window.MI_THEMES_URL ? window.MI_THEMES_URL : '') + 'clients/'+ merchant +'/en.'+versionSuffix+'.json';
            var merchantLangFile = (window.MI_THEMES_URL ? window.MI_THEMES_URL : '') + 'clients/'+ merchant +'/' + pageLang + '.'+versionSuffix+'.json';
        }
        var defaultPageObject = $.Deferred();
        var defaultMerchantObject = $.Deferred();
        var langPageObject = $.Deferred();
        var langMerchantObject = $.Deferred();

        /* > Get default language values */
        i18n.getLanguage(pageDefaultFile, defaultPageObject);
        if (merchant !== '') {
            i18n.getLanguage(merchantDefaultFile, defaultMerchantObject);
        } else {
            defaultMerchantObject.resolve();
        }

        /* > Get page language values */
        if (pageLang != 'en') {
            i18n.getLanguage(pageLangFile, langPageObject);
            if (merchant !== '') {
                merchantLangFile = location.protocol + '//' + location.host + location.pathname + '/../' + merchantLangFile.replace(/\/en([^.]*\.json)$/, '/ru$1');
                i18n.getLanguage(merchantLangFile, langMerchantObject);
            } else {
                langMerchantObject.resolve();
            }
        } else {
            langPageObject.resolve();
            langMerchantObject.resolve();
        }

        /* > When all objects resolves - make result and render */
        $.when(
            defaultPageObject,
            defaultMerchantObject,
            langPageObject,
            langMerchantObject
        ).done(function(){
            // Build result
            var result = [];
            for (var i in arguments) {
                result = jQuery.extend(true, result, arguments[i]);
            }
            i18n.storage = result;
            // > Set values for dunamically validators
            setValidatorMessages();
            // >Render
            i18n.render(onHold, holdedId);
        });

    },

    /**
     * Rendering language values
     */
    render: function(onHold, holdedId) {
        var selector = '[data-i18n]:not([data-i18n-hold])';
        if (onHold) {
            selector = holdedId;
        }
        $(selector, document).each(function(){
            var keys = $(this).data('i18n').split('.'),
                value = i18n.getValue(keys);
            if (!value) {
                return;
            }
            if ( $(this).is('input[type="submit"], input[type="hidden"]') ) {
                $(this).val(value)
            } else if ( $(this).is('input[type="password"], input[type="text"], input[type="email"], textarea') ) {
                $(this).attr('placeholder', value)
            } else {
                $(this).html(value)
            }
        });
        // add dinamic copyright
        $('[data-i18n="messages.copyright"]').text('© 2012 — '+ new Date().getFullYear() +' CardPay');

        $('body').addClass('localized');
    },

    /**
     * Get language values
     *
     * @param {string} url - URL for retrieve language
     * @param {string} object - Deffered object to resolve
     */
    getLanguage: function(url, object) {
        $.getJSON(url).complete(function(xhr, status) {
            var result = status == 'success' ? xhr.responseJSON : [];
            object.resolve(result)
        });
    },

    /**
     * Language storage
     */
    storage: {},

    /**
     * Get value from storage
     *
     * @private
     * @param {array} keys - List of keys
     */
    getValue: function(keys) {
        var returned = i18n.storage;
        for (var i in keys) {
            if (returned[keys[i]]) {
                returned = returned[ keys[i] ];
            } else {
                returned = '';
            }
        }
        return returned;
    },

    /**
     * Manually get value from storage by string
     *
     * @param {string} key - Key
     */
    get: function(key) {
        return i18n.getValue(key.split('.'));
    }

};


/**
 * Run i18n when page is loaded
 */
$(function(){
    i18n.run(false, false);
});

(function(c){c.matchMedia=c.matchMedia||function(c,e){var h,r=c.documentElement,t=r.firstElementChild||r.firstChild,m=c.createElement("body"),f=c.createElement("div");f.id="mq-test-1";f.style.cssText="position:absolute;top:-100em";m.style.background="none";m.appendChild(f);return function(c){f.innerHTML='\x26shy;\x3cstyle media\x3d"'+c+'"\x3e #mq-test-1 { width: 42px; }\x3c/style\x3e';r.insertBefore(m,t);h=42===f.offsetWidth;r.removeChild(m);return{matches:h,media:c}}}(c.document)})(this);
(function(c){function D(){y(!0)}var e={};c.respond=e;e.update=function(){};var h=[],r=function(){var d=!1;try{d=new c.XMLHttpRequest}catch(b){d=new c.ActiveXObject("Microsoft.XMLHTTP")}return function(){return d}}(),t=function(d,b){var a=r();a&&(a.open("GET",d,!0),a.onreadystatechange=function(){4!==a.readyState||200!==a.status&&304!==a.status||b(a.responseText)},4!==a.readyState&&a.send(null))},m=function(d){return d.replace(e.regex.minmaxwh,"").match(e.regex.other)};e.ajax=t;e.queue=h;e.unsupportedmq=
m;e.regex={media:/@media[^\{]+\{([^\{\}]*\{[^\}\{]*\})+/gi,keyframes:/@(?:\-(?:o|moz|webkit)\-)?keyframes[^\{]+\{(?:[^\{\}]*\{[^\}\{]*\})+[^\}]*\}/gi,comments:/\/\*[^*]*\*+([^/][^*]*\*+)*\//gi,urls:/(url\()['"]?([^\/\)'"][^:\)'"]+)['"]?(\))/g,findStyles:/@media *([^\{]+)\{([\S\s]+?)$/,only:/(only\s+)?([a-zA-Z]+)\s?/,minw:/\(\s*min\-width\s*:\s*(\s*[0-9\.]+)(px|em)\s*\)/,maxw:/\(\s*max\-width\s*:\s*(\s*[0-9\.]+)(px|em)\s*\)/,minmaxwh:/\(\s*m(in|ax)\-(height|width)\s*:\s*(\s*[0-9\.]+)(px|em)\s*\)/gi,
other:/\([^\)]*\)/g};e.mediaQueriesSupported=c.matchMedia&&null!==c.matchMedia("only all")&&c.matchMedia("only all").matches;if(!e.mediaQueriesSupported){var f=c.document,k=f.documentElement,u=[],v=[],n=[],z={},w=f.getElementsByTagName("head")[0]||k,I=f.getElementsByTagName("base")[0],x=w.getElementsByTagName("link"),A,E,B,C=function(){var d,b=f.createElement("div"),a=f.body,c=k.style.fontSize,e=a&&a.style.fontSize,g=!1;b.style.cssText="position:absolute;font-size:1em;width:1em";a||(a=g=f.createElement("body"),
a.style.background="none");k.style.fontSize="100%";a.style.fontSize="100%";a.appendChild(b);g&&k.insertBefore(a,k.firstChild);d=b.offsetWidth;g?k.removeChild(a):a.removeChild(b);k.style.fontSize=c;e&&(a.style.fontSize=e);return d=B=parseFloat(d)},y=function(d){var b=k.clientWidth,a="CSS1Compat"===f.compatMode&&b||f.body.clientWidth||b,b={},e=x[x.length-1],q=(new Date).getTime();if(d&&A&&30>q-A)c.clearTimeout(E),E=c.setTimeout(y,30);else{A=q;for(var g in u)if(u.hasOwnProperty(g)){d=u[g];var q=d.minw,
s=d.maxw,l=null===q,h=null===s;q&&(q=parseFloat(q)*(-1<q.indexOf("em")?B||C():1));s&&(s=parseFloat(s)*(-1<s.indexOf("em")?B||C():1));d.hasquery&&(l&&h||!(l||a>=q)||!(h||a<=s))||(b[d.media]||(b[d.media]=[]),b[d.media].push(v[d.rules]))}for(var p in n)n.hasOwnProperty(p)&&n[p]&&n[p].parentNode===w&&w.removeChild(n[p]);n.length=0;for(var m in b)b.hasOwnProperty(m)&&(g=f.createElement("style"),p=b[m].join("\n"),g.type="text/css",g.media=m,w.insertBefore(g,e.nextSibling),g.styleSheet?g.styleSheet.cssText=
p:g.appendChild(f.createTextNode(p)),n.push(g))}},F=function(d,b,a){var c=d.replace(e.regex.comments,"").replace(e.regex.keyframes,"").match(e.regex.media),f=c&&c.length||0;b=b.substring(0,b.lastIndexOf("/"));var g=!f&&a;b.length&&(b+="/");g&&(f=1);for(var h=0;h<f;h++){var l,k,p;g?(l=a,v.push(d.replace(e.regex.urls,"$1"+b+"$2$3"))):(l=c[h].match(e.regex.findStyles)&&RegExp.$1,v.push(RegExp.$2&&RegExp.$2.replace(e.regex.urls,"$1"+b+"$2$3")));k=l.split(",");p=k.length;for(var n=0;n<p;n++)l=k[n],m(l)||
u.push({media:l.split("(")[0].match(e.regex.only)&&RegExp.$2||"all",rules:v.length-1,hasquery:-1<l.indexOf("("),minw:l.match(e.regex.minw)&&parseFloat(RegExp.$1)+(RegExp.$2||""),maxw:l.match(e.regex.maxw)&&parseFloat(RegExp.$1)+(RegExp.$2||"")})}y()},G=function(){if(h.length){var d=h.shift();t(d.href,function(b){F(b,d.href,d.media);z[d.href]=!0;c.setTimeout(function(){G()},0)})}},H=function(){for(var d=0;d<x.length;d++){var b=x[d],a=b.href,e=b.media,f=b.rel&&"stylesheet"===b.rel.toLowerCase();if(a&&
f&&!z[a])if(b.styleSheet&&b.styleSheet.rawCssText)F(b.styleSheet.rawCssText,a,e),z[a]=!0;else if(!/^([a-zA-Z:]*\/\/)/.test(a)&&!I||a.replace(RegExp.$1,"").split("/")[0]===c.location.host)"//"===a.substring(0,2)&&(a=c.location.protocol+a),h.push({href:a,media:e})}G()};H();e.update=H;e.getEmValue=C;c.addEventListener?c.addEventListener("resize",D,!1):c.attachEvent&&c.attachEvent("onresize",D)}})(this);
var Fingerprint2 = Fingerprint2 || false;
(function () {
    $(function () {

        $(document)
        /*
        	Overlays
        */
            .on('click', '.modal-toggle', function () {
                $('#overlay').fadeIn();
                $('.modal').hide();
                var modalID = '#modal-' + $(this).data('modal');
                $(modalID).fadeIn();
                return false;
            })
            .on('click', '.modal-close', function () {
                $('#overlay').fadeOut();
            })
            .on('keyup', function (e) {
                if (e.which == 27) {
                    $('#overlay').fadeOut();
                }
            })
            .on('click', function (event) {
                var $el = $(event.target).parents().andSelf();
                if (!$el.is('.modal')) {
                    $('#overlay').fadeOut();
                }
            })
            /*
                Billing & Shipping Duplicates
             */
            .on('change', '#payment-data-shipping-fields input, #payment-data-shipping-fields select', function () {
                $('#input-same-as-shipping').trigger('change')
            })
            .on('change', '#input-same-as-shipping', function (a) {
                if ($(this).is(":checked")) {
                    (a = $("#input-shipping-country").val()) && $("#input-billing-country").val(a).valid();
                    $("#input-billing-state").val($("#input-shipping-state").val());
                    $("#input-billing-city").val($("#input-shipping-city").val());
                    $("#input-billing-phone").val($("#input-shipping-phone").val());
                    $("#input-billing-zip").val($("#input-shipping-zip").val());
                    $("#input-billing-street").val($("#input-shipping-street").val())
                } else {
                    $("#input-billing-country")[0].selectedIndex = 0;
                    $("#input-billing-state").val("");
                    $("#input-billing-city").val("");
                    $("#input-billing-phone").val("");
                    $("#input-billing-zip").val("");
                    $("#input-billing-street").val("")
                }

                if ($(this).prop('checked')) {
                    $('#payment-data-billing-fields').hide();
                } else {
                    $('#payment-data-billing-fields').show();
                }
            })
            .on('change', '#use-as-billing', function (a) {
                var b;
                a = $(this).is(":checked");
                b = $("#payment-data-shipping-copy");
                var $inputBillingCountry = $("#input-billing-country");
                var $inputBillingState = $("#input-billing-state");
                var $inputBillingCity = $("#input-billing-city");
                var $inputBillingPhone = $("#input-billing-phone");
                var $inputBillingZip = $("#input-billing-zip");
                var $inputBillingStreet = $("#input-billing-street");

                var $inputShippingCountry = $("#input-shipping-country");
                var $inputShippingState = $("#input-shipping-state");
                var $inputShippingCity = $("#input-shipping-city");
                var $inputShippingPhone = $("#input-shipping-phone");
                var $inputShippingZip = $("#input-shipping-zip");
                var $inputShippingStreet = $("#input-shipping-street");

                if (a) {
                    $inputBillingCountry.attr("readonly", true).val((!!b.length)? b.data("country") : (!!$inputShippingCountry.val() ? $inputShippingCountry .val().trim() : "0") ).valid();
                    $inputBillingState.attr("readonly", true).val((!!b.length)? b.data("state") : (!!$inputShippingState.val() ? $inputShippingState .val().trim() : "")).valid();
                    $inputBillingCity.attr("readonly", true).val((!!b.length)? b.data("city") : (!!$inputShippingCity.val() ? $inputShippingCity .val().trim() : "")).valid();
                    $inputBillingPhone.attr("readonly", true).val((!!b.length)? b.data("phone") : (!!$inputShippingPhone.val() ? $inputShippingPhone .val().trim() : "")).valid();
                    $inputBillingZip.attr("readonly", true).val((!!b.length)? b.data("zip") : (!!$inputShippingZip.val() ? $inputShippingZip .val().trim(): "")).valid();
                    $inputBillingStreet.attr("readonly", true).val((!!b.length)? b.data("street") : (!!$inputShippingStreet.val() ? $inputShippingStreet .val().trim() : "")).valid();
                } else {
                    $inputBillingCountry.attr("readonly", false).val("0");
                    $inputBillingState.attr("readonly", false).val("");
                    $inputBillingCity.attr("readonly", false).val("");
                    $inputBillingPhone.attr("readonly", false).val("");
                    $inputBillingZip.attr("readonly", false).val("");
                    $inputBillingStreet.attr("readonly", false).val("");
                }

            })

            /*
                Cardholder Uppercase
             */
            .on('keyup', '#input-card-holder', function () {
                this.value = this.value.toUpperCase();
            })
            /*
                Hint CVC
             */
            .on('mouseenter mouseleave', '#cvc-hint-toggle', function () {
                $(this).siblings('#cvc-hint-bubble').toggleClass('opened');
            });

        var isUnionpayWallet = false;
        var cardBrand = "";
        $('#unionpay-icon').addClass('hidden');
        if (!!window.isUnionpayWallet && window.isUnionpayWallet === "true") {
            isUnionpayWallet = true;
            $('#unionpay-icon').removeClass('hidden');
            $('#visa-icon').addClass('hidden');
            $('#mastercard-icon').addClass('hidden');
            $('#pci-icon').addClass('hidden');
        }
        if (!!window.cardBrand && window.cardBrand === "unionpay") {
            cardBrand = "unionpay";
            $('#unionpay-icon').removeClass('hidden');
            $('#visa-icon').addClass('hidden');
            $('#mastercard-icon').addClass('hidden');
            $('#jcb-icon').addClass('hidden');
            $('#pci-icon').addClass('hidden');
            $('#qiwi-icon').addClass('hidden');
        }
        window.isChinaPnr = false;
        if (!!$('#input-card-holder-identity-field').length) {
            isChinaPnr = true;
        }

        var isQiwiPage = false;
        if (!!$("#input-qiwi-phone").length) {
            isQiwiPage = true;
        }
        /*
			Form Validate
        */
        window.validator = $("#payment-form").validate({
            groups: {
                fulldate: "month year"
            },
            errorPlacement: function (error, element) {
                if (element.attr("name") === "month" || element.attr("name") === "year") {
                    error.insertAfter("#card-expires-year")
                } else if (element.attr("name") === "chkAgree" || element.attr("name") === "acceptProducts") {
                    error.insertAfter(element.siblings('label'))
                } else {
                    error.insertAfter(element)
                }
            },
            rules: {
                PAN: isUnionpayWallet ? {
                    required: !0,
                    mustunionpay: !0
                } : {
                    required: !0,
                    mod10: !0,
                    creditcardtypes: {
                        visa: 0,
                        mastercard: 0,
                        amex: 0,
                        maestro: 0,
                        union: !0,
                        insta: 0,
                        laser: 0,
                        jcb: 0,
                        dinersclub: 0,
                        discover: 0
                    }
                },
                customerPersonalNumber: {
                    required: !0,
                    validatedlHolderNumber: !0
                },
                fullName: {
                    validateHolder: !0,
                    rangelength: [4, 50],
                    required: !0
                },
                cardholderName: isChinaPnr ? {
                    validateChinaPnrHolder: !0,
                    validateChinaPnrHolderBytes: !0,
                    required: !0
                } : {
                    validateHolder: !0,
                    rangelength: [4, 50],
                    required: !0
                },
                cardholderIdentity: {
                    validateLengthCardholderIdentity: !0,
                    validatePatternCardholderIdentity: !0,
                    required: !0
                },
                qiwiPhone: {
                    required: !0,
                    validateQiwiPhone: !0
                },
                CVV2: {
                    required: !0,
                    digits: !0,
                    cvvlength: !0
                },
                email: {
                    required: !0,
                    validateEmail: !0
                },
                year: {
                    expfulldate: ["#card-expires-month", "#card-expires-year"],
                    bothRequired: ["#card-expires-month", "#card-expires-year"]
                },
                month: {
                    expfulldate: ["#card-expires-month", "#card-expires-year"],
                    bothRequired: ["#card-expires-month", "#card-expires-year"]
                },
                shipCountry: {
                    required: !0
                },
                shipState: {
                    validateState: !0,
                    rangelength: [2, 20]
                },
                shipCity: {
                    required: !0,
                    validateCity: !0,
                    rangelength: [2, 20]
                },
                shipStreet: {
                    required: !0,
                    validateStreet: !0,
                    rangelength: [2, 100]
                },
                shipZip: {
                    required: !0,
                    validateZIP: !0,
                    rangelength: [1,
                        12
                    ]
                },
                shipPhone: {
                    required: !0,
                    validatePhone: !0,
                    rangelength: [5, 20]
                },
                country: {
                    required: !0
                },
                stateOrProvince: {
                    validateState: !0,
                    rangelength: [2, 20]
                },
                city: {
                    required: !0,
                    validateCity: !0,
                    rangelength: [2, 20]
                },
                street: {
                    required: !0,
                    validateStreet: !0,
                    rangelength: [2, 100]
                },
                zip: {
                    required: !0,
                    validateZIP: !0,
                    rangelength: [1, 12]
                },
                phone: isQiwiPage ? {
                    required: !0,
                    validateQiwiPhone: !0,
                    rangelength: [1, 15]
                } : {
                    required: !0,
                    validatePhone: !0,
                    rangelength: [5, 20]
                },
                chkAgree: {
                    required: !0
                },
                acceptProducts: {
                    required: !0
                }
            },
            messages: {}, // after loading lang files -> setValidatorMessages
            submitHandler: function (a) {
                $('body').addClass('processing');
                $(document).trigger('form.submit');
                if ($("#input-qiwi-phone").length) {
                    $("#input-qiwi-phone").inputmask('remove');
                }
                try {
                    new Fingerprint2().get(function (result, components) {
                        $('[name="fingerprint').val(result);
                        setTimeout(function () {
                            a.submit();
                        }, 3E3);
                    });
                }
                catch (e) {
                    a.submit();
                }
            },
            invalidHandler: function (a, b) {
                $('body').removeClass('processing');
                b.numberOfInvalids();
            }
        });

        /*
			CVC Rules
        */

        var cvcInput$ = $("#input-card-cvc");
        cvcInput$.payment('formatCardCVC');
        if (!!$('#card-cvc-field').length) {
            $("#input-card-number").bind('payment.cardType', function (event) {
                var label$ = $('span[data-i18n="paymentdata.card.cvc.label"]');
                if (!$(this).hasClass('identified') || !$(this).hasClass('amex')) {
                    label$.text(label$.text().replace('/CID', ''));
                    cvcInput$.attr('maxlength', 3);
                    cvcInput$.rules('remove', 'cidlength');
                    cvcInput$.rules('add', {cvvlength: true});
                    return;
                }
                label$.text(label$.text() + '/CID');
                cvcInput$.attr('maxlength', 4);
                cvcInput$.rules('remove', 'cvvlength');
                cvcInput$.rules('add', {cidlength: true});

            });
        }

        //Cut useless nulls from total Amount on result page
        var paymentItemTotalAmount = $('#payment-item-total-amount');
        if (!!paymentItemTotalAmount.length) {
            var totalAmount = paymentItemTotalAmount.text();
            var decimalPart;
            if (totalAmount.indexOf(".") > -1) {
                decimalPart = totalAmount.slice(totalAmount.indexOf(".") + 1);
            }
            if (!decimalPart) {
                paymentItemTotalAmount.text(totalAmount.replace('.', '') + ".00");
                return;
            }
            if (/^0+$/.test(decimalPart)) {
                paymentItemTotalAmount.text(totalAmount.slice(0, totalAmount.indexOf(".") + 1) + "00");
            } else {
                paymentItemTotalAmount.text(Array.prototype.reduceRight.call(paymentItemTotalAmount.text(), function (total, number) {
                    if (number !== '0' || !!total.length) {
                        return number + '' + total;
                    }
                    return '';
                }, ''));
            }
        }

        /*
			Input Card iconizer
        */
        if (isUnionpayWallet) { // DP/UP payment pages must not support non UP cards
            var unionpayCard = $.payment.cards.find(function (card) {
                return card.type === 'unionpay'
            });
            $.payment.cards.splice(0, $.payment.cards.length, unionpayCard, {
                type: "other",
                pattern: /^\d/,
                format: /(\d{1,4})/g,
                length: [16, 17, 18, 19],
                cvcLength: [3],
                luhn: false
            });
        }
        var inputCardNumber$ = $('#input-card-number');
        var cardData = inputCardNumber$.payment("formatCardNumber");

        if (!!inputCardNumber$.val()) {
            inputCardNumber$.keyup();
        }


        c = function (a) {
            return navigator ? (a = a || navigator.userAgent, a = a.match(/Android\s([0-9\.]*)/), null != a ? a[1] : !1) : !1
        };
        if (c() && 4.2 >= parseFloat(c())) {
            return $('#terms-tooltip').attr("href", "http://www.cardpay.com/en/terms").attr("target", "_blank")
        }


    })


}).call(this);


function setValidatorMessages() {
    var messages = {
        PAN: {
            required: i18n.get('paymentdata.card.number.validator.required'),
            mod10: i18n.get('paymentdata.card.number.validator.mod10'),
            creditcardtypes: i18n.get('paymentdata.card.number.validator.type'),
            mustunionpay: i18n.get('paymentdata.card.number.validator.mustunionpay')
        },
        cardholderName: {
            validateHolder: i18n.get('paymentdata.card.holder.validator.invalid'),
            validateChinaPnrHolder: i18n.get('paymentdata.card.holder.validator.invalid'),
            validateChinaPnrHolderBytes: i18n.get('paymentdata.card.holder.validator.invalid'),
            required: i18n.get('paymentdata.card.holder.validator.required'),
            rangelength: i18n.get('paymentdata.card.holder.validator.invalidRangeLength')
        },
        customerPersonalNumber: {
            required: i18n.get('paymentdata.dl.number.validator.required'),
            validatedlHolderNumber: i18n.get('paymentdata.dl.number.validator.invalid'),
        },
        fullName: {
            validateHolder: i18n.get('paymentdata.dl.fullName.validator.invalid'),
            required: i18n.get('paymentdata.dl.fullName.validator.required'),
            rangelength: i18n.get('paymentdata.card.holder.validator.invalidRangeLength')
        },
        cardholderIdentity: {
            validateLengthCardholderIdentity: i18n.get('paymentdata.card.holder.identity.validator.length'),
            validatePatternCardholderIdentity: i18n.get('paymentdata.card.holder.identity.validator.pattern'),
            required: i18n.get('paymentdata.card.holder.identity.validator.required')
        },
        CVV2: {
            required: i18n.get('paymentdata.card.cvc.validator.required'),
            digits: i18n.get('paymentdata.card.cvc.validator.digits'),
            cvvlength: i18n.get('paymentdata.card.cvc.validator.cvvlength'),
            cidlength: i18n.get('paymentdata.card.cvc.validator.cidlength')
        },
        email: {
            required: i18n.get('paymentdata.card.email.validator.required'),
            email: i18n.get('paymentdata.card.email.validator.invalid'),
            validateEmail: i18n.get('paymentdata.card.email.validator.invalid')
        },
        year: {
            required: i18n.get('paymentdata.card.expires.validator.required'),
            expfulldate: i18n.get('paymentdata.card.expires.validator.invalid'),
            bothRequired: i18n.get('paymentdata.card.expires.validator.bothrequired')
        },
        month: {
            required: i18n.get('paymentdata.card.expires.validator.required'),
            expfulldate: i18n.get('paymentdata.card.expires.validator.invalid'),
            bothRequired: i18n.get('paymentdata.card.expires.validator.bothrequired')
        },
        shipCountry: {
            required: i18n.get('paymentdata.address.country.validator.required')
        },
        shipState: {
            validateState: i18n.get('paymentdata.address.state.validator.invalid')
        },
        shipCity: {
            required: i18n.get('paymentdata.address.city.validator.required')
        },
        shipStreet: {
            required: i18n.get('paymentdata.address.street.validator.required')
        },
        shipZip: {
            required: i18n.get('paymentdata.address.zip.validator.required')
        },
        shipPhone: {
            required: i18n.get('paymentdata.address.phone.validator.required')
        },
        country: {
            required: i18n.get('paymentdata.address.country.validator.required')
        },
        stateOrProvince: {
            validateState: i18n.get('paymentdata.address.state.validator.invalid')
        },
        city: {
            required: i18n.get('paymentdata.address.city.validator.required'),
            validateCity: i18n.get('paymentdata.address.city.validator.invalid')
        },
        street: {
            required: i18n.get('paymentdata.address.street.validator.required'),
            validateStreet: i18n.get('paymentdata.address.street.validator.invalid')
        },
        zip: {
            required: i18n.get('paymentdata.address.zip.validator.required'),
            validateZIP: i18n.get('paymentdata.address.zip.validator.invalid')
        },
        phone: {
            required: i18n.get('paymentdata.address.phone.validator.required'),
            validatePhone: i18n.get('paymentdata.address.phone.validator.invalid'),
            validateQiwiPhone: i18n.get('paymentdata.qiwi.phone.validator.pattern')
        },
        chkAgree: {
            required: i18n.get('privacypolicy.validator.required')
        },
        acceptProducts: {
            required: i18n.get('orderlist.validator.required')
        },
        astropayCardholder: {
            required: i18n.get('astropay.cardholder.validator.required'),
            invalid: i18n.get('astropay.cardholder.validator.invalid')
        },
        astropayEmail: {
            required: i18n.get('astropay.email.validator.required'),
            email: i18n.get('paymentdata.card.email.validator.invalid'),
            validateEmail: i18n.get('paymentdata.card.email.validator.invalid')
        },
        astropayCountry: {
            required: i18n.get('astropay.country.validator.required')
        },
        astropayBank: {
            required: i18n.get('astropay.bank.validator.required')
        },
        bank: {
            required: i18n.get('astropay.bank.validator.required')
        },
        cupBank: {
            required: i18n.get('astropay.bank.validator.required')
        },
        astropayUID: {
            required: i18n.get('astropay.uid.validator.required')
        },
        netellerEmail: {
            required: i18n.get('neteller.email.validator.required'),
            email: i18n.get('paymentdata.card.email.validator.invalid'),
            validateEmail: i18n.get('paymentdata.card.email.validator.invalid')
        },
        verificationCode: {
            required: i18n.get('neteller.uid.validator.required'),
            minlength: i18n.get('neteller.uid.validator.minlength')
        }
    };
    if (window.validator) {
        window.validator.settings.messages = messages;
    }
}

// Module
(function (global, window, document, $) {

    var uuid;

    // Singleton
    function CancelNotificationModule() {
        var instance = this,
            prototype = CancelNotificationModule.prototype;
        CancelNotificationModule = function () {
            return instance;
        };
        CancelNotificationModule.prototype = prototype;
        CancelNotificationModule.constructor = CancelNotificationModule;
        instance.constructor = CancelNotificationModule;
        instance.uuid = window.cancelNotificationModule && window.cancelNotificationModule.uuid || "";
        instance.init();

        return instance;
    }


    /**
     * Initialization event listener
     * @param uuid
     */
    CancelNotificationModule.prototype.init = function () {
        window.cancelClickEvents = [];
        $(document).on("click", "#action-cancel", (function (e) {
            if (!window.cancelClickEvents.length) {
                window.cancelClickEvents.push(e);
                $('#action-cancel').prop('disabled', true);
                $('body').addClass('processing');
                try {
                    $.ajax({
                        type: 'POST',
                        url: '/MI/cancel.html',
                        target: '_top',
                        data: {
                            uuid: this.uuid
                        },
                        complete: window.redirectToCancelUrl,
                        dataType: 'text'
                    });
                } catch (error) {
                    window.redirectToCancelUrl();
                }
            }
            e.preventDefault();
            return false;
        }).bind(this));
    };

    // Export singleton module
    window.cancelNotificationModule = new CancelNotificationModule;
})(this, window, window.document, $);

// Module
(function (global, window, document, $) {

    var data = {};

    // Singleton
    function PageDataModule() {
        var instance = this,
            prototype = PageDataModule.prototype;
        PageDataModule = function () {
            return instance;
        };
        PageDataModule.prototype = prototype;
        PageDataModule.constructor = PageDataModule;
        instance.constructor = PageDataModule;

        instance.data = window.pageDataModule && window.pageDataModule.data || {};
        instance.init(instance.data);

        return instance;
    }


    /**
     * Initialization event listener
     * @param uuid
     */
    PageDataModule.prototype.init = function (data) {
        var data = data || this.data;
        $(function () {
            var total = 0;
            for (var i in data) {
                if (i == 'payment-data-shipping-copy') {
                    var items = data[i],
                        txt = [];
                    for (var j in items) {
                        $('#' + i).data(j, items[j]);
                        if (items[j] != '') {
                            txt.push(items[j]);
                        }
                    }
                    $('#' + i).text(txt.join(', '));
                } else if (i == 'order-item-total') {
                    $('#' + i).find('span:nth-child(2)').text(data[i])
                } else if (i == "autoSubmitFlag") {
                    if (data[i] === true) {
                        $(document).ready(function () {
                            $(document).ajaxStop(function () {
                                $('#formSubmit').addClass('cvl');
                                var width = 30, height = 30;
                                $('#payment-info-actions form').append('<canvas id=cvl width=' + width + ' height=' + height + '></canvas>');
                                var cv = document.querySelector('#cvl');
                                var ctx = cv.getContext('2d');
                                if (!!ctx) {
                                    var C3qπ = 1.5 * Math.PI;
                                    var tc = pct = 0;
                                    ctx.lineWidth = 3;
                                    ctx.strokeStyle = '#fff';
                                    tc = setInterval(function () {
                                        ctx.clearRect(0, 0, width, height);
                                        ctx.beginPath();
                                        ctx.arc(width / 2, height / 2, 12, C3qπ, (pct * 2 * Math.PI / 100 + C3qπ));
                                        ctx.stroke();
                                        if (pct === 100) {
                                            clearInterval(tc);
                                            window.location.replace($('#payment-info-actions form').attr('action'));
                                            return;
                                        }
                                        pct++;
                                    }, 100);
                                    $(document).keyup(function (e) {
                                        if (e.keyCode === 27) {
                                            clearInterval(tc);
                                            $('#cvl').hide();
                                            $('#formSubmit').removeClass('cvl');
                                        }
                                    });
                                }
                            });
                        });

                    }
                } else {
                    $('#' + i).text(data[i])
                }
            }
        })
    };

    // Export singleton module
    window.pageDataModule = new PageDataModule;
})(this, window, window.document, $);